{
  "api/GameCanvas.BehaviourBase.html": {
    "href": "api/GameCanvas.BehaviourBase.html",
    "title": "Class BehaviourBase | GameCanvas",
    "keywords": "Class BehaviourBase Namespace GameCanvas Assembly GameCanvas.dll [DisallowMultipleComponent] [RequireComponent(typeof(Camera), typeof(AudioListener))] public abstract class BehaviourBase : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour BehaviourBase Derived GameBase Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties gc protected IGameCanvas gc { get; } Property Value IGameCanvas Methods DrawGame() 毎フレームの計算後の描画処理 public abstract void DrawGame() Entry() ゲームループを記述するコルーチン public abstract IEnumerator Entry() Returns IEnumerator InitGame() アプリ起動直後の処理 public abstract void InitGame() PauseGame() アプリが一時停止する直前の処理 public abstract void PauseGame() ResumeGame() アプリが一時停止から復帰した直後の処理 public abstract void ResumeGame() UpdateGame() 毎フレームの描画前の計算処理 public abstract void UpdateGame()"
  },
  "api/GameCanvas.CoordianteScope.html": {
    "href": "api/GameCanvas.CoordianteScope.html",
    "title": "Struct CoordianteScope | GameCanvas",
    "keywords": "Struct CoordianteScope Namespace GameCanvas Assembly GameCanvas.dll public readonly struct CoordianteScope : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Dispose() public void Dispose()"
  },
  "api/GameCanvas.DictWithLife-2.html": {
    "href": "api/GameCanvas.DictWithLife-2.html",
    "title": "Class DictWithLife<TKey, TValue> | GameCanvas",
    "keywords": "Class DictWithLife<TKey, TValue> Namespace GameCanvas Assembly GameCanvas.dll 期限付き辞書 public sealed class DictWithLife<TKey, TValue> where TKey : IEquatable<TKey> where TValue : class, new() Type Parameters TKey TValue Inheritance object DictWithLife<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DictWithLife(int, int) public DictWithLife(int capacity = 8, int initialSize = 0) Parameters capacity int initialSize int Methods DecrementLife() public void DecrementLife() Issue(in TKey, out TValue, in byte) public void Issue(in TKey key, out TValue value, in byte life = 3) Parameters key TKey value TValue life byte ReleaseAll() public void ReleaseAll() TryGetValue(in TKey, out TValue) public bool TryGetValue(in TKey key, out TValue value) Parameters key TKey value TValue Returns bool"
  },
  "api/GameCanvas.GameBase.html": {
    "href": "api/GameCanvas.GameBase.html",
    "title": "Class GameBase | GameCanvas",
    "keywords": "Class GameBase Namespace GameCanvas Assembly GameCanvas.dll public abstract class GameBase : BehaviourBase Inheritance object Object Component Behaviour MonoBehaviour BehaviourBase GameBase Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods DrawGame() 毎フレームの計算後の描画処理 public override void DrawGame() Entry() ゲームループを記述するコルーチン public override IEnumerator Entry() Returns IEnumerator InitGame() アプリ起動直後の処理 public override void InitGame() PauseGame() アプリが一時停止する直前の処理 public override void PauseGame() ResumeGame() アプリが一時停止から復帰した直後の処理 public override void ResumeGame() UpdateGame() 毎フレームの描画前の計算処理 public override void UpdateGame()"
  },
  "api/GameCanvas.GcAABB.html": {
    "href": "api/GameCanvas.GcAABB.html",
    "title": "Struct GcAABB | GameCanvas",
    "keywords": "Struct GcAABB Namespace GameCanvas Assembly GameCanvas.dll 軸に平行な矩形 (Axis Aligned Bounding Box) public struct GcAABB : IPrimitive<GcAABB>, IEquatable<GcAABB> Implements IPrimitive<GcAABB> IEquatable<GcAABB> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods GcAABBExtensions.Max(in GcAABB) GcAABBExtensions.Min(in GcAABB) GcAABBExtensions.Position(in GcAABB) GcAABBExtensions.Size(in GcAABB) GcCollisionExtensions.Contains(in GcAABB, in float2) GcCollisionExtensions.HitTest(in GcAABB, GcAABB, out GcHitResult) GcCollisionExtensions.HitTest(in GcAABB, in float2, out GcHitResult) GcCollisionExtensions.Overlaps(in GcAABB, in GcAABB) GcCollisionExtensions.SweepTest(in GcAABB, in GcAABB, in float2, out GcSweepResult) GcCollisionExtensions.SweepTest(in GcAABB, in float2, in float2, out GcSweepResult) Constructors GcAABB(in float2, in float2) public GcAABB(in float2 center, in float2 halfSize) Parameters center float2 halfSize float2 GcAABB(in Rect) public GcAABB(in Rect rect) Parameters rect Rect Fields Center 中心座標 public float2 Center Field Value float2 HalfSize 大きさの半値 public float2 HalfSize Field Value float2 Methods Equals(GcAABB) public readonly bool Equals(GcAABB other) Parameters other GcAABB Returns bool Equals(object) public override readonly bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int GetPoint(in GcAnchor) 矩形の指定された点の座標を計算します public readonly float2 GetPoint(in GcAnchor anchor) Parameters anchor GcAnchor Returns float2 MinMax(in float2, in float2) 2点を内包する最小の矩形 public static GcAABB MinMax(in float2 a, in float2 b) Parameters a float2 b float2 Returns GcAABB ToString() public override readonly string ToString() Returns string WH(in float2) public static GcAABB WH(in float2 size) Parameters size float2 Returns GcAABB XYWH(in float, in float, in float, in float) public static GcAABB XYWH(in float x, in float y, in float width, in float height) Parameters x float y float width float height float Returns GcAABB XYWH(in float2, in float2) public static GcAABB XYWH(in float2 position, in float2 size) Parameters position float2 size float2 Returns GcAABB Operators operator ==(GcAABB, GcAABB) public static bool operator ==(GcAABB lh, GcAABB rh) Parameters lh GcAABB rh GcAABB Returns bool explicit operator Rect(GcAABB) public static explicit operator Rect(GcAABB aabb) Parameters aabb GcAABB Returns Rect explicit operator GcAABB(Rect) public static explicit operator GcAABB(Rect rect) Parameters rect Rect Returns GcAABB implicit operator GcRect(GcAABB) public static implicit operator GcRect(GcAABB aabb) Parameters aabb GcAABB Returns GcRect operator !=(GcAABB, GcAABB) public static bool operator !=(GcAABB lh, GcAABB rh) Parameters lh GcAABB rh GcAABB Returns bool"
  },
  "api/GameCanvas.GcAABBExtensions.html": {
    "href": "api/GameCanvas.GcAABBExtensions.html",
    "title": "Class GcAABBExtensions | GameCanvas",
    "keywords": "Class GcAABBExtensions Namespace GameCanvas Assembly GameCanvas.dll GcAABB 拡張クラス public static class GcAABBExtensions Inheritance object GcAABBExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Max(in GcAABB) 領域内の最大座標（右下） public static float2 Max(this in GcAABB self) Parameters self GcAABB Returns float2 Min(in GcAABB) 領域内の最小座標（左上。Positionに同じ） public static float2 Min(this in GcAABB self) Parameters self GcAABB Returns float2 Position(in GcAABB) 位置 public static float2 Position(this in GcAABB self) Parameters self GcAABB Returns float2 Size(in GcAABB) 大きさ public static float2 Size(this in GcAABB self) Parameters self GcAABB Returns float2"
  },
  "api/GameCanvas.GcAccelerationEvent.html": {
    "href": "api/GameCanvas.GcAccelerationEvent.html",
    "title": "Struct GcAccelerationEvent | GameCanvas",
    "keywords": "Struct GcAccelerationEvent Namespace GameCanvas Assembly GameCanvas.dll 加速度イベント public readonly struct GcAccelerationEvent : IEquatable<GcAccelerationEvent> Implements IEquatable<GcAccelerationEvent> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Acceleration 加速度計の値 public readonly float3 Acceleration Field Value float3 Remarks キャンバス座標系で扱いやすいよう、Y軸, Z軸 の値をそれぞれ反転しています DeltaTime 前回の計測からの経過時間（秒） public readonly float DeltaTime Field Value float Null public static readonly GcAccelerationEvent Null Field Value GcAccelerationEvent RawAcceleration 加速度計の実際の値 public readonly float3 RawAcceleration Field Value float3 Time 計測時刻（秒） public readonly float Time Field Value float Methods Equals(GcAccelerationEvent) public bool Equals(GcAccelerationEvent other) Parameters other GcAccelerationEvent Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcAccelerationEvent, GcAccelerationEvent) public static bool operator ==(GcAccelerationEvent lh, GcAccelerationEvent rh) Parameters lh GcAccelerationEvent rh GcAccelerationEvent Returns bool operator !=(GcAccelerationEvent, GcAccelerationEvent) public static bool operator !=(GcAccelerationEvent lh, GcAccelerationEvent rh) Parameters lh GcAccelerationEvent rh GcAccelerationEvent Returns bool"
  },
  "api/GameCanvas.GcActor.html": {
    "href": "api/GameCanvas.GcActor.html",
    "title": "Class GcActor | GameCanvas",
    "keywords": "Class GcActor Namespace GameCanvas Assembly GameCanvas.dll アクター基底 public abstract class GcActor : IActor, IComparable<GcActor> Inheritance object GcActor Implements IActor IComparable<GcActor> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Priority アクターの処理優先度 public virtual int Priority { get; set; } Property Value int Remarks 初期値は0（無指定） アクターは、シーン内でこの値が小さい順に処理が回ってきます 同じ値だった場合は、シーンに登録した順序で実行されます 負の値を設定した場合は、そのシーンの処理よりも前に実行されます gc protected static GcProxy gc { get; } Property Value GcProxy Methods AfterDraw() アクターの描画後処理 public virtual void AfterDraw() Remarks 毎フレーム（描画より後に）GameCanvasにより自動的に呼び出されます CompareTo(GcActor) public int CompareTo(GcActor other) Parameters other GcActor Returns int Draw() アクターの描画処理 public virtual void Draw() Remarks 毎フレーム（計算より後に）GameCanvasにより自動的に呼び出されます Update() アクターの計算処理 public virtual void Update() Remarks 毎フレーム（描画より前に）GameCanvasにより自動的に呼び出されます"
  },
  "api/GameCanvas.GcAffine.html": {
    "href": "api/GameCanvas.GcAffine.html",
    "title": "Class GcAffine | GameCanvas",
    "keywords": "Class GcAffine Namespace GameCanvas Assembly GameCanvas.dll 2次元アフィン変換 public static class GcAffine Inheritance object GcAffine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Identity 単位行列（なにも移動・回転・拡縮を行わない場合の変換行列） public static readonly float2x3 Identity Field Value float2x3 Methods CalcRotate(in float2x3) 変換行列から回転成分を取り出します public static float CalcRotate(this in float2x3 mtx) Parameters mtx float2x3 変換行列 Returns float 回転量（弧度法） CalcScale(in float2x3) 変換行列から拡縮成分を取り出します public static float2 CalcScale(this in float2x3 mtx) Parameters mtx float2x3 変換行列 Returns float2 拡縮率 CalcTRS(in float2x3, out float2, out float, out float2) 変換行列から移動・回転・拡縮成分を取り出します public static void CalcTRS(this in float2x3 mtx, out float2 translate, out float rotate, out float2 scale) Parameters mtx float2x3 変換行列 translate float2 移動量 rotate float 回転量（弧度法） scale float2 拡縮率 FromRotate(in float) 回転成分から変換行列を作ります public static float2x3 FromRotate(in float radian) Parameters radian float 回転量（弧度法） Returns float2x3 変換行列 FromRotate(in float2, in float) ahchorを中心とした回転成分から変換行列を作ります public static float2x3 FromRotate(in float2 ahchor, in float radian) Parameters ahchor float2 回転中心 radian float 回転量（弧度法） Returns float2x3 変換行列 FromScale(in float) 拡縮成分から変換行列を作ります public static float2x3 FromScale(in float scale) Parameters scale float 拡縮率 Returns float2x3 変換行列 FromScale(in float2) 拡縮成分から変換行列を作ります public static float2x3 FromScale(in float2 scale) Parameters scale float2 拡縮率 Returns float2x3 変換行列 FromShear(in float2) せん断成分から変換行列を作ります public static float2x3 FromShear(in float2 shear) Parameters shear float2 せん断係数 Returns float2x3 変換行列 FromTRS(in float2, in float, in float2) 移動・回転・拡縮成分から変換行列を作ります public static float2x3 FromTRS(in float2 translate, in float rotate, in float2 scale) Parameters translate float2 移動量 rotate float 回転量（弧度法） scale float2 拡縮率 Returns float2x3 変換行列 FromTS(in float2, in float2) 移動・拡縮成分から変換行列を作ります public static float2x3 FromTS(in float2 translate, in float2 scale) Parameters translate float2 移動量 scale float2 拡縮率 Returns float2x3 変換行列 FromTranslate(in float2) 移動成分から変換行列を作ります public static float2x3 FromTranslate(in float2 translate) Parameters translate float2 移動量 Returns float2x3 変換行列 GetShear(in float2x3) 変換行列からせん断成分を取り出します public static float2 GetShear(this in float2x3 mtx) Parameters mtx float2x3 変換行列 Returns float2 せん断係数 GetTranslate(in float2x3) 変換行列から移動成分を取り出します public static float2 GetTranslate(this in float2x3 mtx) Parameters mtx float2x3 変換行列 Returns float2 移動量 Mul(in float2x3, in float2) 行列とベクトルの積を求めます public static float2 Mul(this in float2x3 mtx, in float2 vec) Parameters mtx float2x3 変換前の行列 vec float2 ベクトル Returns float2 行列とベクトルの積 Mul(in float2x3, in float2x3) 行列同士の積を求めます public static float2x3 Mul(this in float2x3 lhs, in float2x3 rhs) Parameters lhs float2x3 左辺 rhs float2x3 右辺 Returns float2x3 行列同士の積 Rotate(in float2, in float) ベクトルを回転させます public static float2 Rotate(this in float2 vec, in float radian) Parameters vec float2 回転前のベクトル radian float 回転量（弧度法） Returns float2 回転後のベクトル ToFloat4x4(in float2x3) 2次元変換行列を3次元変換行列に変換します public static float4x4 ToFloat4x4(this in float2x3 mtx) Parameters mtx float2x3 2次元変換行列 Returns float4x4 3次元変換行列"
  },
  "api/GameCanvas.GcAnchor.html": {
    "href": "api/GameCanvas.GcAnchor.html",
    "title": "Enum GcAnchor | GameCanvas",
    "keywords": "Enum GcAnchor Namespace GameCanvas Assembly GameCanvas.dll アンカー位置 public enum GcAnchor Fields LowerCenter = 7 中央下 LowerLeft = 6 左下 LowerRight = 8 右下 MiddleCenter = 4 中央 MiddleLeft = 3 右 MiddleRight = 5 左 UpperCenter = 1 中央上 UpperLeft = 0 左上（既定値） UpperRight = 2 右上"
  },
  "api/GameCanvas.GcAssert.AssertionException.html": {
    "href": "api/GameCanvas.GcAssert.AssertionException.html",
    "title": "Class GcAssert.AssertionException | GameCanvas",
    "keywords": "Class GcAssert.AssertionException Namespace GameCanvas Assembly GameCanvas.dll public sealed class GcAssert.AssertionException : Exception, ISerializable Inheritance object Exception GcAssert.AssertionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors AssertionException(string) public AssertionException(string message) Parameters message string"
  },
  "api/GameCanvas.GcAssert.html": {
    "href": "api/GameCanvas.GcAssert.html",
    "title": "Class GcAssert | GameCanvas",
    "keywords": "Class GcAssert Namespace GameCanvas Assembly GameCanvas.dll public static class GcAssert Inheritance object GcAssert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsThrowException public static bool IsThrowException { get; set; } Property Value bool Methods IsNotNull<T>(T?) public static void IsNotNull<T>(T? obj) where T : class Parameters obj T Type Parameters T IsNull<T>(T?) public static void IsNull<T>(T? obj) where T : class Parameters obj T Type Parameters T"
  },
  "api/GameCanvas.GcAvailability.html": {
    "href": "api/GameCanvas.GcAvailability.html",
    "title": "Enum GcAvailability | GameCanvas",
    "keywords": "Enum GcAvailability Namespace GameCanvas Assembly GameCanvas.dll 可用性（ダウンロード状態） public enum GcAvailability Fields NotAvailable = 1 利用不可 NotReady = 2 準備中 Null = 0 未初期化 Ready = 3 いつでも利用可能"
  },
  "api/GameCanvas.GcCameraDevice.html": {
    "href": "api/GameCanvas.GcCameraDevice.html",
    "title": "Class GcCameraDevice | GameCanvas",
    "keywords": "Class GcCameraDevice Namespace GameCanvas Assembly GameCanvas.dll カメラ（外部入力映像）デバイス public sealed class GcCameraDevice Inheritance object GcCameraDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Fields CanFocusPoint 任意座標指定オートフォーカスに対応しているかどうか public readonly bool CanFocusPoint Field Value bool DeviceName デバイス名 public readonly string DeviceName Field Value string IsDepth 深度カメラかどうか public readonly bool IsDepth Field Value bool IsFront 前面（自撮り）カメラかどうか public readonly bool IsFront Field Value bool Resolutions 解像度とリフレッシュレートの候補 public readonly GcResolution[] Resolutions Field Value GcResolution[] Remarks iOS, Android の実機以外では常に無効（配列長が0）です Methods ToString() public override string ToString() Returns string"
  },
  "api/GameCanvas.GcCircle.html": {
    "href": "api/GameCanvas.GcCircle.html",
    "title": "Struct GcCircle | GameCanvas",
    "keywords": "Struct GcCircle Namespace GameCanvas Assembly GameCanvas.dll 円 public struct GcCircle : IPrimitive<GcCircle>, IEquatable<GcCircle> Implements IPrimitive<GcCircle> IEquatable<GcCircle> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods GcCollisionExtensions.Contains(in GcCircle, in float2) GcCollisionExtensions.Overlaps(in GcCircle, in GcCircle) Constructors GcCircle(in float, in float, in float) コンストラクタ public GcCircle(in float x, in float y, in float radius) Parameters x float 中心座標X y float 中心座標Y radius float 半径 GcCircle(in float2, in float) コンストラクタ public GcCircle(in float2 position, in float radius) Parameters position float2 位置（中心） radius float 半径 Fields Position 位置（中心） public float2 Position Field Value float2 Radius 半径 public float Radius Field Value float Methods Equals(GcCircle) public readonly bool Equals(GcCircle other) Parameters other GcCircle Returns bool Equals(object) public override readonly bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int ToString() public override readonly string ToString() Returns string Operators operator ==(GcCircle, GcCircle) public static bool operator ==(GcCircle lh, GcCircle rh) Parameters lh GcCircle rh GcCircle Returns bool operator !=(GcCircle, GcCircle) public static bool operator !=(GcCircle lh, GcCircle rh) Parameters lh GcCircle rh GcCircle Returns bool"
  },
  "api/GameCanvas.GcCollisionExtensions.html": {
    "href": "api/GameCanvas.GcCollisionExtensions.html",
    "title": "Class GcCollisionExtensions | GameCanvas",
    "keywords": "Class GcCollisionExtensions Namespace GameCanvas Assembly GameCanvas.dll public static class GcCollisionExtensions Inheritance object GcCollisionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CalcDistance(in GcLine, in float2) 線と点との距離を求めます public static float CalcDistance(this in GcLine self, in float2 point) Parameters self GcLine 線 point float2 点 Returns float 線と点との距離 Contains(in GcAABB, in float2) 点が矩形と重なっているかどうかを調べます public static bool Contains(this in GcAABB self, in float2 point) Parameters self GcAABB 矩形 point float2 点 Returns bool 重なっているかどうか Contains(in GcCircle, in float2) 点が円と重なっているかどうかを調べます public static bool Contains(this in GcCircle self, in float2 point) Parameters self GcCircle 円 point float2 点 Returns bool 重なっているかどうか Contains(in GcLine, in float2) 点が線上に存在するかどうかを調べます public static bool Contains(this in GcLine self, in float2 point) Parameters self GcLine 線 point float2 点 Returns bool 存在するかどうか HitTest(in GcAABB, GcAABB, out GcHitResult) 矩形同士の衝突判定を行い、詳細な衝突点情報を計算します public static bool HitTest(this in GcAABB self, GcAABB other, out GcHitResult hit) Parameters self GcAABB 矩形1 other GcAABB 矩形2 hit GcHitResult 衝突点情報 Returns bool 衝突しているかどうか HitTest(in GcAABB, in float2, out GcHitResult) 点と矩形の衝突判定を行い、詳細な衝突点情報を計算します public static bool HitTest(this in GcAABB self, in float2 point, out GcHitResult hit) Parameters self GcAABB 矩形 point float2 点 hit GcHitResult 衝突点情報 Returns bool 衝突しているかどうか Intersects(in GcLine, in GcLine) 線同士が交差しているかどうかを調べます public static bool Intersects(this in GcLine self, in GcLine other) Parameters self GcLine 線1 other GcLine 線2 Returns bool 交差しているかどうか Intersects(in GcLine, in GcLine, out float2) 線同士が交差しているかどうかを調べます public static bool Intersects(this in GcLine self, in GcLine other, out float2 intersection) Parameters self GcLine 線1 other GcLine 線2 intersection float2 交差座標 Returns bool 交差しているかどうか Overlaps(in GcAABB, in GcAABB) 矩形同士が重なっているかどうかを調べます public static bool Overlaps(this in GcAABB self, in GcAABB other) Parameters self GcAABB 矩形1 other GcAABB 矩形2 Returns bool 重なっているかどうか Overlaps(in GcCircle, in GcCircle) 円同士が重なっているかどうかを調べます public static bool Overlaps(this in GcCircle self, in GcCircle other) Parameters self GcCircle 円1 other GcCircle 円2 Returns bool 重なっているかどうか SweepTest(in GcAABB, in GcAABB, in float2, out GcSweepResult) 移動量を考慮した 矩形同士の衝突判定を行います public static bool SweepTest(this in GcAABB @static, in GcAABB dynamic, in float2 delta, out GcSweepResult sweep) Parameters static GcAABB 静止している矩形 dynamic GcAABB 移動する矩形 delta float2 矩形の移動量 sweep GcSweepResult 衝突情報 Returns bool 衝突するかどうか SweepTest(in GcAABB, in float2, in float2, out GcSweepResult) 移動量を考慮した 矩形と点の衝突判定を行います public static bool SweepTest(this in GcAABB @static, in float2 dynamic, in float2 delta, out GcSweepResult sweep) Parameters static GcAABB 静止している矩形 dynamic float2 移動する点 delta float2 点の移動量 sweep GcSweepResult 衝突情報 Returns bool 衝突するかどうか"
  },
  "api/GameCanvas.GcFont.html": {
    "href": "api/GameCanvas.GcFont.html",
    "title": "Struct GcFont | GameCanvas",
    "keywords": "Struct GcFont Namespace GameCanvas Assembly GameCanvas.dll public readonly struct GcFont : IEquatable<GcFont> Implements IEquatable<GcFont> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Invalid public bool Invalid { get; } Property Value bool Methods Equals(GcFont) public bool Equals(GcFont other) Parameters other GcFont Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcFont, GcFont) public static bool operator ==(GcFont lhs, GcFont rhs) Parameters lhs GcFont rhs GcFont Returns bool operator !=(GcFont, GcFont) public static bool operator !=(GcFont lhs, GcFont rhs) Parameters lhs GcFont rhs GcFont Returns bool"
  },
  "api/GameCanvas.GcGeolocationEvent.html": {
    "href": "api/GameCanvas.GcGeolocationEvent.html",
    "title": "Struct GcGeolocationEvent | GameCanvas",
    "keywords": "Struct GcGeolocationEvent Namespace GameCanvas Assembly GameCanvas.dll GNSSによる測位データ public readonly struct GcGeolocationEvent : IEquatable<GcGeolocationEvent> Implements IEquatable<GcGeolocationEvent> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AccuracyHorizontal 水平精度（メートル単位） public readonly float AccuracyHorizontal Field Value float AccuracyVertical 垂直精度（メートル単位） public readonly float AccuracyVertical Field Value float Altitude 高度 public readonly float Altitude Field Value float Latitude 経度 public readonly float Latitude Field Value float Longitude 緯度 public readonly float Longitude Field Value float Null public static readonly GcGeolocationEvent Null Field Value GcGeolocationEvent Time 計測時刻 public readonly DateTimeOffset Time Field Value DateTimeOffset Methods Equals(GcGeolocationEvent) public bool Equals(GcGeolocationEvent other) Parameters other GcGeolocationEvent Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcGeolocationEvent, GcGeolocationEvent) public static bool operator ==(GcGeolocationEvent lh, GcGeolocationEvent rh) Parameters lh GcGeolocationEvent rh GcGeolocationEvent Returns bool operator !=(GcGeolocationEvent, GcGeolocationEvent) public static bool operator !=(GcGeolocationEvent lh, GcGeolocationEvent rh) Parameters lh GcGeolocationEvent rh GcGeolocationEvent Returns bool"
  },
  "api/GameCanvas.GcHitResult.html": {
    "href": "api/GameCanvas.GcHitResult.html",
    "title": "Struct GcHitResult | GameCanvas",
    "keywords": "Struct GcHitResult Namespace GameCanvas Assembly GameCanvas.dll 衝突点情報 public readonly struct GcHitResult : IEquatable<GcHitResult> Implements IEquatable<GcHitResult> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields HitNormal 衝突点の法線 public readonly float2 HitNormal Field Value float2 HitPoint 衝突点 public readonly float2 HitPoint Field Value float2 SinkVecInv めり込み量の逆ベクトル public readonly float2 SinkVecInv Field Value float2 Methods Equals(GcHitResult) public bool Equals(GcHitResult other) Parameters other GcHitResult Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcHitResult, GcHitResult) public static bool operator ==(GcHitResult lh, GcHitResult rh) Parameters lh GcHitResult rh GcHitResult Returns bool operator !=(GcHitResult, GcHitResult) public static bool operator !=(GcHitResult lh, GcHitResult rh) Parameters lh GcHitResult rh GcHitResult Returns bool"
  },
  "api/GameCanvas.GcImage.html": {
    "href": "api/GameCanvas.GcImage.html",
    "title": "Struct GcImage | GameCanvas",
    "keywords": "Struct GcImage Namespace GameCanvas Assembly GameCanvas.dll public readonly struct GcImage : IEquatable<GcImage> Implements IEquatable<GcImage> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Invalid public bool Invalid { get; } Property Value bool Methods Equals(GcImage) public bool Equals(GcImage other) Parameters other GcImage Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcImage, GcImage) public static bool operator ==(GcImage lhs, GcImage rhs) Parameters lhs GcImage rhs GcImage Returns bool operator !=(GcImage, GcImage) public static bool operator !=(GcImage lhs, GcImage rhs) Parameters lhs GcImage rhs GcImage Returns bool"
  },
  "api/GameCanvas.GcKeyEvent.html": {
    "href": "api/GameCanvas.GcKeyEvent.html",
    "title": "Struct GcKeyEvent | GameCanvas",
    "keywords": "Struct GcKeyEvent Namespace GameCanvas Assembly GameCanvas.dll キーイベント public readonly struct GcKeyEvent : IEquatable<GcKeyEvent>, IComparable<GcKeyEvent> Implements IEquatable<GcKeyEvent> IComparable<GcKeyEvent> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Frame フレーム番号 public readonly int Frame Field Value int Key キーコード public readonly Key Key Field Value Key Null public static readonly GcKeyEvent Null Field Value GcKeyEvent Phase 段階 public readonly GcKeyEventPhase Phase Field Value GcKeyEventPhase Time 時間（起動からの経過秒数） public readonly float Time Field Value float Methods CompareTo(GcKeyEvent) public int CompareTo(GcKeyEvent other) Parameters other GcKeyEvent Returns int Equals(GcKeyEvent) public bool Equals(GcKeyEvent other) Parameters other GcKeyEvent Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcKeyEvent, GcKeyEvent) public static bool operator ==(GcKeyEvent lh, GcKeyEvent rh) Parameters lh GcKeyEvent rh GcKeyEvent Returns bool operator !=(GcKeyEvent, GcKeyEvent) public static bool operator !=(GcKeyEvent lh, GcKeyEvent rh) Parameters lh GcKeyEvent rh GcKeyEvent Returns bool"
  },
  "api/GameCanvas.GcKeyEventPhase.html": {
    "href": "api/GameCanvas.GcKeyEventPhase.html",
    "title": "Enum GcKeyEventPhase | GameCanvas",
    "keywords": "Enum GcKeyEventPhase Namespace GameCanvas Assembly GameCanvas.dll GcKeyEvent 段階 public enum GcKeyEventPhase : byte Fields Down = 0 キーを押した瞬間 Hold = 1 キーを押し続けている（押した瞬間を除く） Up = 2 キーを離した瞬間"
  },
  "api/GameCanvas.GcKeyTrace.html": {
    "href": "api/GameCanvas.GcKeyTrace.html",
    "title": "Struct GcKeyTrace | GameCanvas",
    "keywords": "Struct GcKeyTrace Namespace GameCanvas Assembly GameCanvas.dll キー入力の軌跡 public struct GcKeyTrace : IEquatable<GcKeyTrace> Implements IEquatable<GcKeyTrace> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Begin 開始時の GcKeyEvent public readonly GcKeyEvent Begin Field Value GcKeyEvent Current 最新の GcKeyEvent public GcKeyEvent Current Field Value GcKeyEvent Duration 継続時間（秒） public float Duration Field Value float FrameCount 継続フレーム数 public int FrameCount Field Value int Methods Equals(GcKeyTrace) public readonly bool Equals(GcKeyTrace other) Parameters other GcKeyTrace Returns bool Equals(object) public override readonly bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int Operators operator ==(GcKeyTrace, GcKeyTrace) public static bool operator ==(GcKeyTrace left, GcKeyTrace right) Parameters left GcKeyTrace right GcKeyTrace Returns bool operator !=(GcKeyTrace, GcKeyTrace) public static bool operator !=(GcKeyTrace left, GcKeyTrace right) Parameters left GcKeyTrace right GcKeyTrace Returns bool"
  },
  "api/GameCanvas.GcLine.html": {
    "href": "api/GameCanvas.GcLine.html",
    "title": "Struct GcLine | GameCanvas",
    "keywords": "Struct GcLine Namespace GameCanvas Assembly GameCanvas.dll 直線もしくは線分 public struct GcLine : IPrimitive<GcLine>, IEquatable<GcLine> Implements IPrimitive<GcLine> IEquatable<GcLine> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods GcCollisionExtensions.CalcDistance(in GcLine, in float2) GcCollisionExtensions.Contains(in GcLine, in float2) GcCollisionExtensions.Intersects(in GcLine, in GcLine) GcCollisionExtensions.Intersects(in GcLine, in GcLine, out float2) GcLineExtensions.AABB(in GcLine, in float2x3) GcLineExtensions.Begin(in GcLine) GcLineExtensions.Degree(in GcLine) GcLineExtensions.End(in GcLine) GcLineExtensions.IsSegment(in GcLine) GcLineExtensions.IsZero(in GcLine) GcLineExtensions.Radian(in GcLine) GcLineExtensions.Vector(in GcLine) Constructors GcLine(in float2, in float) コンストラクタ（直線） public GcLine(in float2 origin, in float radian) Parameters origin float2 基準点 radian float 傾き（弧度法） GcLine(in float2, in float, in float) コンストラクタ（線分） public GcLine(in float2 oridin, in float length, in float radian) Parameters oridin float2 基準点 length float 長さ radian float 傾き（弧度法） GcLine(in float2, in float, in float2) コンストラクタ（線分） public GcLine(in float2 oridin, in float length, in float2 direction) Parameters oridin float2 基準点 length float 長さ direction float2 傾きを表す単位ベクトル GcLine(in float2, in float2) コンストラクタ（直線） public GcLine(in float2 origin, in float2 direction) Parameters origin float2 基準点 direction float2 Fields Direction 傾きを表す単位ベクトル public float2 Direction Field Value float2 Length 線分の長さ public float Length Field Value float Origin 基準点 public float2 Origin Field Value float2 Methods Equals(GcLine) public readonly bool Equals(GcLine other) Parameters other GcLine Returns bool Equals(object) public override readonly bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int Segment(in float2, in float2) コンストラクタ（線分） public static GcLine Segment(in float2 p0, in float2 p1) Parameters p0 float2 始点 p1 float2 終点 Returns GcLine ToString() public override readonly string ToString() Returns string Operators operator ==(GcLine, GcLine) public static bool operator ==(GcLine lh, GcLine rh) Parameters lh GcLine rh GcLine Returns bool operator !=(GcLine, GcLine) public static bool operator !=(GcLine lh, GcLine rh) Parameters lh GcLine rh GcLine Returns bool"
  },
  "api/GameCanvas.GcLineCap.html": {
    "href": "api/GameCanvas.GcLineCap.html",
    "title": "Enum GcLineCap | GameCanvas",
    "keywords": "Enum GcLineCap Namespace GameCanvas Assembly GameCanvas.dll 描線の端点の形状 public enum GcLineCap Fields Butt = 0 端点は四角く切られます Square = 1 端点に線幅と同じ幅で高さが半分の四角形が描き加えられます"
  },
  "api/GameCanvas.GcLineExtensions.html": {
    "href": "api/GameCanvas.GcLineExtensions.html",
    "title": "Class GcLineExtensions | GameCanvas",
    "keywords": "Class GcLineExtensions Namespace GameCanvas Assembly GameCanvas.dll GcLine 拡張クラス public static class GcLineExtensions Inheritance object GcLineExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AABB(in GcLine, in float2x3) AABB public static GcAABB AABB(this in GcLine self, in float2x3 matrix) Parameters self GcLine matrix float2x3 Returns GcAABB Begin(in GcLine) 始点（線分の場合） public static float2 Begin(this in GcLine self) Parameters self GcLine Returns float2 Degree(in GcLine) 傾き（度数法） public static float Degree(this in GcLine self) Parameters self GcLine Returns float End(in GcLine) 終点（線分の場合） public static float2 End(this in GcLine self) Parameters self GcLine Returns float2 IsSegment(in GcLine) 線分（長さが有限）かどうか public static bool IsSegment(this in GcLine self) Parameters self GcLine Returns bool IsZero(in GcLine) 長さがないかどうか public static bool IsZero(this in GcLine self) Parameters self GcLine Returns bool Radian(in GcLine) 傾き（弧度法） public static float Radian(this in GcLine self) Parameters self GcLine Returns float Vector(in GcLine) ベクトル（線分の場合） public static float2 Vector(this in GcLine self) Parameters self GcLine Returns float2"
  },
  "api/GameCanvas.GcMath.html": {
    "href": "api/GameCanvas.GcMath.html",
    "title": "Class GcMath | GameCanvas",
    "keywords": "Class GcMath Namespace GameCanvas Assembly GameCanvas.dll public static class GcMath Inheritance object GcMath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields s_Random public static Random s_Random Field Value Random Methods Abs(in int) 絶対値 public static int Abs(in int value) Parameters value int Returns int Abs(in float) 絶対値 public static float Abs(in float value) Parameters value float Returns float AlmostSame(in float, in float) 計算誤差を考慮した同値判定 public static bool AlmostSame(in float a, in float b) Parameters a float b float Returns bool AlmostSame(in float2, in float2) 計算誤差を考慮した同値判定 public static bool AlmostSame(in float2 a, in float2 b) Parameters a float2 b float2 Returns bool AlmostZero(in float) 計算誤差を考慮したゼロ判定 public static bool AlmostZero(in float value) Parameters value float Returns bool Atan2(in float2) ベクトルの角度 public static float Atan2(in float2 v) Parameters v float2 ベクトル Returns float ベクトルの角度（度数法） Clamp(in float, in float, in float) public static float Clamp(in float value, in float min, in float max) Parameters value float min float max float Returns float Cos(in float) コサイン public static float Cos(in float degree) Parameters degree float 角度（度数法） Returns float Cross(in float2, in float2) ベクトルの外積 public static float Cross(in float2 a, in float2 b) Parameters a float2 ベクトルA b float2 ベクトルB Returns float 外積 Dot(in float2, in float2) ベクトルの内積 public static float Dot(in float2 a, in float2 b) Parameters a float2 ベクトルA b float2 ベクトルB Returns float 内積 GetRandomState() 乱数のステートの取得 public static uint GetRandomState() Returns uint Max(in float, in float) public static float Max(in float a, in float b) Parameters a float b float Returns float Min(in float, in float) public static float Min(in float a, in float b) Parameters a float b float Returns float Random() public static float Random() Returns float Random(in int, in int) public static int Random(in int min, in int max) Parameters min int max int Returns int Random(in float, in float) public static float Random(in float min, in float max) Parameters min float max float Returns float Repeat(in float, in float) public static float Repeat(in float value, in float max) Parameters value float max float Returns float RotateVector(in float2, in float) ベクトルの転回 public static float2 RotateVector(in float2 v, in float degree) Parameters v float2 回転前のベクトル degree float 回転量（度数法） Returns float2 回転後のベクトル Round(in double) 四捨五入 public static int Round(in double value) Parameters value double Returns int SetRandomSeed(in uint) 乱数の種の設定 public static void SetRandomSeed(in uint seed) Parameters seed uint SetRandomSeedByIndex(in uint) 乱数の種を連番から設定 public static void SetRandomSeedByIndex(in uint index) Parameters index uint Sin(in float) サイン public static float Sin(in float degree) Parameters degree float 角度（度数法） Returns float Sqrt(in float) 平方根 public static float Sqrt(in float value) Parameters value float Returns float"
  },
  "api/GameCanvas.GcPointerEvent.html": {
    "href": "api/GameCanvas.GcPointerEvent.html",
    "title": "Struct GcPointerEvent | GameCanvas",
    "keywords": "Struct GcPointerEvent Namespace GameCanvas Assembly GameCanvas.dll ポインターイベント public readonly struct GcPointerEvent : IEquatable<GcPointerEvent>, IComparable<GcPointerEvent> Implements IEquatable<GcPointerEvent> IComparable<GcPointerEvent> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Frame フレーム番号 public readonly int Frame Field Value int Id 識別子 public readonly int Id Field Value int Null public static readonly GcPointerEvent Null Field Value GcPointerEvent Phase 段階 public readonly GcPointerEventPhase Phase Field Value GcPointerEventPhase Point 位置（キャンバス座標） public readonly float2 Point Field Value float2 PointScreen 位置（端末スクリーン座標） public readonly float2 PointScreen Field Value float2 Time 時間（起動からの経過秒数） public readonly float Time Field Value float Methods CompareTo(GcPointerEvent) public int CompareTo(GcPointerEvent other) Parameters other GcPointerEvent Returns int Equals(GcPointerEvent) public bool Equals(GcPointerEvent other) Parameters other GcPointerEvent Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcPointerEvent, GcPointerEvent) public static bool operator ==(GcPointerEvent lh, GcPointerEvent rh) Parameters lh GcPointerEvent rh GcPointerEvent Returns bool operator !=(GcPointerEvent, GcPointerEvent) public static bool operator !=(GcPointerEvent lh, GcPointerEvent rh) Parameters lh GcPointerEvent rh GcPointerEvent Returns bool"
  },
  "api/GameCanvas.GcPointerEventPhase.html": {
    "href": "api/GameCanvas.GcPointerEventPhase.html",
    "title": "Enum GcPointerEventPhase | GameCanvas",
    "keywords": "Enum GcPointerEventPhase Namespace GameCanvas Assembly GameCanvas.dll GcPointerEvent 段階 public enum GcPointerEventPhase : byte Fields Begin = 1 タッチした瞬間 End = 3 離した瞬間 Hold = 2 タッチし続けている（タッチした瞬間を除く） Invalid = 0 不正な値"
  },
  "api/GameCanvas.GcPointerTrace.html": {
    "href": "api/GameCanvas.GcPointerTrace.html",
    "title": "Struct GcPointerTrace | GameCanvas",
    "keywords": "Struct GcPointerTrace Namespace GameCanvas Assembly GameCanvas.dll ポインターの軌跡 public struct GcPointerTrace : IEquatable<GcPointerTrace> Implements IEquatable<GcPointerTrace> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Begin 開始時の GcPointerEvent public GcPointerEvent Begin Field Value GcPointerEvent Current 最新の GcPointerEvent public GcPointerEvent Current Field Value GcPointerEvent Distance 累計移動距離（キャンバス座標系） public float Distance Field Value float Duration 継続時間（秒） public float Duration Field Value float FrameCount 継続フレーム数 public int FrameCount Field Value int Methods Equals(GcPointerTrace) public readonly bool Equals(GcPointerTrace other) Parameters other GcPointerTrace Returns bool"
  },
  "api/GameCanvas.GcPointerType.html": {
    "href": "api/GameCanvas.GcPointerType.html",
    "title": "Enum GcPointerType | GameCanvas",
    "keywords": "Enum GcPointerType Namespace GameCanvas Assembly GameCanvas.dll ポインター種別 public enum GcPointerType : byte Fields Others = 3 マウス、その他 Stylus = 2 スタイラス Touch = 1 タッチ Unknown = 0 不明"
  },
  "api/GameCanvas.GcProxy.html": {
    "href": "api/GameCanvas.GcProxy.html",
    "title": "Class GcProxy | GameCanvas",
    "keywords": "Class GcProxy Namespace GameCanvas Assembly GameCanvas.dll ユーザー定義クラスからGameCanvasの機能を呼び出すためのクラス GameCanvas API gc.*** で呼べる関数の一覧です プロパティ メソッド public sealed class GcProxy : IGameCanvas, IGraphicsEx, IGraphics, ISoundEx, ISound, INetworkEx, INetwork, ISceneManagementEx, ISceneManagement, ITimeEx, ITime, IPhysicsEx, IPhysics, IStorageEx, IStorage, IMathEx, IMath, IInputPointerEx, IInputPointer, IInputKeyEx, IInputKey, IInputAccelerationEx, IInputAcceleration, IInputGeolocationEx, IInputGeolocation, IInputCameraEx, IInputCamera Inheritance object GcProxy Implements IGameCanvas IGraphicsEx IGraphics ISoundEx ISound INetworkEx INetwork ISceneManagementEx ISceneManagement ITimeEx ITime IPhysicsEx IPhysics IStorageEx IStorage IMathEx IMath IInputPointerEx IInputPointer IInputKeyEx IInputKey IInputAccelerationEx IInputAcceleration IInputGeolocationEx IInputGeolocation IInputCameraEx IInputCamera Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties AccelerationEventCount 前回のフレーム処理以降に検出した 加速度イベントの数 public int AccelerationEventCount { get; } Property Value int AccelerationEvents 前回のフレーム処理以降に検出した 加速度イベントの列挙子 public ReadOnlySpan<GcAccelerationEvent> AccelerationEvents { get; } Property Value ReadOnlySpan<GcAccelerationEvent> AccelerometerSamplingRate 加速度計の動作周波数 public float AccelerometerSamplingRate { get; set; } Property Value float BackgroundColor 背景色 public Color BackgroundColor { get; set; } Property Value Color BorderColor キャンバス外に表示される帯の色 public Color BorderColor { get; } Property Value Color Remarks ChangeBorderColor(in Color) を呼び出すことで変更できます CameraDeviceCount 認識可能なカメラ（外部入力映像）の数 public int CameraDeviceCount { get; } Property Value int CameraDevices 全ての認識可能なカメラ（外部入力映像）の一覧 public ReadOnlySpan<GcCameraDevice> CameraDevices { get; } Property Value ReadOnlySpan<GcCameraDevice> CanvasAABB キャンバスのAABB public GcAABB CanvasAABB { get; } Property Value GcAABB CanvasCenter キャンバスの中心座標 public float2 CanvasCenter { get; } Property Value float2 CanvasHeight キャンバスの縦幅 public int CanvasHeight { get; } Property Value int CanvasResolution キャンバスの解像度とリフレッシュレート public GcResolution CanvasResolution { get; } Property Value GcResolution CanvasSize キャンバス解像度 public int2 CanvasSize { get; } Property Value int2 Remarks ChangeCanvasSize(in int2) を呼び出すことで変更できます CanvasWidth キャンバスの横幅 public int CanvasWidth { get; } Property Value int CircleResolution 円の解像度 public int CircleResolution { get; set; } Property Value int Color 描画色 public Color Color { get; set; } Property Value Color ColorAqua 水色 public Color ColorAqua { get; } Property Value Color ColorBlack 黒色 public Color ColorBlack { get; } Property Value Color ColorBlue 青色 public Color ColorBlue { get; } Property Value Color ColorCyan シアン public Color ColorCyan { get; } Property Value Color ColorGray 灰色 public Color ColorGray { get; } Property Value Color ColorGreen 緑色 public Color ColorGreen { get; } Property Value Color ColorPurple 紫色 public Color ColorPurple { get; } Property Value Color ColorRed 赤色 public Color ColorRed { get; } Property Value Color ColorWhite 白色 public Color ColorWhite { get; } Property Value Color ColorYellow 黄色 public Color ColorYellow { get; } Property Value Color CoordinateScope PushCoordinate() と PopCoordinate() が自動的に呼び出されるスコープ public CoordianteScope CoordinateScope { get; } Property Value CoordianteScope CornerRadius 角丸の半径 public float CornerRadius { get; set; } Property Value float CurrentCoordinate 現在の座標系（変換行列） public float2x3 CurrentCoordinate { get; set; } Property Value float2x3 CurrentFrame アプリ起動からの累計フレーム数 public int CurrentFrame { get; } Property Value int CurrentStyle 現在のスタイル public GcStyle CurrentStyle { get; set; } Property Value GcStyle CurrentTime 現在フレームの日時 public DateTimeOffset CurrentTime { get; } Property Value DateTimeOffset CurrentTimeDay 現在フレームの日付（1～31） public int CurrentTimeDay { get; } Property Value int CurrentTimeDayOfWeek 現在フレームの曜日（0～6） public DayOfWeek CurrentTimeDayOfWeek { get; } Property Value DayOfWeek CurrentTimeHour 現在フレームの時刻の時間部分（0～23） public int CurrentTimeHour { get; } Property Value int CurrentTimeMillisecond 現在フレームの時刻のミリ秒部分（0～999） public int CurrentTimeMillisecond { get; } Property Value int CurrentTimeMinute 現在フレームの時刻の分部分（0～59） public int CurrentTimeMinute { get; } Property Value int CurrentTimeMonth 現在フレームの日付の月部分（1～12） public int CurrentTimeMonth { get; } Property Value int CurrentTimeSecond 現在フレームの時刻の秒部分（0～59） public int CurrentTimeSecond { get; } Property Value int CurrentTimeYear 現在フレームの日付の西暦部分 public int CurrentTimeYear { get; } Property Value int CurrentTimestamp 現在フレームのUnixタイムスタンプ public long CurrentTimestamp { get; } Property Value long DeviceScreenHeight 端末スクリーンの縦幅 public int DeviceScreenHeight { get; } Property Value int DeviceScreenSize 端末スクリーン解像度 public int2 DeviceScreenSize { get; } Property Value int2 DeviceScreenWidth 端末スクリーンの横幅 public int DeviceScreenWidth { get; } Property Value int DidUpdateAccelerationThisFrame 前回のフレーム処理以降に 加速度イベントの更新があったかどうか public bool DidUpdateAccelerationThisFrame { get; } Property Value bool DidUpdateGeolocationThisFrame 前回のフレーム処理以降に 位置情報イベントの更新があったかどうか public bool DidUpdateGeolocationThisFrame { get; } Property Value bool Font フォント種別 public GcFont Font { get; set; } Property Value GcFont FontSize フォントサイズ public int FontSize { get; set; } Property Value int HasUserAuthorizedPermissionCamera カメラデバイスへのアクセス権限を取得済みかどうか public bool HasUserAuthorizedPermissionCamera { get; } Property Value bool HasUserAuthorizedPermissionGeolocation 位置情報へのアクセス権限を取得済みかどうか public bool HasUserAuthorizedPermissionGeolocation { get; } Property Value bool IsAccelerometerEnabled 加速度計が現在有効かどうか public bool IsAccelerometerEnabled { get; set; } Property Value bool IsAccelerometerSupported 端末が加速度計を搭載しているかどうか public bool IsAccelerometerSupported { get; } Property Value bool IsAnyKey なんらかのキーイベントがあるかどうか public bool IsAnyKey { get; } Property Value bool IsAnyKeyDown いずれかのキーが押されたかどうか public bool IsAnyKeyDown { get; } Property Value bool IsAnyKeyHold いずれかのキーが押されているかどうか（押された瞬間を除く） public bool IsAnyKeyHold { get; } Property Value bool IsAnyKeyPress いずれかのキーが押されているかどうか（押された瞬間を含む） public bool IsAnyKeyPress { get; } Property Value bool IsAnyKeyUp いずれかのキーが離されたかどうか public bool IsAnyKeyUp { get; } Property Value bool IsGeolocationRunning 位置情報サービスが起動しているかどうか（起動中を含む） public bool IsGeolocationRunning { get; } Property Value bool IsScreenKeyboardSupported スクリーンキーボードがサポートされているかどうか public bool IsScreenKeyboardSupported { get; } Property Value bool IsScreenKeyboardVisible スクリーンキーボードが表示されているかどうか public bool IsScreenKeyboardVisible { get; } Property Value bool IsTouchPressureSupported 実行端末でタッチ圧力がサポートされているかどうか public bool IsTouchPressureSupported { get; } Property Value bool IsTouchSupported 実行端末でタッチ操作がサポートされているかどうか public bool IsTouchSupported { get; } Property Value bool Remarks Windowsエディタ環境では、タッチ対応デバイスであっても常に偽を返します KeyDownCount 前回のフレーム処理以降に 押されたキーの数 public int KeyDownCount { get; } Property Value int KeyEscape 戻るボタン（Androidのみ） public Key KeyEscape { get; } Property Value Key KeyHoldCount 前回のフレームに引き続き 押されているキーの数（押された瞬間を除く） public int KeyHoldCount { get; } Property Value int KeyPressCount 前回のフレームに引き続き 押されているキーの数（押された瞬間を含む） public int KeyPressCount { get; } Property Value int KeyUpCount 前回のフレーム処理以降に 離されたキーの数 public int KeyUpCount { get; } Property Value int LastAccelerationEvent 最後に検出した加速度イベント public GcAccelerationEvent LastAccelerationEvent { get; } Property Value GcAccelerationEvent LastGeolocationEvent 最後に取得した位置情報イベント public GcGeolocationEvent LastGeolocationEvent { get; } Property Value GcGeolocationEvent LastPointerEvent 最後に検出したポインターイベント。過去のフレームも含める public GcPointerEvent LastPointerEvent { get; } Property Value GcPointerEvent LastPointerFrame 最後に検出したポインターイベントの 検出フレーム番号 public int LastPointerFrame { get; } Property Value int LastPointerPoint 最後に検出したポインターイベントの位置 public float2 LastPointerPoint { get; } Property Value float2 LastPointerTime 最後に検出したポインターイベントの 検出時間（起動からの経過秒数） public float LastPointerTime { get; } Property Value float LastPointerX 最後に検出したポインターイベントの X座標 public float LastPointerX { get; } Property Value float LastPointerY 最後に検出したポインターイベントの Y座標 public float LastPointerY { get; } Property Value float LineCap 描線の端点の形状 public GcLineCap LineCap { get; set; } Property Value GcLineCap LineWidth 描線の太さ public float LineWidth { get; set; } Property Value float NowTime 現在（関数呼び出し時点）の日時 public DateTimeOffset NowTime { get; } Property Value DateTimeOffset PointerBeginCount 前回のフレーム処理以降に検出した ポインター開始イベントの数 public int PointerBeginCount { get; } Property Value int PointerCount 前回のフレーム処理以降に検出した ポインターイベントの数 public int PointerCount { get; } Property Value int PointerEndCount 前回のフレーム処理以降に検出した ポインター終了イベントの数 public int PointerEndCount { get; } Property Value int PointerTapCount 前回のフレーム処理以降に検出した タップポイントの数 public int PointerTapCount { get; } Property Value int RectAnchor 矩形のアンカー位置 public GcAnchor RectAnchor { get; set; } Property Value GcAnchor StringAnchor 文字列のアンカー位置 public GcAnchor StringAnchor { get; set; } Property Value GcAnchor StyleScope PushStyle() と PopStyle() が自動的に呼び出されるスコープ public StyleScope StyleScope { get; } Property Value StyleScope TapSettings タップ感度の設定 public GcTapSettings TapSettings { get; set; } Property Value GcTapSettings TargetFrameInterval フレーム更新間隔の目標値（秒） public double TargetFrameInterval { get; } Property Value double TargetFrameRate フレームレート（1秒あたりのフレーム数）の目標値 public int TargetFrameRate { get; } Property Value int TimeSincePrevFrame ひとつ前のフレームからの経過時間（秒） public float TimeSincePrevFrame { get; } Property Value float TimeSinceStartup 現在フレームのアプリ起動からの経過時間（秒） public float TimeSinceStartup { get; } Property Value float VSyncEnabled 垂直同期の有無 public bool VSyncEnabled { get; } Property Value bool Remarks この設定は、SetFrameInterval(in double, bool) や SetFrameRate(in int, bool) の第二引数から変更できます。 Methods Abs(in int) 絶対値を計算します public int Abs(in int value) Parameters value int 入力値 Returns int 絶対値 Abs(in float) 絶対値を計算します public float Abs(in float value) Parameters value float 入力値 Returns float 絶対値 AddActor(in GcActor) 指定したアクターをシーンに登録します public void AddActor(in GcActor actor) Parameters actor GcActor 登録するアクター AlmostSame(in float, in float) 計算誤差を考慮して同値かどうか判定します public bool AlmostSame(in float a, in float b) Parameters a float b float Returns bool 同値かどうか AlmostZero(in float) 計算誤差を考慮してゼロかどうか判定します public bool AlmostZero(in float value) Parameters value float 入力値 Returns bool ゼロかどうか Atan2(in float, in float) ベクトルとX+軸平面のなす角度を計算します public float Atan2(in float x, in float y) Parameters x float ベクトルのX軸の大きさ y float ベクトルのY軸の大きさ Returns float 角度（度数法） Atan2(in float2) ベクトルとX+軸平面のなす角度を計算します public float Atan2(in float2 v) Parameters v float2 ベクトル Returns float 角度（度数法） CalcStringHeight(in string) 文字列の縦幅を計算します public float CalcStringHeight(in string str) Parameters str string 文字列 Returns float 縦幅 CalcStringSize(in string) 文字列のサイズを計算します public float2 CalcStringSize(in string str) Parameters str string 文字列 Returns float2 サイズ CalcStringWidth(in string) 文字列の横幅を計算します public float CalcStringWidth(in string str) Parameters str string 文字列 Returns float 横幅 CanvasToScreenPoint(in float2, out float2) キャンバス座標を端末スクリーン座標に変換します public void CanvasToScreenPoint(in float2 canvas, out float2 screen) Parameters canvas float2 変換元 キャンバス座標 screen float2 変換後 端末スクリーン座標 CanvasToScreenPoint(in float2, out int2) キャンバス座標を端末スクリーン座標に変換します public void CanvasToScreenPoint(in float2 canvas, out int2 screen) Parameters canvas float2 変換元 キャンバス座標 screen int2 変換後 端末スクリーン座標 ChangeBorderColor(in float, in float, in float) 帯の色を変更します public void ChangeBorderColor(in float r, in float g, in float b) Parameters r float 帯の色の赤成分 g float 帯の色の緑成分 b float 帯の色の青成分 ChangeBorderColor(in Color) キャンバス外の帯の色を変更します public void ChangeBorderColor(in Color color) Parameters color Color 新しい帯の色 Remarks 既存キャンバスの描画内容は全て破棄されます ChangeCanvasSize(in int, in int) キャンバス解像度を指定します public void ChangeCanvasSize(in int width, in int height) Parameters width int 横幅 height int 縦幅 Remarks 初期値は 720x1280 です ディスプレイ解像度と縦横比が異なる場合は、上下もしくは左右に帯がつきます ChangeCanvasSize(in int2) キャンバス解像度を変更します public void ChangeCanvasSize(in int2 size) Parameters size int2 新しいキャンバス解像度 Remarks 初期値は 720x1280 です ディスプレイ解像度と縦横比が異なる場合は、上下もしくは左右に帯がつきます 既存キャンバスの描画内容は全て破棄されます ChangeScene<T>(object?) シーンを切り替えます public void ChangeScene<T>(object? state = null) where T : GcScene Parameters state object シーンの開始処理 (EnterScene(object)) に引数として渡す任意の値 Type Parameters T 開始するシーンの型 Remarks これまで有効だったシーンは、現在のフレームの最後に終了処理が実行されます これから有効になるシーンは、次のフレームの最初に開始処理が実行されます Clamp(in float, in float, in float) 値を丸めます public float Clamp(in float value, in float min, in float max) Parameters value float 入力値 min float 最小値 max float 最大値 Returns float ClearCoordinate() CurrentCoordinate をリセットします public void ClearCoordinate() ClearDownloadCache(in string) 指定されたオンラインリソースのダウンロードキャッシュを削除します public void ClearDownloadCache(in string url) Parameters url string リソースURL ClearDownloadCacheAll() 全てのオンラインリソースのダウンロードキャッシュを削除します public void ClearDownloadCacheAll() ClearScreen() キャンバスを BackgroundColor で塗りつぶします public void ClearScreen() ClearSound() すべてのサウンド再生を停止し、トラック音量を初期値に戻します public void ClearSound() ClearStyle() CurrentStyle をリセットします public void ClearStyle() Cos(in float) コサインを計算します public float Cos(in float degree) Parameters degree float 角度（度数法） Returns float コサイン CreateActor<T>() 指定したアクターを生成し、シーンに登録します public T CreateActor<T>() where T : GcActor, new() Returns T 登録したアクター Type Parameters T 生成・登録するアクターの型 Cross(in float2, in float2) ベクトルの外積を計算します public float Cross(in float2 a, in float2 b) Parameters a float2 b float2 Returns float 外積 CrossTest(in GcLine, in GcLine) GcLine と GcLine の交差判定 public bool CrossTest(in GcLine a, in GcLine b) Parameters a GcLine b GcLine Returns bool CrossTest(in GcLine, in GcLine, out float2) GcLine と GcLine の交差判定 public bool CrossTest(in GcLine a, in GcLine b, out float2 intersection) Parameters a GcLine b GcLine intersection float2 Returns bool DidUpdateCameraImageThisFrame(in GcCameraDevice) 前回のフレーム処理以降に 指定されたカメラ（外部入力映像）テクスチャーに更新があったかどうか public bool DidUpdateCameraImageThisFrame(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool テクスチャーに更新があったかどうか Dot(in float2, in float2) ベクトルの内積を計算します public float Dot(in float2 a, in float2 b) Parameters a float2 b float2 Returns float 内積 DrawCameraImage(in GcCameraDevice, in GcRect, bool) カメラ（外部入力映像）を拡縮して描画します public void DrawCameraImage(in GcCameraDevice camera, in GcRect rect, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） rect GcRect 映像をフィッティングする矩形領域 autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCameraImage(in GcCameraDevice, bool) カメラ（外部入力映像）を描画します public void DrawCameraImage(in GcCameraDevice camera, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCameraImage(in GcCameraDevice, in float, in float, float, bool) カメラ（外部入力映像）を描画します public void DrawCameraImage(in GcCameraDevice camera, in float x, in float y, float degree = 0, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） x float X座標 y float Y座標 degree float 回転（度数法） autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCameraImage(in GcCameraDevice, in float, in float, in float, in float, float, bool) カメラ（外部入力映像）を拡縮して描画します public void DrawCameraImage(in GcCameraDevice camera, in float x, in float y, in float width, in float height, float degree = 0, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） x float X座標 y float Y座標 width float 横幅。映像の横幅がこれになるように拡縮される height float 縦幅。映像の縦幅がこれになるように拡縮される degree float 回転（度数法） autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCameraImage(in GcCameraDevice, in float2, float, bool) カメラ（外部入力映像）を描画します public void DrawCameraImage(in GcCameraDevice camera, in float2 position, float degree = 0, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） position float2 位置 degree float 回転（度数法） autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCircle() 中抜きの円を描画します public void DrawCircle() DrawCircle(in GcCircle) 中抜きの円を描画します public void DrawCircle(in GcCircle circle) Parameters circle GcCircle 円 DrawCircle(in float, in float, in float) 円を線で描画します public void DrawCircle(in float x, in float y, in float radius) Parameters x float 中心のX座標 y float 中心のY座標 radius float 半径 DrawCircle(in float2, in float) 円を線で描画します public void DrawCircle(in float2 position, in float radius) Parameters position float2 中心の座標 radius float 半径 DrawImage(in GcImage) 画像を描画します public void DrawImage(in GcImage image) Parameters image GcImage 描画する画像 DrawImage(in GcImage, in GcRect) 画像を拡縮して描画します public void DrawImage(in GcImage image, in GcRect rect) Parameters image GcImage 描画する画像 rect GcRect 画像をフィッティングする矩形領域 DrawImage(in GcImage, in float, in float, float) 画像を描画します public void DrawImage(in GcImage image, in float x, in float y, float degree = 0) Parameters image GcImage 描画する画像 x float X座標 y float Y座標 degree float 回転（度数法） DrawImage(in GcImage, in float, in float, in float, in float, float) 画像を拡縮して描画します public void DrawImage(in GcImage image, in float x, in float y, in float width, in float height, float degree = 0) Parameters image GcImage 描画する画像 x float X座標 y float Y座標 width float 横幅。画像の横幅がこれになるように拡縮される height float 縦幅。画像の縦幅がこれになるように拡縮される degree float 回転（度数法） DrawImage(in GcImage, in float2, float) 画像を描画します public void DrawImage(in GcImage image, in float2 position, float degree = 0) Parameters image GcImage 描画する画像 position float2 位置 degree float 回転（度数法） DrawLine() 線を描画します public void DrawLine() DrawLine(in GcLine) 線を描画します public void DrawLine(in GcLine line) Parameters line GcLine 線 DrawLine(in float, in float, in float, in float) 線を描画します public void DrawLine(in float x0, in float y0, in float x1, in float y1) Parameters x0 float 始点のX座標 y0 float 始点のY座標 x1 float 終点のX座標 y1 float 終点のY座標 DrawLine(in float2, in float2) 線を描画します public void DrawLine(in float2 begin, in float2 end) Parameters begin float2 始点 end float2 終点 DrawOnlineImage(in string) オンライン画像リソースを描画します public GcAvailability DrawOnlineImage(in string url) Parameters url string リソースURL Returns GcAvailability オンラインリソースの可用性 DrawOnlineImage(in string, in GcRect) オンライン画像リソースを拡縮して描画します public GcAvailability DrawOnlineImage(in string url, in GcRect rect) Parameters url string リソースURL rect GcRect 画像をフィッティングする矩形領域 Returns GcAvailability DrawOnlineImage(in string, in float, in float, float) オンライン画像リソースを描画します public GcAvailability DrawOnlineImage(in string url, in float x, in float y, float degree = 0) Parameters url string リソースURL x float X座標 y float Y座標 degree float 回転（度数法） Returns GcAvailability オンラインリソースの可用性 DrawOnlineImage(in string, in float, in float, in float, in float, float) オンライン画像リソースを拡縮して描画します public GcAvailability DrawOnlineImage(in string url, in float x, in float y, in float width, in float height, float degree = 0) Parameters url string リソースURL x float X座標 y float Y座標 width float 横幅。画像の横幅がこれになるように拡縮される height float 縦幅。画像の縦幅がこれになるように拡縮される degree float 回転（度数法） Returns GcAvailability DrawOnlineImage(in string, in float2, float) オンライン画像リソースを描画します public GcAvailability DrawOnlineImage(in string url, in float2 position, float degree = 0) Parameters url string リソースURL position float2 位置 degree float 回転（度数法） Returns GcAvailability オンラインリソースの可用性 DrawRect() 矩形を線で描画します public void DrawRect() DrawRect(in GcRect) 矩形を線で描画します public void DrawRect(in GcRect rect) Parameters rect GcRect 矩形 DrawRect(in float, in float, in float, in float, float) 矩形を線で描画します public void DrawRect(in float x, in float y, in float width, in float height, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 degree float 回転（度数法） DrawRect(in float2, in float2, float) 矩形を線で描画します public void DrawRect(in float2 position, in float2 size, float degree = 0) Parameters position float2 位置 size float2 大きさ degree float 回転（度数法） DrawRoundedRect() 角丸矩形を線で描画します public void DrawRoundedRect() DrawRoundedRect(in GcRect) 角丸矩形を線で描画します public void DrawRoundedRect(in GcRect rect) Parameters rect GcRect 二等辺三角形が収まる矩形 DrawRoundedRect(in GcRect, float) 角丸矩形を線で描画します public void DrawRoundedRect(in GcRect rect, float cornerRect) Parameters rect GcRect 二等辺三角形が収まる矩形 cornerRect float DrawRoundedRect(in float, in float, in float, in float, float) 角丸矩形を線で描画します public void DrawRoundedRect(in float x, in float y, in float width, in float height, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 degree float 回転（度数法） DrawRoundedRect(in float, in float, in float, in float, float, float) 角丸矩形を線で描画します public void DrawRoundedRect(in float x, in float y, in float width, in float height, float cornerRadius, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 cornerRadius float 角丸の半径 degree float 回転（度数法） DrawRoundedRect(in float2, in float2, float) 角丸矩形を線で描画します public void DrawRoundedRect(in float2 position, in float2 size, float degree = 0) Parameters position float2 位置 size float2 大きさ degree float 回転（度数法） DrawRoundedRect(in float2, in float2, float, float) 角丸矩形を線で描画します public void DrawRoundedRect(in float2 position, in float2 size, float cornerRadius, float degree = 0) Parameters position float2 位置 size float2 大きさ cornerRadius float 角丸の半径 degree float 回転（度数法） DrawString(in string) 文字列を描画します public void DrawString(in string str) Parameters str string 描画する文字列 DrawString(in string, in GcRect) 文字列を拡縮して描画します public void DrawString(in string str, in GcRect rect) Parameters str string 描画する文字列 rect GcRect 文字列をフィッティングする矩形領域 DrawString(in string, in float, in float, float) 文字列を描画します public void DrawString(in string str, in float x, in float y, float degree = 0) Parameters str string 描画する文字列 x float X座標 y float Y座標 degree float 回転（度数法） DrawString(in string, in float, in float, in float, in float, float) 文字列を拡縮して描画します public void DrawString(in string str, in float x, in float y, in float width, in float height, float degree = 0) Parameters str string 描画する文字列 x float X座標 y float Y座標 width float 横幅。文字列の横幅がこれになるように拡縮される height float 縦幅。文字列の縦幅がこれになるように拡縮される degree float 回転（度数法） DrawString(in string, in float2, float) 文字列を描画します public void DrawString(in string str, in float2 position, float degree = 0) Parameters str string 描画する文字列 position float2 位置 degree float 回転（度数法） DrawTexture(in Texture) テクスチャーを描画します public void DrawTexture(in Texture texture) Parameters texture Texture 描画するテクスチャー DrawTexture(in Texture, in GcRect) テクスチャーを拡縮して描画します public void DrawTexture(in Texture texture, in GcRect rect) Parameters texture Texture 描画するテクスチャー rect GcRect テクスチャーをフィッティングする矩形領域 DrawTexture(in Texture, in float, in float, in float, in float, float) テクスチャーを拡縮して描画します public void DrawTexture(in Texture texture, in float x, in float y, in float width, in float height, float degree = 0) Parameters texture Texture 描画するテクスチャー x float X座標 y float Y座標 width float 横幅。画像の横幅がこれになるように拡縮される height float 縦幅。画像の縦幅がこれになるように拡縮される degree float 回転（度数法） DrawTexture(in Texture, in float2, float) テクスチャーを描画します public void DrawTexture(in Texture texture, in float2 position, float degree = 0) Parameters texture Texture 描画するテクスチャー position float2 位置 degree float 回転（度数法） DrawTexture(in Texture, in float2x3) テクスチャーを変形して描画します public void DrawTexture(in Texture texture, in float2x3 matrix) Parameters texture Texture 描画するテクスチャー matrix float2x3 アフィン変換行列 EraseSavedDataAll() ローカルストレージに保存された全ての値を削除します public void EraseSavedDataAll() FillCircle() 円を塗りで描画します public void FillCircle() FillCircle(in GcCircle) 円を塗りで描画します public void FillCircle(in GcCircle circle) Parameters circle GcCircle 円 FillCircle(in float, in float, in float) 円を塗りで描画します public void FillCircle(in float x, in float y, in float radius) Parameters x float 中心のX座標 y float 中心のY座標 radius float 半径 FillCircle(in float2, in float) 円を塗りで描画します public void FillCircle(in float2 position, in float radius) Parameters position float2 中心の座標 radius float 半径 FillRect() 矩形を塗りで描画します public void FillRect() FillRect(in GcRect) 矩形を塗りで描画します public void FillRect(in GcRect rect) Parameters rect GcRect 矩形 FillRect(in float, in float, in float, in float, float) 矩形を塗りで描画します public void FillRect(in float x, in float y, in float width, in float height, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 degree float 回転（度数法） FillRect(in float2, in float2, float) 矩形を塗りで描画します public void FillRect(in float2 position, in float2 size, float degree = 0) Parameters position float2 位置 size float2 大きさ degree float 回転（度数法） FillRoundedRect() 角丸矩形を塗りで描画します public void FillRoundedRect() FillRoundedRect(in GcRect) 角丸矩形を塗りで描画します public void FillRoundedRect(in GcRect rect) Parameters rect GcRect 二等辺三角形が収まる矩形 FillRoundedRect(in GcRect, float) 角丸矩形を塗りで描画します public void FillRoundedRect(in GcRect rect, float cornerRadius) Parameters rect GcRect 二等辺三角形が収まる矩形 cornerRadius float 角丸の半径 FillRoundedRect(in float, in float, in float, in float, float) 角丸矩形を塗りで描画します public void FillRoundedRect(in float x, in float y, in float width, in float height, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 degree float 回転（度数法） FillRoundedRect(in float, in float, in float, in float, float, float) 角丸矩形を塗りで描画します public void FillRoundedRect(in float x, in float y, in float width, in float height, float cornerRadius, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 cornerRadius float 角丸の半径 degree float 回転（度数法） FillRoundedRect(in float2, in float2, float) 角丸矩形を塗りで描画します public void FillRoundedRect(in float2 position, in float2 size, float degree = 0) Parameters position float2 位置 size float2 大きさ degree float 回転（度数法） FillRoundedRect(in float2, in float2, float, float) 角丸矩形を塗りで描画します public void FillRoundedRect(in float2 position, in float2 size, float cornerRadius, float degree = 0) Parameters position float2 位置 size float2 大きさ cornerRadius float 角丸の半径 degree float 回転（度数法） FocusCameraImage(in GcCameraDevice, in float2?) カメラ（外部入力映像）の任意の点に焦点をあわせるように要求します public void FocusCameraImage(in GcCameraDevice camera, in float2? uv) Parameters camera GcCameraDevice カメラ（外部入力映像） uv float2? 焦点をあわせる位置（左下を原点とする 0.0～1.0 のUV座標系） Remarks このAPIは、対応するカメラデバイスに対して、実機上での実行したときのみ動作します uv引数は、キャンバス座標系ではなく、左下を原点とする 0.0～1.0 のUV座標系を指定します 焦点あわせを解除するには、uv引数に null を渡します GetActor() シーンに登録されているアクターのうち、1つだけ取得します public GcActor? GetActor() Returns GcActor 取得できたアクター GetActorCount() シーンに登録されているアクターの総数を取得します public int GetActorCount() Returns int アクターの数 GetActorCount<T>() シーンに登録されているアクターのうち、指定した型のものが幾つあるか取得します public int GetActorCount<T>() where T : GcActor Returns int アクターの数 Type Parameters T 取得するアクターの型 GetActor<T>() シーンに登録されているアクターのうち、指定した型のものを1つだけ取得します public T? GetActor<T>() where T : GcActor Returns T 取得できたアクター Type Parameters T 取得するアクターの型 GetImageHeight(in GcImage) 画像の縦幅を取得します public int GetImageHeight(in GcImage image) Parameters image GcImage 画像 Returns int 縦幅 GetImageSize(in GcImage) 画像のサイズを取得します public int2 GetImageSize(in GcImage image) Parameters image GcImage 画像 Returns int2 サイズ GetImageWidth(in GcImage) 画像の横幅を取得します public int GetImageWidth(in GcImage image) Parameters image GcImage 画像 Returns int 横幅 GetKeyPressDuration(in Key) 指定されたキーが押されている時間（秒） public float GetKeyPressDuration(in Key key) Parameters key Key キー Returns float 時間（秒） GetKeyPressFrameCount(in Key) 指定されたキーが押されているフレーム数 public int GetKeyPressFrameCount(in Key key) Parameters key Key キー Returns int フレーム数 GetOnlineImageHeight(in string) オンライン画像リソースの縦幅を取得します public int GetOnlineImageHeight(in string url) Parameters url string リソースURL Returns int オンライン画像リソースの縦幅。取得できなかった場合は0を返します GetOnlineImageWidth(in string) オンライン画像リソースの横幅を取得します public int GetOnlineImageWidth(in string url) Parameters url string リソースURL Returns int オンライン画像リソースの横幅。取得できなかった場合は0を返します GetOrCreateCameraTexture(in GcCameraDevice, in GcResolution) 指定されたカメラ（外部入力映像）のテクスチャーを生成もしくは取得します public WebCamTexture? GetOrCreateCameraTexture(in GcCameraDevice camera, in GcResolution request) Parameters camera GcCameraDevice カメラ（外部入力映像） request GcResolution テクスチャーが未生成だった場合に、希望する解像度とリフレッシュレート Returns WebCamTexture テクスチャー Remarks 既にテクスチャーが生成済みの場合は、request引数の値は無視されます 生成後に解像度を変更する場合は TryChangeCameraImageResolution(in GcCameraDevice, in GcResolution) 関数を呼び出してください GetPrimaryCameraResolution(in GcCameraDevice) 指定されたカメラ（外部入力映像）の推奨解像度を取得します public GcResolution GetPrimaryCameraResolution(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns GcResolution 解像度とリフレッシュレート Remarks 推奨解像度を取得できない場合、現在のキャンバス解像度とフレームレートに基づいた適当な値を返します エディタでは常に推奨解像度を取得できません GetRandomState() 乱数計算の現在の状態（≒シード値）を取得します public uint GetRandomState() Returns uint シード値 GetSoundLevel(GcSoundTrack) トラック音量を取得します public float GetSoundLevel(GcSoundTrack track = GcSoundTrack.Master) Parameters track GcSoundTrack 対象の音声トラック Returns float 音量（-96db～20db） GetSoundVolume(GcSoundTrack) トラック音量を取得します public float GetSoundVolume(GcSoundTrack track = GcSoundTrack.Master) Parameters track GcSoundTrack 対象の音声トラック Returns float 音量（0f～1f） HideScreenKeyboard() スクリーンキーボードを閉じます public void HideScreenKeyboard() HitTest(in GcAABB, in GcAABB) GcAABB と GcAABB の接触判定 public bool HitTest(in GcAABB a, in GcAABB b) Parameters a GcAABB b GcAABB Returns bool HitTest(in GcAABB, in float2) GcAABB と 点の接触判定 public bool HitTest(in GcAABB aabb, in float2 point) Parameters aabb GcAABB point float2 Returns bool HitTest(in GcCircle, in GcCircle) GcCircle と GcCircle の接触判定 public bool HitTest(in GcCircle circle1, in GcCircle circle2) Parameters circle1 GcCircle circle2 GcCircle Returns bool HitTest(in GcCircle, in float2) GcCircle と 点の接触判定 public bool HitTest(in GcCircle circle, in float2 point) Parameters circle GcCircle point float2 Returns bool IsFlippedCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）は上下が反転しているかどうか public bool IsFlippedCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 上下が反転しているかどうか IsKeyDown(in Key) 指定されたキーが押されたかどうか public bool IsKeyDown(in Key key) Parameters key Key キー Returns bool 押されたかどうか IsKeyHold(in Key) 指定されたキーが押されているかどうか（押された瞬間を除く） public bool IsKeyHold(in Key key) Parameters key Key キー Returns bool 押されているかどうか（押された瞬間を除く） IsKeyHold(in Key, out GcKeyTrace) 指定されたキーが押されているかどうか（押された瞬間を除く） public bool IsKeyHold(in Key key, out GcKeyTrace trace) Parameters key Key キー trace GcKeyTrace キーの軌跡 Returns bool 押されているかどうか（押された瞬間を除く） IsKeyPress(in Key) 指定されたキーが押されているかどうか（押された瞬間を含む） public bool IsKeyPress(in Key key) Parameters key Key キー Returns bool 押されているかどうか（押された瞬間を含む） IsKeyUp(in Key) 指定されたキーが離されたかどうか public bool IsKeyUp(in Key key) Parameters key Key キー Returns bool 離されたかどうか IsKeyUp(in Key, out GcKeyTrace) 指定されたキーが離されたかどうか public bool IsKeyUp(in Key key, out GcKeyTrace trace) Parameters key Key キー trace GcKeyTrace キーの軌跡 Returns bool 離されたかどうか IsPlayingCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）の更新が行われているかどうか public bool IsPlayingCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 更新が行われているかどうか IsPlayingSound(GcSoundTrack) 指定された音声トラックが再生中かどうか public bool IsPlayingSound(GcSoundTrack track = GcSoundTrack.BGM1) Parameters track GcSoundTrack 対象の音声トラック Returns bool 再生中かどうか IsTapped() 前回のフレーム処理以降に タップされたかどうか public bool IsTapped() Returns bool タップされたかどうか IsTapped(in GcAABB, out float2) 前回のフレーム処理以降に 指定した領域がタップされたかどうか public bool IsTapped(in GcAABB aabb, out float2 point) Parameters aabb GcAABB 領域 point float2 タップ位置 Returns bool 指定した領域がタップされたかどうか IsTapped(out float, out float) 前回のフレーム処理以降に タップされたかどうか public bool IsTapped(out float x, out float y) Parameters x float タップ位置 X座標 y float タップ位置 Y座標 Returns bool タップされたかどうか IsTapped(in float, in float, in float, in float, out float, out float) 前回のフレーム処理以降に 指定した領域がタップされたかどうか public bool IsTapped(in float x, in float y, in float width, in float height, out float px, out float py) Parameters x float 領域 左上X座標 y float 領域 左上Y座標 width float 領域 横幅 height float 領域 縦幅 px float タップ位置 X座標 py float タップ位置 Y座標 Returns bool 指定した領域がタップされたかどうか IsTapped(out float2) 前回のフレーム処理以降に タップされたかどうか public bool IsTapped(out float2 point) Parameters point float2 タップ位置 Returns bool タップされたかどうか IsTouchBegan() 前回のフレーム処理以降に タッチされ始めたかどうか public bool IsTouchBegan() Returns bool タッチされ始めたかどうか IsTouchBegan(in GcAABB, out float2) 前回のフレーム処理以降に 指定した領域がタッチされ始めたかどうか public bool IsTouchBegan(in GcAABB aabb, out float2 point) Parameters aabb GcAABB 領域 point float2 タッチ位置 Returns bool 指定した領域がタッチされ始めたかどうか IsTouchBegan(out GcPointerEvent) 前回のフレーム処理以降に タッチされ始めたかどうか public bool IsTouchBegan(out GcPointerEvent pointer) Parameters pointer GcPointerEvent ポインターイベント Returns bool タッチされ始めたかどうか IsTouchBegan(out float, out float) 前回のフレーム処理以降に タッチされ始めたかどうか public bool IsTouchBegan(out float x, out float y) Parameters x float タッチ位置 X座標 y float タッチ位置 Y座標 Returns bool タッチされ始めたかどうか IsTouchBegan(in float, in float, in float, in float, out float, out float) 前回のフレーム処理以降に 指定した領域がタッチされ始めたかどうか public bool IsTouchBegan(in float x, in float y, in float width, in float height, out float px, out float py) Parameters x float 領域 左上X座標 y float 領域 左上Y座標 width float 領域 横幅 height float 領域 縦幅 px float タッチ位置 X座標 py float タッチ位置 Y座標 Returns bool 指定した領域がタッチされ始めたかどうか IsTouchBegan(out float2) 前回のフレーム処理以降に タッチされ始めたかどうか public bool IsTouchBegan(out float2 point) Parameters point float2 タッチ位置 Returns bool タッチされ始めたかどうか IsTouchEnded() 前回のフレーム処理以降 タッチされ終えたかどうか public bool IsTouchEnded() Returns bool タッチされ終えたかどうか IsTouchEnded(in GcAABB, out float2) 前回のフレーム処理以降 指定した領域がタッチされ終えたかどうか public bool IsTouchEnded(in GcAABB aabb, out float2 point) Parameters aabb GcAABB 領域 point float2 タッチ位置 Returns bool 指定した領域がタッチされ終えたかどうか IsTouchEnded(out GcPointerEvent) 前回のフレーム処理以降 タッチされ終えたかどうか public bool IsTouchEnded(out GcPointerEvent pointer) Parameters pointer GcPointerEvent ポインターイベント Returns bool タッチされ終えたかどうか IsTouchEnded(out GcPointerTrace) 前回のフレーム処理以降 タッチされ終えたかどうか public bool IsTouchEnded(out GcPointerTrace pointer) Parameters pointer GcPointerTrace タッチの軌跡 Returns bool タッチされ終えたかどうか IsTouchEnded(out float, out float) 前回のフレーム処理以降 タッチされ終えたかどうか public bool IsTouchEnded(out float x, out float y) Parameters x float タッチ位置 X座標 y float タッチ位置 Y座標 Returns bool タッチされ終えたかどうか IsTouchEnded(in float, in float, in float, in float, out float, out float) 前回のフレーム処理以降 指定した領域がタッチされ終えたかどうか public bool IsTouchEnded(in float x, in float y, in float width, in float height, out float px, out float py) Parameters x float 領域 左上X座標 y float 領域 左上Y座標 width float 領域 横幅 height float 領域 縦幅 px float タッチ位置 X座標 py float タッチ位置 Y座標 Returns bool 指定した領域がタッチされ終えたかどうか IsTouchEnded(out float2) 前回のフレーム処理以降 タッチされ終えたかどうか public bool IsTouchEnded(out float2 point) Parameters point float2 タッチ位置 Returns bool タッチされ終えたかどうか IsTouched() 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） public bool IsTouched() Returns bool タッチされていたか（開始と終了を含む） IsTouched(in GcAABB, out float2) 前回のフレーム処理以降 指定した領域がタッチされていたか（開始と終了を含む） public bool IsTouched(in GcAABB aabb, out float2 point) Parameters aabb GcAABB 領域 point float2 タッチ位置 Returns bool 指定した領域がタッチされていたか（開始と終了を含む） IsTouched(out GcPointerEvent) 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） public bool IsTouched(out GcPointerEvent pointer) Parameters pointer GcPointerEvent Returns bool タッチされていたか（開始と終了を含む） IsTouched(out GcPointerTrace) 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） public bool IsTouched(out GcPointerTrace pointer) Parameters pointer GcPointerTrace Returns bool タッチされていたか（開始と終了を含む） IsTouched(out float, out float) 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） public bool IsTouched(out float x, out float y) Parameters x float タッチ位置 X座標 y float タッチ位置 Y座標 Returns bool タッチされていたか（開始と終了を含む） IsTouched(in float, in float, in float, in float, out float, out float) 前回のフレーム処理以降 指定した領域がタッチされていたか（開始と終了を含む） public bool IsTouched(in float x, in float y, in float width, in float height, out float px, out float py) Parameters x float 領域 左上X座標 y float 領域 左上Y座標 width float 領域 横幅 height float 領域 縦幅 px float タッチ位置 X座標 py float タッチ位置 Y座標 Returns bool 指定した領域がタッチされていたか（開始と終了を含む） IsTouched(out float2) 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） public bool IsTouched(out float2 point) Parameters point float2 タッチ位置 Returns bool タッチされていたか（開始と終了を含む） Max(in float, in float) 2つの値を比較して、より大きい方を返します public float Max(in float a, in float b) Parameters a float b float Returns float 大きい方の値 Min(in float, in float) 2つの値を比較して、より小さい方を返します public float Min(in float a, in float b) Parameters a float b float Returns float 小さい方の値 PauseCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）の更新処理を一時停止します public bool PauseCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 停止したかどうか（元から停止していた場合を含まない） PauseSound(GcSoundTrack) 指定された音声トラックのサウンドを一時停止します public void PauseSound(GcSoundTrack track = GcSoundTrack.BGM1) Parameters track GcSoundTrack 対象の音声トラック Remarks BGMトラック以外では常に無視されます PlayCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）の更新処理を開始します public bool PlayCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 開始したかどうか（元から更新していた場合を含まない） Remarks カメラごとにこのAPIを呼び出すことで、それらを同時に更新することが可能です ただし、同じ名称のカメラは、同時に更新することができません PlayCameraImage(in GcCameraDevice, in GcResolution, out int2) 指定されたカメラ（外部入力映像）の更新処理を開始します public bool PlayCameraImage(in GcCameraDevice camera, in GcResolution request, out int2 resolution) Parameters camera GcCameraDevice カメラ（外部入力映像） request GcResolution テクスチャーが未生成だった場合に、希望する解像度とリフレッシュレート resolution int2 カメラ（外部入力映像）の解像度 Returns bool 開始したかどうか（元から更新していた場合を含まない） Remarks カメラごとにこのAPIを呼び出すことで、それらを同時に更新することが可能です ただし、同じ名称のカメラは、同時に更新することができません 既にテクスチャーが生成済みの場合は、request引数の値は無視されます 生成後に解像度を変更する場合は TryChangeCameraImageResolution(in GcCameraDevice, in GcResolution) 関数を呼び出してください PlayCameraImage(in GcCameraDevice, out int2) 指定されたカメラ（外部入力映像）の更新処理を開始します public bool PlayCameraImage(in GcCameraDevice camera, out int2 resolution) Parameters camera GcCameraDevice カメラ（外部入力映像） resolution int2 カメラ（外部入力映像）の解像度 Returns bool 開始したかどうか（元から更新していた場合を含まない） Remarks カメラごとにこのAPIを呼び出すことで、それらを同時に更新することが可能です ただし、同じ名称のカメラは、同時に更新することができません テクスチャーが未生成だった場合は、内部で勝手に適当な解像度で生成します PlaySE(in GcSound) サウンドを1回再生します public void PlaySE(in GcSound sound) Parameters sound GcSound サウンド PlaySE(in AudioClip) サウンドを1回再生します public void PlaySE(in AudioClip clip) Parameters clip AudioClip サウンド PlaySound(in GcSound, GcSoundTrack, bool) サウンドを再生します public void PlaySound(in GcSound sound, GcSoundTrack track = GcSoundTrack.BGM1, bool loop = false) Parameters sound GcSound track GcSoundTrack 対象の音声トラック loop bool ループ再生するかどうか（SEトラック以外） PlaySound(in AudioClip, GcSoundTrack, bool) サウンドを再生します public void PlaySound(in AudioClip clip, GcSoundTrack track = GcSoundTrack.BGM1, bool loop = false) Parameters clip AudioClip サウンド track GcSoundTrack 対象の音声トラック loop bool ループ再生するかどうか（SEトラック以外） PopCoordinate() スタックから座標系（変換行列）を取り出し CurrentCoordinate に上書きします public void PopCoordinate() PopStyle() スタックから描画スタイルを取り出し CurrentStyle に上書きします public void PopStyle() PushCoordinate() CurrentCoordinate をスタックに保存します public void PushCoordinate() PushStyle() CurrentStyle をスタックに保存します public void PushStyle() Random() 0以上1未満のランダムな値を算出します public float Random() Returns float ランダムな値 Random(in int, in int) min以上max以下のランダムな値を算出します public int Random(in int min, in int max) Parameters min int 最小値 max int 最大値 Returns int ランダムな値 Random(in float, in float) min以上max未満のランダムな値を算出します public float Random(in float min, in float max) Parameters min float 最小値 max float 最大値 Returns float ランダムな値 RebuildFontTexture() フォントテクスチャ―を再生成します public void RebuildFontTexture() Remarks テキスト描画が乱れた場合にのみ呼び出すことを想定しています 実際に再生成が行われるのは、この関数を呼び出した次のフレームの冒頭です RegisterScene(in GcScene) 新たなシーンを登録します public void RegisterScene(in GcScene scene) Parameters scene GcScene 登録するシーン Remarks 登録したシーンは ChangeScene<T>(object?) を呼び出すことで有効になります RegisterScene<T>() 新たなシーンを登録します public void RegisterScene<T>() where T : GcScene, new() Type Parameters T 登録するシーンの型 Remarks 登録したシーンは ChangeScene<T>(object?) を呼び出すことで有効になります RemoveActorAll() シーンに登録されているすべてのアクターを登録解除します public void RemoveActorAll() Repeat(in float, in float) 値を 0 から max までの範囲を繰り返すよう値を丸めます public float Repeat(in float value, in float max) Parameters value float 入力値 max float 最大値 Returns float RequestUserAuthorizedPermissionCameraAsync(in Action<bool>) カメラデバイスへのアクセス権限を要求します public void RequestUserAuthorizedPermissionCameraAsync(in Action<bool> callback) Parameters callback Action<bool> 結果を通知するコールバック RequestUserAuthorizedPermissionGeolocationAsync(in Action<bool>) 位置情報へのアクセス権限を要求します public void RequestUserAuthorizedPermissionGeolocationAsync(in Action<bool> callback) Parameters callback Action<bool> 結果を通知するコールバック RotateCoordinate(in float) 座標系（変換行列）を回転させます public void RotateCoordinate(in float degree) Parameters degree float 回転量（度数法） RotateCoordinate(in float, in float, in float) 座標系（変換行列）を回転させます public void RotateCoordinate(in float degree, in float originX, in float originY) Parameters degree float 回転量（度数法） originX float 回転中心のX座標 originY float 回転中心のY座標 RotateCoordinate(in float, in float2) 座標系（変換行列）を指定した座標を中心に回転させます public void RotateCoordinate(in float degree, in float2 origin) Parameters degree float 回転量（度数法） origin float2 回転中心 RotateVector(in float2, in float) ベクトルを回転します public float2 RotateVector(in float2 vector, in float degree) Parameters vector float2 ベクトル degree float 回転量（度数法） Returns float2 回転後のベクトル Round(in double) 値を四捨五入します public int Round(in double value) Parameters value double 入力値 Returns int 四捨五入された値 Round(in float) 値を四捨五入します public int Round(in float value) Parameters value float 入力値 Returns int 四捨五入された値 Save(in string, int?) ローカルストレージに値を保存します public void Save(in string key, int? value) Parameters key string キー value int? 保存する値 Remarks value に null を渡した場合、キーに紐づくデータを削除します Save(in string, float?) ローカルストレージに値を保存します public void Save(in string key, float? value) Parameters key string キー value float? 保存する値 Remarks value に null を渡した場合、キーに紐づくデータを削除します Save(in string, string?) ローカルストレージに値を保存します public void Save(in string key, string? value) Parameters key string キー value string 保存する値 Remarks value に null を渡した場合、キーに紐づくデータを削除します SaveScreenshotAsync(Action<string?>?) 現在の画面を 画像として保存します public void SaveScreenshotAsync(Action<string?>? onComplete = null) Parameters onComplete Action<string> 保存完了後に呼び出されるコールバック Remarks 保存に成功した場合、onComplete の引数には、画像保存先のパスが渡されます 保存に失敗した場合、onComplete の引数には null が渡されます ScaleCoordinate(in float, in float) 座標系（変換行列）を拡縮させます public void ScaleCoordinate(in float sx, in float sy) Parameters sx float X軸方向の拡縮率 sy float Y軸方向の拡縮率 ScaleCoordinate(in float2) 座標系（変換行列）を拡縮させます public void ScaleCoordinate(in float2 scaling) Parameters scaling float2 拡縮率 ScreenToCanvasPoint(in float2, out float2) 端末スクリーン座標をキャンバス座標に変換します public void ScreenToCanvasPoint(in float2 screen, out float2 canvas) Parameters screen float2 変換元 端末スクリーン座標 canvas float2 変換後 キャンバス座標 ScreenToCanvasPoint(in float2, out int2) 端末スクリーン座標をキャンバス座標に変換します public void ScreenToCanvasPoint(in float2 screen, out int2 canvas) Parameters screen float2 変換元 端末スクリーン座標 canvas int2 変換後 キャンバス座標 SetBackgroundColor(in float, in float, in float) 背景色を指定します public void SetBackgroundColor(in float r, in float g, in float b) Parameters r float 背景色の赤成分 g float 背景色の緑成分 b float 背景色の青成分 SetBackgroundColor(in Color) 背景色を指定します public void SetBackgroundColor(in Color color) Parameters color Color 背景色 SetColor(in byte, in byte, in byte, byte) 描画色を指定します public void SetColor(in byte r, in byte g, in byte b, byte a = 255) Parameters r byte 描画色の赤成分 g byte 描画色の緑成分 b byte 描画色の青成分 a byte 描画色の不透明度 SetColor(in float, in float, in float, float) 描画色を指定します public void SetColor(in float r, in float g, in float b, float a = 1) Parameters r float 描画色の赤成分 g float 描画色の緑成分 b float 描画色の青成分 a float 描画色の不透明度 SetColor(in Color) 描画色を指定します public void SetColor(in Color color) Parameters color Color 描画色 SetColor(in Color, in float) 描画色を指定します public void SetColor(in Color color, in float alpha) Parameters color Color 描画色 alpha float 描画色の不透明度 SetCoordinate(in float2x3) 座標系（変換行列）を指定します public void SetCoordinate(in float2x3 matrix) Parameters matrix float2x3 座標系（変換行列） SetFont(in GcFont) フォントを指定します public void SetFont(in GcFont font) Parameters font GcFont フォント SetFontSize(in int) フォントサイズを指定します public void SetFontSize(in int fontSize) Parameters fontSize int フォントサイズ SetFrameInterval(in double, bool) UpdateGame や DrawGame が呼び出される時間間隔を設定します。 public void SetFrameInterval(in double targetDeltaTime, bool vSyncEnabled = true) Parameters targetDeltaTime double フレーム更新間隔の目標値（秒） vSyncEnabled bool 垂直同期の有無 Remarks 垂直同期を無効にした場合、間隔の揺らぎは減少しますが、ディスプレイのリフレッシュレートを常に無視して描画するため、画面のちらつきが発生する場合があります。 SetFrameRate(in int, bool) フレームレートの目標値を設定します。 小数点以下を指定したい場合は、この関数の代わりに SetFrameInterval(in double, bool) を使用してください。 public void SetFrameRate(in int targetFrameRate, bool vSyncEnabled = true) Parameters targetFrameRate int フレームレート（1秒あたりのフレーム数）の目標値 vSyncEnabled bool 垂直同期の有無 Remarks 垂直同期を無効にした場合、間隔の揺らぎは減少しますが、ディスプレイのリフレッシュレートを常に無視して描画するため、画面のちらつきが発生する場合があります。 SetLineCap(in GcLineCap) 描線の端点の形状を指定します public void SetLineCap(in GcLineCap lineCap) Parameters lineCap GcLineCap 描線の端点の形状 SetLineWidth(in float) 描線の太さを指定します public void SetLineWidth(in float lineWidth) Parameters lineWidth float 描線の太さ SetRandomSeed(in uint) 乱数計算のシード値を設定します public void SetRandomSeed(in uint seed) Parameters seed uint シード値 SetRandomSeedByIndex(in uint) 乱数計算のシード値をインデックスから設定します public void SetRandomSeedByIndex(in uint index) Parameters index uint インデックス SetRectAnchor(in GcAnchor) 矩形や画像のアンカー位置を指定します public void SetRectAnchor(in GcAnchor anchor) Parameters anchor GcAnchor アンカー位置 SetSoundLevel(in float, GcSoundTrack) トラック音量を変更します public void SetSoundLevel(in float decibel, GcSoundTrack track = GcSoundTrack.Master) Parameters decibel float 音量（-96db～20db） track GcSoundTrack 対象の音声トラック SetSoundVolume(in float, GcSoundTrack) トラック音量を変更します public void SetSoundVolume(in float volume, GcSoundTrack track = GcSoundTrack.Master) Parameters volume float 音量（0f～1f） track GcSoundTrack 対象の音声トラック SetStringAnchor(in GcAnchor) 文字列のアンカー位置を指定します public void SetStringAnchor(in GcAnchor anchor) Parameters anchor GcAnchor アンカー位置 SetStyle(in GcStyle) スタイルを指定します public void SetStyle(in GcStyle style) Parameters style GcStyle ShowScreenKeyboard() スクリーンキーボードを表示します public bool ShowScreenKeyboard() Returns bool 表示できたかどうか Sin(in float) サインを計算します public float Sin(in float degree) Parameters degree float 角度（度数法） Returns float サイン Sqrt(in float) 平方根を計算します public float Sqrt(in float value) Parameters value float 入力値 Returns float 平方根 StartGeolocationService(float, float) 位置情報サービスを起動します public void StartGeolocationService(float desiredAccuracy = 10, float updateDistance = 10) Parameters desiredAccuracy float 望ましいサービス精度（メートル単位） updateDistance float 位置情報の更新に必要な最小移動距離（メートル単位） Remarks 位置情報へのアクセス権限がない場合、この処理は失敗します StopCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）の更新処理を完全に停止します public void StopCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） StopGeolocationService() 位置情報サービスを停止します public void StopGeolocationService() StopSound(GcSoundTrack) 指定された音声トラックのサウンドを停止します public void StopSound(GcSoundTrack track = GcSoundTrack.BGM1) Parameters track GcSoundTrack 対象の音声トラック Remarks BGMトラック以外では常に無視されます SweepTest(in GcAABB, in GcAABB, in float2, out GcSweepResult) 移動する矩形と静的な矩形の連続衝突検出 public bool SweepTest(in GcAABB @static, in GcAABB dynamic, in float2 delta, out GcSweepResult hit) Parameters static GcAABB dynamic GcAABB delta float2 hit GcSweepResult Returns bool SweepTest(in GcAABB, in float2, in float2, out GcSweepResult) 移動する点と静的な矩形の連続衝突検出 public bool SweepTest(in GcAABB @static, in float2 dynamic, in float2 delta, out GcSweepResult hit) Parameters static GcAABB dynamic float2 delta float2 hit GcSweepResult Returns bool TranslateCoordinate(in float, in float) 座標系（変換行列）を平行移動させます public void TranslateCoordinate(in float tx, in float ty) Parameters tx float X軸方向の移動量 ty float Y軸方向の移動量 TranslateCoordinate(in float2) 座標系（変換行列）を平行移動させます public void TranslateCoordinate(in float2 translation) Parameters translation float2 移動量 TryChangeCameraImageResolution(in GcCameraDevice, in GcResolution) 指定されたカメラ（外部入力映像）の解像度変更を試みます public int2 TryChangeCameraImageResolution(in GcCameraDevice camera, in GcResolution request) Parameters camera GcCameraDevice カメラ（外部入力映像） request GcResolution 希望する解像度とリフレッシュレート Returns int2 実際に設定された解像度 TryGetAccelerationEvent(int, out GcAccelerationEvent) 前回のフレーム処理以降に検出した 加速度イベントの取得を試みます public bool TryGetAccelerationEvent(int i, out GcAccelerationEvent e) Parameters i int イベントインデックス（0 から AccelerationEventCount-1 までの連番） e GcAccelerationEvent イベント Returns bool ポインターイベントを取得できたかどうか TryGetAccelerationEventAll(out ReadOnlySpan<GcAccelerationEvent>) 前回のフレーム処理以降に検出した 加速度イベントの取得を試みます public bool TryGetAccelerationEventAll(out ReadOnlySpan<GcAccelerationEvent> events) Parameters events ReadOnlySpan<GcAccelerationEvent> イベント配列 Returns bool 1つ以上の加速度イベントがあったかどうか TryGetActor(in int, out GcActor?) シーンに登録されているアクターを 1つだけ取得します public bool TryGetActor(in int i, out GcActor? actor) Parameters i int 取得するアクターのインデックス（0以上GetActorCount()未満） actor GcActor 取得できたアクター Returns bool 取得できたかどうか TryGetActorAll<T>(out ReadOnlySpan<T>) シーンに登録されているアクターのうち、指定した型のものを取得します public bool TryGetActorAll<T>(out ReadOnlySpan<T> actors) where T : GcActor Parameters actors ReadOnlySpan<T> 取得したアクターの一覧 Returns bool 1つ以上 取得できたかどうか Type Parameters T 取得するアクターの型 TryGetActor<T>(in int, out T?) シーンに登録されているアクターを 1つだけ取得します public bool TryGetActor<T>(in int i, out T? actor) where T : GcActor Parameters i int 取得するアクターのインデックス（0以上GetActorCount<T>()未満） actor T 取得できたアクター Returns bool 取得できたかどうか Type Parameters T 取得するアクターの型 TryGetCameraImage(out GcCameraDevice?) カメラ（外部入力映像）の取得を試みます public bool TryGetCameraImage(out GcCameraDevice? camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 取得できたかどうか TryGetCameraImage(in string, out GcCameraDevice?) デバイス名を指定して、カメラ（外部入力映像）の取得を試みます public bool TryGetCameraImage(in string deviceName, out GcCameraDevice? camera) Parameters deviceName string デバイス名 camera GcCameraDevice カメラ（外部入力映像） Returns bool 取得できたかどうか TryGetCameraImageAll(out ReadOnlySpan<GcCameraDevice>) 全ての認識可能なカメラ（外部入力映像）の取得を試みます public bool TryGetCameraImageAll(out ReadOnlySpan<GcCameraDevice> devices) Parameters devices ReadOnlySpan<GcCameraDevice> カメラ（外部入力映像）の一覧 Returns bool 1つ以上 取得できたかどうか TryGetCameraImageRotation(in GcCameraDevice, out float) 指定されたカメラ（外部入力映像）の回転角度取得を試みます public bool TryGetCameraImageRotation(in GcCameraDevice camera, out float degree) Parameters camera GcCameraDevice カメラ（外部入力映像） degree float 回転角度 Returns bool 取得できたかどうか TryGetCameraImageSize(in GcCameraDevice, out int2) 指定されたカメラ（外部入力映像）の解像度取得を試みます public bool TryGetCameraImageSize(in GcCameraDevice camera, out int2 resolution) Parameters camera GcCameraDevice カメラ（外部入力映像） resolution int2 カメラ（外部入力映像）の解像度 Returns bool 取得できたかどうか Remarks テクスチャーが未生成の場合は、取得に失敗します テクスチャーを生成するには、PlayCameraImage(in GcCameraDevice, in GcResolution, out int2) もしくは GetOrCreateCameraTexture(in GcCameraDevice, in GcResolution) 関数を呼び出してください TryGetGeolocationEvent(out GcGeolocationEvent) 前回のフレーム処理以降にあった 位置情報イベントの取得を試みます public bool TryGetGeolocationEvent(out GcGeolocationEvent data) Parameters data GcGeolocationEvent Returns bool 前回のフレーム処理以降に 位置情報イベントがあったかどうか TryGetKeyEvent(in Key, out GcKeyEvent) 指定されたキーのキーイベントがあれば取得します public bool TryGetKeyEvent(in Key key, out GcKeyEvent e) Parameters key Key キー e GcKeyEvent キーイベント Returns bool 取得できたかどうか TryGetKeyEventAll(in GcKeyEventPhase, out ReadOnlySpan<GcKeyEvent>) 前回のフレーム処理以降に更新された 指定された状態のキーイベント全てを取得します public bool TryGetKeyEventAll(in GcKeyEventPhase phase, out ReadOnlySpan<GcKeyEvent> events) Parameters phase GcKeyEventPhase キーイベント状態 events ReadOnlySpan<GcKeyEvent> キーイベントの一覧 Returns bool 要素数が1以上かどうか TryGetKeyEventAll(out ReadOnlySpan<GcKeyEvent>) 前回のフレーム処理以降に更新された キーイベント全てを取得します public bool TryGetKeyEventAll(out ReadOnlySpan<GcKeyEvent> events) Parameters events ReadOnlySpan<GcKeyEvent> キーイベントの一覧 Returns bool 要素数が1以上かどうか TryGetKeyTrace(in Key, out GcKeyTrace) 指定されたキーの軌跡があれば取得します public bool TryGetKeyTrace(in Key key, out GcKeyTrace trace) Parameters key Key キー trace GcKeyTrace キーの軌跡 Returns bool 取得できたかどうか TryGetKeyTraceAll(in GcKeyEventPhase, out ReadOnlySpan<GcKeyTrace>) 前回のフレーム処理以降に更新された キーの軌跡全てを取得します public bool TryGetKeyTraceAll(in GcKeyEventPhase phase, out ReadOnlySpan<GcKeyTrace> traces) Parameters phase GcKeyEventPhase キーイベント状態 traces ReadOnlySpan<GcKeyTrace> キーの軌跡の一覧 Returns bool 要素数が1以上かどうか TryGetKeyTraceAll(out ReadOnlySpan<GcKeyTrace>) 前回のフレーム処理以降に更新された キーの軌跡全てを取得します public bool TryGetKeyTraceAll(out ReadOnlySpan<GcKeyTrace> traces) Parameters traces ReadOnlySpan<GcKeyTrace> キーの軌跡の一覧 Returns bool 要素数が1以上かどうか TryGetOnlineImage(in string, out GcAvailability, out Texture2D?) オンライン画像リソースの取得を試みます public bool TryGetOnlineImage(in string url, out GcAvailability availability, out Texture2D? texture) Parameters url string リソースURL availability GcAvailability texture Texture2D 画像リソース。戻り値がReady以外だとNull Returns bool オンラインリソースの可用性 TryGetOnlineImageSize(in string, out int2) オンライン画像リソースの寸法を取得します public bool TryGetOnlineImageSize(in string url, out int2 size) Parameters url string リソースURL size int2 オンライン画像リソースの寸法 Returns bool オンラインリソースを取得できたかどうか TryGetOnlineSound(in string, out GcAvailability, out AudioClip?) オンライン音声リソースの取得を試みます public bool TryGetOnlineSound(in string url, out GcAvailability availability, out AudioClip? clip) Parameters url string リソースURL availability GcAvailability clip AudioClip 音声リソース。戻り値がReady以外だとNull Returns bool オンラインリソースの可用性 TryGetOnlineSound(in string, in AudioType, out GcAvailability, out AudioClip?) オンライン音声リソースの取得を試みます public bool TryGetOnlineSound(in string url, in AudioType type, out GcAvailability availability, out AudioClip? clip) Parameters url string リソースURL type AudioType 音声リソースの形式 availability GcAvailability clip AudioClip 音声リソース。戻り値がReady以外だとNull Returns bool オンラインリソースの可用性 TryGetOnlineText(in string, out GcAvailability, out string?) オンラインテキストの取得を試みます public bool TryGetOnlineText(in string url, out GcAvailability availability, out string? str) Parameters url string リソースURL availability GcAvailability str string Returns bool オンラインリソースの可用性 TryGetPointerEvent(in GcPointerEventPhase, in int, out GcPointerEvent) 前回のフレーム処理以降に検出した ポインターイベントのうち、1つを取得します public bool TryGetPointerEvent(in GcPointerEventPhase phase, in int i, out GcPointerEvent e) Parameters phase GcPointerEventPhase イベント状態 i int イベントインデックス（イベントIDではない） e GcPointerEvent イベント Returns bool 取得できたかどうか TryGetPointerEvent(in int, out GcPointerEvent) 前回のフレーム処理以降に検出した ポインターイベントのうち、1つを取得します public bool TryGetPointerEvent(in int i, out GcPointerEvent e) Parameters i int イベントインデックス（0 から PointerCount-1 までの連番。イベントIDではない） e GcPointerEvent イベント Returns bool 取得できたかどうか TryGetPointerEventAll(in GcPointerEventPhase, out ReadOnlySpan<GcPointerEvent>) 前回のフレーム処理以降に検出した 指定された状態のポインターイベント全てを取得します public bool TryGetPointerEventAll(in GcPointerEventPhase phase, out ReadOnlySpan<GcPointerEvent> events) Parameters phase GcPointerEventPhase イベント状態 events ReadOnlySpan<GcPointerEvent> イベントの一覧 Returns bool 1つ以上 取得できたかどうか TryGetPointerEventAll(out ReadOnlySpan<GcPointerEvent>) 前回のフレーム処理以降に検出した ポインターイベント全てを取得します public bool TryGetPointerEventAll(out ReadOnlySpan<GcPointerEvent> events) Parameters events ReadOnlySpan<GcPointerEvent> イベントの一覧 Returns bool 1つ以上 取得できたかどうか TryGetPointerTapPoint(in int, out float2) 前回のフレーム処理以降に検出した タップポイントのうち、1つを取得します public bool TryGetPointerTapPoint(in int i, out float2 point) Parameters i int タップインデックス point float2 タップポイント Returns bool 取得できたかどうか TryGetPointerTapPointAll(out ReadOnlySpan<float2>) 前回のフレーム処理以降に検出した タップポイント全てを取得します public bool TryGetPointerTapPointAll(out ReadOnlySpan<float2> points) Parameters points ReadOnlySpan<float2> タップポイントの一覧 Returns bool 1つ以上 取得できたかどうか TryGetPointerTrace(in GcPointerEventPhase, in int, out GcPointerTrace) 現在有効なポインターのうち、1つの軌跡を取得します public bool TryGetPointerTrace(in GcPointerEventPhase phase, in int i, out GcPointerTrace trace) Parameters phase GcPointerEventPhase イベント状態 i int イベントインデックス（イベントIDではない） trace GcPointerTrace 軌跡 Returns bool 取得できたかどうか Remarks phase に指定できる値は Hold または End のみです TryGetPointerTrace(in int, out GcPointerTrace) 現在有効なポインターのうち、1つの軌跡を取得します public bool TryGetPointerTrace(in int i, out GcPointerTrace history) Parameters i int イベントインデックス（0 から PointerCount-1 までの連番。イベントIDではない） history GcPointerTrace Returns bool 取得できたかどうか TryGetPointerTraceAll(in GcPointerEventPhase, out ReadOnlySpan<GcPointerTrace>) 前回のフレーム処理以降に検出した 指定された状態のポインターの軌跡全てを取得します public bool TryGetPointerTraceAll(in GcPointerEventPhase phase, out ReadOnlySpan<GcPointerTrace> traces) Parameters phase GcPointerEventPhase traces ReadOnlySpan<GcPointerTrace> 軌跡の一覧 Returns bool 1つ以上 取得できたかどうか Remarks phase に指定できる値は Hold または End のみです TryGetPointerTraceAll(out ReadOnlySpan<GcPointerTrace>) 前回のフレーム処理以降に検出した ポインターの軌跡全てを取得します public bool TryGetPointerTraceAll(out ReadOnlySpan<GcPointerTrace> traces) Parameters traces ReadOnlySpan<GcPointerTrace> 軌跡の一覧 Returns bool 1つ以上 取得できたかどうか TryGetScreenKeyboardArea(out GcAABB) スクリーンキーボードの表示位置を取得します public bool TryGetScreenKeyboardArea(out GcAABB area) Parameters area GcAABB 表示位置（キャンバス座標系） Returns bool 取得できたかどうか Remarks 表示中のみ取得できます 表示直後のアニメーション中は取得できません Android OSでは取得できません TryLoad(in string, out int) ローカルストレージに保存された値を取り出します public bool TryLoad(in string key, out int value) Parameters key string キー value int 取り出した値 Returns bool 取り出せたかどうか TryLoad(in string, out float) ローカルストレージに保存された値を取り出します public bool TryLoad(in string key, out float value) Parameters key string キー value float 取り出した値 Returns bool 取り出せたかどうか TryLoad(in string, out string?) ローカルストレージに保存された値を取り出します public bool TryLoad(in string key, out string? value) Parameters key string キー value string 取り出した値 Returns bool 取り出せたかどうか TryRemoveActor(in GcActor) 指定したアクターをシーンから登録解除します public bool TryRemoveActor(in GcActor actor) Parameters actor GcActor 登録解除するアクター Returns bool 登録解除できたかどうか UnpauseSound(GcSoundTrack) 指定された音声トラックのサウンドを一時停止していた場合、再生を再開します public void UnpauseSound(GcSoundTrack track = GcSoundTrack.BGM1) Parameters track GcSoundTrack 対象の音声トラック Remarks BGMトラック以外では常に無視されます UnregisterScene(in GcScene) 指定したシーンをシーン一覧から削除します public void UnregisterScene(in GcScene scene) Parameters scene GcScene 削除するシーン Remarks もし指定したシーンが現在有効なシーンだった場合、フレームの最後にシーンの離脱処理が走ります UnregisterScene<T>() 指定したシーンをシーン一覧から削除します public void UnregisterScene<T>() where T : GcScene Type Parameters T 削除するシーンの型 Remarks もし指定したシーンが現在有効なシーンだった場合、フレームの最後にシーンの離脱処理が走ります UpdateCameraDevice() カメラ（外部入力映像）の一覧を更新します public int UpdateCameraDevice() Returns int 更新後の 認識可能なカメラ（外部入力映像）の数"
  },
  "api/GameCanvas.GcRect.html": {
    "href": "api/GameCanvas.GcRect.html",
    "title": "Struct GcRect | GameCanvas",
    "keywords": "Struct GcRect Namespace GameCanvas Assembly GameCanvas.dll public struct GcRect : IPrimitive<GcRect>, IEquatable<GcRect> Implements IPrimitive<GcRect> IEquatable<GcRect> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods GcRectExtensions.Degree(in GcRect) Constructors GcRect(in float, in float, in float, in float, in float) コンストラクタ public GcRect(in float x, in float y, in float width, in float height, in float radian = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 radian float 回転（弧度法） GcRect(in float2, in float, in float, in float) コンストラクタ public GcRect(in float2 position, in float width, in float height, in float radian = 0) Parameters position float2 位置 width float 横幅 height float 縦幅 radian float 回転（弧度法） GcRect(in float2, in float2, in float) コンストラクタ public GcRect(in float2 position, in float2 size, in float radian = 0) Parameters position float2 位置 size float2 大きさ radian float 回転（弧度法） GcRect(in Rect, in float) コンストラクタ public GcRect(in Rect rect, in float radian = 0) Parameters rect Rect 矩形 radian float 回転（弧度法） Fields Position 位置 public float2 Position Field Value float2 Radian 回転（弧度法） public float Radian Field Value float Size 大きさ public float2 Size Field Value float2 Methods Equals(GcRect) public readonly bool Equals(GcRect other) Parameters other GcRect Returns bool Equals(object) public override readonly bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int ToString() public override readonly string ToString() Returns string Operators operator ==(GcRect, GcRect) public static bool operator ==(GcRect lh, GcRect rh) Parameters lh GcRect rh GcRect Returns bool explicit operator GcRect(Rect) public static explicit operator GcRect(Rect rect) Parameters rect Rect Returns GcRect operator !=(GcRect, GcRect) public static bool operator !=(GcRect lh, GcRect rh) Parameters lh GcRect rh GcRect Returns bool"
  },
  "api/GameCanvas.GcRectExtensions.html": {
    "href": "api/GameCanvas.GcRectExtensions.html",
    "title": "Class GcRectExtensions | GameCanvas",
    "keywords": "Class GcRectExtensions Namespace GameCanvas Assembly GameCanvas.dll GcRect 拡張クラス public static class GcRectExtensions Inheritance object GcRectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Degree(in GcRect) 傾き（弧度法） public static float Degree(this in GcRect self) Parameters self GcRect Returns float"
  },
  "api/GameCanvas.GcResolution.html": {
    "href": "api/GameCanvas.GcResolution.html",
    "title": "Struct GcResolution | GameCanvas",
    "keywords": "Struct GcResolution Namespace GameCanvas Assembly GameCanvas.dll 解像度とリフレッシュレート public readonly struct GcResolution : IEquatable<GcResolution> Implements IEquatable<GcResolution> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GcResolution(int, int, in RefreshRate) コンストラクタ public GcResolution(int width, int height, in RefreshRate refreshRate) Parameters width int height int refreshRate RefreshRate GcResolution(in int2, in RefreshRate) コンストラクタ public GcResolution(in int2 size, in RefreshRate refreshRate) Parameters size int2 refreshRate RefreshRate Fields RefreshRate リフレッシュレート（1秒間の更新回数） public readonly RefreshRate RefreshRate Field Value RefreshRate Size 解像度 public readonly int2 Size Field Value int2 Properties Height 縦幅 public int Height { get; } Property Value int Width 横幅 public int Width { get; } Property Value int Methods Equals(GcResolution) public bool Equals(GcResolution other) Parameters other GcResolution Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcResolution, GcResolution) public static bool operator ==(GcResolution lh, GcResolution rh) Parameters lh GcResolution rh GcResolution Returns bool explicit operator Resolution(GcResolution) public static explicit operator Resolution(GcResolution src) Parameters src GcResolution Returns Resolution explicit operator GcResolution(Resolution) public static explicit operator GcResolution(Resolution src) Parameters src Resolution Returns GcResolution operator !=(GcResolution, GcResolution) public static bool operator !=(GcResolution lh, GcResolution rh) Parameters lh GcResolution rh GcResolution Returns bool"
  },
  "api/GameCanvas.GcRuntimePlatform.html": {
    "href": "api/GameCanvas.GcRuntimePlatform.html",
    "title": "Enum GcRuntimePlatform | GameCanvas",
    "keywords": "Enum GcRuntimePlatform Namespace GameCanvas Assembly GameCanvas.dll 実行時プラットフォーム [Serializable] public enum GcRuntimePlatform Fields Android = 1 Unknown = 0 WebGL = 3 iOS = 2"
  },
  "api/GameCanvas.GcScene.html": {
    "href": "api/GameCanvas.GcScene.html",
    "title": "Class GcScene | GameCanvas",
    "keywords": "Class GcScene Namespace GameCanvas Assembly GameCanvas.dll シーン基底 public abstract class GcScene : IScene, ISceneManagement Inheritance object GcScene Implements IScene ISceneManagement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties gc protected static GcProxy gc { get; } Property Value GcProxy Methods AddActor(in GcActor) 指定したアクターをシーンに登録します public void AddActor(in GcActor actor) Parameters actor GcActor 登録するアクター CreateActor<T>() 指定したアクターを生成し、シーンに登録します public T CreateActor<T>() where T : GcActor, new() Returns T 登録したアクター Type Parameters T 生成・登録するアクターの型 DrawScene() シーンの描画処理 public virtual void DrawScene() Remarks 毎フレーム（計算より後に）GameCanvasにより自動的に呼び出されます EnterScene(object?) シーンの開始処理 public virtual void EnterScene(object? state) Parameters state object ChangeScene<T>(object?)を通じて渡される任意の値。未設定の場合はnull Remarks シーン遷移時にGameCanvasにより自動的に呼び出されます GetActorCount() シーンに登録されているアクターの総数を取得します public int GetActorCount() Returns int アクターの数 GetActorCount<T>() シーンに登録されているアクターのうち、指定した型のものが幾つあるか取得します public int GetActorCount<T>() where T : GcActor Returns int アクターの数 Type Parameters T 取得するアクターの型 LeaveScene() シーンの終了処理 public virtual void LeaveScene() Remarks シーン遷移時にGameCanvasにより自動的に呼び出されます PauseScene() シーンの中断処理 public virtual void PauseScene() Remarks アプリが一時停止する直前にGameCanvasにより自動的に呼び出されます RemoveActorAll() シーンに登録されているすべてのアクターを登録解除します public void RemoveActorAll() ResumeScene() シーンの再開処理 public virtual void ResumeScene() Remarks アプリが再開する直前にGameCanvasにより自動的に呼び出されます TryGetActor(in int, out GcActor?) シーンに登録されているアクターを 1つだけ取得します public bool TryGetActor(in int i, out GcActor? actor) Parameters i int 取得するアクターのインデックス（0以上GetActorCount()未満） actor GcActor 取得できたアクター Returns bool 取得できたかどうか TryGetActorAll<T>(out ReadOnlySpan<T>) シーンに登録されているアクターのうち、指定した型のものを取得します public bool TryGetActorAll<T>(out ReadOnlySpan<T> actors) where T : GcActor Parameters actors ReadOnlySpan<T> 取得したアクターの一覧 Returns bool 1つ以上 取得できたかどうか Type Parameters T 取得するアクターの型 TryGetActor<T>(in int, out T?) シーンに登録されているアクターを 1つだけ取得します public bool TryGetActor<T>(in int i, out T? actor) where T : GcActor Parameters i int 取得するアクターのインデックス（0以上GetActorCount<T>()未満） actor T 取得できたアクター Returns bool 取得できたかどうか Type Parameters T 取得するアクターの型 TryRemoveActor(in GcActor) 指定したアクターをシーンから登録解除します public bool TryRemoveActor(in GcActor actor) Parameters actor GcActor 登録解除するアクター Returns bool 登録解除できたかどうか UpdateScene() シーンの計算処理 public virtual void UpdateScene() Remarks 毎フレーム（描画より前に）GameCanvasにより自動的に呼び出されます"
  },
  "api/GameCanvas.GcSound.html": {
    "href": "api/GameCanvas.GcSound.html",
    "title": "Struct GcSound | GameCanvas",
    "keywords": "Struct GcSound Namespace GameCanvas Assembly GameCanvas.dll public readonly struct GcSound : IEquatable<GcSound> Implements IEquatable<GcSound> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Invalid public bool Invalid { get; } Property Value bool Methods Equals(GcSound) public bool Equals(GcSound other) Parameters other GcSound Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcSound, GcSound) public static bool operator ==(GcSound lhs, GcSound rhs) Parameters lhs GcSound rhs GcSound Returns bool operator !=(GcSound, GcSound) public static bool operator !=(GcSound lhs, GcSound rhs) Parameters lhs GcSound rhs GcSound Returns bool"
  },
  "api/GameCanvas.GcSoundTrack.html": {
    "href": "api/GameCanvas.GcSoundTrack.html",
    "title": "Enum GcSoundTrack | GameCanvas",
    "keywords": "Enum GcSoundTrack Namespace GameCanvas Assembly GameCanvas.dll 音声トラック public enum GcSoundTrack : byte Fields BGM1 = 0 BGM1トラック BGM2 = 1 BGM2トラック BGM3 = 2 BGM3トラック Master = 255 マスタートラック SE = 3 SEトラック"
  },
  "api/GameCanvas.GcStyle.html": {
    "href": "api/GameCanvas.GcStyle.html",
    "title": "Struct GcStyle | GameCanvas",
    "keywords": "Struct GcStyle Namespace GameCanvas Assembly GameCanvas.dll スタイル（スタック可能な描画設定群） public struct GcStyle : IEquatable<GcStyle> Implements IEquatable<GcStyle> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CircleResolution public int CircleResolution Field Value int Color public Color Color Field Value Color CornerRadius public float CornerRadius Field Value float Default public static readonly GcStyle Default Field Value GcStyle FontSize public int FontSize Field Value int LineCap public GcLineCap LineCap Field Value GcLineCap LineWidth public float LineWidth Field Value float RectAnchor public GcAnchor RectAnchor Field Value GcAnchor StringAnchor public GcAnchor StringAnchor Field Value GcAnchor Methods Equals(GcStyle) public readonly bool Equals(GcStyle other) Parameters other GcStyle Returns bool Equals(object) public override readonly bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int"
  },
  "api/GameCanvas.GcSweepResult.html": {
    "href": "api/GameCanvas.GcSweepResult.html",
    "title": "Struct GcSweepResult | GameCanvas",
    "keywords": "Struct GcSweepResult Namespace GameCanvas Assembly GameCanvas.dll 衝突情報 public readonly struct GcSweepResult : IEquatable<GcSweepResult> Implements IEquatable<GcSweepResult> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ForwardVector 進行ベクトル（SweepTest関数のdelta引数に与えられた値） public readonly float2 ForwardVector Field Value float2 HitNormal 衝突点の法線を表す単位ベクトル public readonly float2 HitNormal Field Value float2 HitPoint 衝突点 public readonly float2 HitPoint Field Value float2 PositionOnHit 衝突時（めり込む直前）のオブジェクト座標 public readonly float2 PositionOnHit Field Value float2 SweepRatioOnHit 移動量に対して、めり込む直前までの移動量の割合 public readonly float SweepRatioOnHit Field Value float Remarks 初期位置で既にめり込んでいた場合、0よりも小さい値になります VectorToHit 初期位置から衝突点（めり込む直前）までの移動量ベクトル public readonly float2 VectorToHit Field Value float2 Remarks 初期位置で既にめり込んでいた場合、ForwardVector * SweepRatioOnHit と異なる値になります Methods CalcReflect(out float2, out float2, in float) 反射を考慮した移動後の座標を計算します public void CalcReflect(out float2 dir, out float2 pos, in float coefficient = 1) Parameters dir float2 反射方向を表す単位ベクトル pos float2 反射を考慮した移動後の座標 coefficient float 反射係数 CalcReflectDir() 反射方向を計算します public float2 CalcReflectDir() Returns float2 反射方向を表す単位ベクトル CalcReflectPoint(in float) 反射を考慮した移動後の座標を計算します public float2 CalcReflectPoint(in float coefficient = 1) Parameters coefficient float 反射係数 Returns float2 反射を考慮した移動後の座標 CalcWallScratch(out float2, out float2) 壁ずりを考慮した移動後の座標を計算します public void CalcWallScratch(out float2 dir, out float2 pos) Parameters dir float2 壁ずり方向を表す単位ベクトル pos float2 壁ずりを考慮した移動後の座標 CalcWallScratchDir() 壁ずり方向を計算します public float2 CalcWallScratchDir() Returns float2 壁ずり方向を表す単位ベクトル CalcWallScratchPoint() 壁ずりを考慮した移動後の座標を計算します public float2 CalcWallScratchPoint() Returns float2 壁ずりを考慮した移動後の座標 Equals(GcSweepResult) public bool Equals(GcSweepResult other) Parameters other GcSweepResult Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcSweepResult, GcSweepResult) public static bool operator ==(GcSweepResult lh, GcSweepResult rh) Parameters lh GcSweepResult rh GcSweepResult Returns bool operator !=(GcSweepResult, GcSweepResult) public static bool operator !=(GcSweepResult lh, GcSweepResult rh) Parameters lh GcSweepResult rh GcSweepResult Returns bool"
  },
  "api/GameCanvas.GcTapSettings.html": {
    "href": "api/GameCanvas.GcTapSettings.html",
    "title": "Struct GcTapSettings | GameCanvas",
    "keywords": "Struct GcTapSettings Namespace GameCanvas Assembly GameCanvas.dll タップ感度の設定 public struct GcTapSettings : IEquatable<GcTapSettings> Implements IEquatable<GcTapSettings> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GcTapSettings(in float, in float) public GcTapSettings(in float maxDistance, in float maxDuration) Parameters maxDistance float maxDuration float Fields Default public static readonly GcTapSettings Default Field Value GcTapSettings MaxDistance public float MaxDistance Field Value float MaxDuration public float MaxDuration Field Value float Methods Equals(GcTapSettings) public readonly bool Equals(GcTapSettings other) Parameters other GcTapSettings Returns bool Equals(object) public override readonly bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int ToString() public override readonly string ToString() Returns string"
  },
  "api/GameCanvas.GcText.html": {
    "href": "api/GameCanvas.GcText.html",
    "title": "Struct GcText | GameCanvas",
    "keywords": "Struct GcText Namespace GameCanvas Assembly GameCanvas.dll public readonly struct GcText : IEquatable<GcText> Implements IEquatable<GcText> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Invalid public bool Invalid { get; } Property Value bool Methods Equals(GcText) public bool Equals(GcText other) Parameters other GcText Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(GcText, GcText) public static bool operator ==(GcText lhs, GcText rhs) Parameters lhs GcText rhs GcText Returns bool operator !=(GcText, GcText) public static bool operator !=(GcText lhs, GcText rhs) Parameters lhs GcText rhs GcText Returns bool"
  },
  "api/GameCanvas.GcUtil.html": {
    "href": "api/GameCanvas.GcUtil.html",
    "title": "Class GcUtil | GameCanvas",
    "keywords": "Class GcUtil Namespace GameCanvas Assembly GameCanvas.dll public static class GcUtil Inheritance object GcUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Memcpy<T>(in NativeList<T>, NativeList<T>) public static void Memcpy<T>(in NativeList<T> from, NativeList<T> to) where T : unmanaged Parameters from NativeList<T> to NativeList<T> Type Parameters T Swap<T>(ref T, ref T) public static void Swap<T>(ref T a, ref T b) Parameters a T b T Type Parameters T"
  },
  "api/GameCanvas.IActor.html": {
    "href": "api/GameCanvas.IActor.html",
    "title": "Interface IActor | GameCanvas",
    "keywords": "Interface IActor Namespace GameCanvas Assembly GameCanvas.dll public interface IActor Properties Priority アクターの処理優先度 int Priority { get; set; } Property Value int Remarks 初期値は0（無指定） アクターは、シーン内でこの値が小さい順に処理が回ってきます 同じ値だった場合は、シーンに登録した順序で実行されます 負の値を設定した場合は、そのシーンの処理よりも前に実行されます Methods AfterDraw() アクターの描画後処理 void AfterDraw() Remarks 毎フレーム（描画より後に）GameCanvasにより自動的に呼び出されます Draw() アクターの描画処理 void Draw() Remarks 毎フレーム（計算より後に）GameCanvasにより自動的に呼び出されます Update() アクターの計算処理 void Update() Remarks 毎フレーム（描画より前に）GameCanvasにより自動的に呼び出されます"
  },
  "api/GameCanvas.IEngine.html": {
    "href": "api/GameCanvas.IEngine.html",
    "title": "Interface IEngine | GameCanvas",
    "keywords": "Interface IEngine Namespace GameCanvas Assembly GameCanvas.dll public interface IEngine : IDisposable Inherited Members IDisposable.Dispose() Methods OnAfterDraw() void OnAfterDraw() OnBeforeUpdate(in DateTimeOffset) void OnBeforeUpdate(in DateTimeOffset now) Parameters now DateTimeOffset"
  },
  "api/GameCanvas.IGameCanvas.html": {
    "href": "api/GameCanvas.IGameCanvas.html",
    "title": "Interface IGameCanvas | GameCanvas",
    "keywords": "Interface IGameCanvas Namespace GameCanvas Assembly GameCanvas.dll public interface IGameCanvas : IGraphicsEx, IGraphics, ISoundEx, ISound, INetworkEx, INetwork, ISceneManagementEx, ISceneManagement, ITimeEx, ITime, IPhysicsEx, IPhysics, IStorageEx, IStorage, IMathEx, IMath, IInputPointerEx, IInputPointer, IInputKeyEx, IInputKey, IInputAccelerationEx, IInputAcceleration, IInputGeolocationEx, IInputGeolocation, IInputCameraEx, IInputCamera Inherited Members IGraphicsEx.CanvasAABB IGraphicsEx.CanvasCenter IGraphicsEx.CanvasHeight IGraphicsEx.CanvasResolution IGraphicsEx.CanvasWidth IGraphicsEx.ColorAqua IGraphicsEx.ColorBlack IGraphicsEx.ColorBlue IGraphicsEx.ColorCyan IGraphicsEx.ColorGray IGraphicsEx.ColorGreen IGraphicsEx.ColorPurple IGraphicsEx.ColorRed IGraphicsEx.ColorWhite IGraphicsEx.ColorYellow IGraphicsEx.DeviceScreenHeight IGraphicsEx.DeviceScreenWidth IGraphicsEx.ChangeBorderColor(in float, in float, in float) IGraphicsEx.ChangeCanvasSize(in int, in int) IGraphicsEx.DrawCircle(in float, in float, in float) IGraphicsEx.DrawCircle(in float2, in float) IGraphicsEx.DrawImage(in GcImage, in float, in float, float) IGraphicsEx.DrawImage(in GcImage, in float, in float, in float, in float, float) IGraphicsEx.DrawLine(in float2, in float2) IGraphicsEx.DrawLine(in float, in float, in float, in float) IGraphicsEx.DrawRect(in float, in float, in float, in float, float) IGraphicsEx.DrawRect(in float2, in float2, float) IGraphicsEx.DrawRoundedRect(in float, in float, in float, in float, float) IGraphicsEx.DrawRoundedRect(in float, in float, in float, in float, float, float) IGraphicsEx.DrawRoundedRect(in float2, in float2, float) IGraphicsEx.DrawRoundedRect(in float2, in float2, float, float) IGraphicsEx.DrawString(in string, in float, in float, float) IGraphicsEx.DrawString(in string, in float, in float, in float, in float, float) IGraphicsEx.DrawTexture(in Texture, in float, in float, in float, in float, float) IGraphicsEx.FillCircle(in float, in float, in float) IGraphicsEx.FillCircle(in float2, in float) IGraphicsEx.FillRect(in float, in float, in float, in float, float) IGraphicsEx.FillRect(in float2, in float2, float) IGraphicsEx.FillRoundedRect(in float, in float, in float, in float, float) IGraphicsEx.FillRoundedRect(in float, in float, in float, in float, float, float) IGraphicsEx.FillRoundedRect(in float2, in float2, float) IGraphicsEx.FillRoundedRect(in float2, in float2, float, float) IGraphicsEx.GetImageHeight(in GcImage) IGraphicsEx.GetImageSize(in GcImage) IGraphicsEx.GetImageWidth(in GcImage) IGraphicsEx.RotateCoordinate(in float, in float, in float) IGraphicsEx.ScaleCoordinate(in float, in float) IGraphicsEx.SetBackgroundColor(in Color) IGraphicsEx.SetBackgroundColor(in float, in float, in float) IGraphicsEx.SetColor(in float, in float, in float, float) IGraphicsEx.SetColor(in byte, in byte, in byte, byte) IGraphicsEx.SetColor(in Color) IGraphicsEx.SetColor(in Color, in float) IGraphicsEx.SetCoordinate(in float2x3) IGraphicsEx.SetFont(in GcFont) IGraphicsEx.SetFontSize(in int) IGraphicsEx.SetLineCap(in GcLineCap) IGraphicsEx.SetLineWidth(in float) IGraphicsEx.SetRectAnchor(in GcAnchor) IGraphicsEx.SetStringAnchor(in GcAnchor) IGraphicsEx.SetStyle(in GcStyle) IGraphicsEx.TranslateCoordinate(in float, in float) IGraphics.BackgroundColor IGraphics.BorderColor IGraphics.CanvasSize IGraphics.CircleResolution IGraphics.Color IGraphics.CoordinateScope IGraphics.CornerRadius IGraphics.CurrentCoordinate IGraphics.CurrentStyle IGraphics.DeviceScreenSize IGraphics.Font IGraphics.FontSize IGraphics.LineCap IGraphics.LineWidth IGraphics.RectAnchor IGraphics.StringAnchor IGraphics.StyleScope IGraphics.CalcStringHeight(in string) IGraphics.CalcStringSize(in string) IGraphics.CalcStringWidth(in string) IGraphics.CanvasToScreenPoint(in float2, out float2) IGraphics.CanvasToScreenPoint(in float2, out int2) IGraphics.ChangeBorderColor(in Color) IGraphics.ChangeCanvasSize(in int2) IGraphics.ClearCoordinate() IGraphics.ClearScreen() IGraphics.ClearStyle() IGraphics.DrawCircle() IGraphics.DrawCircle(in GcCircle) IGraphics.DrawImage(in GcImage) IGraphics.DrawImage(in GcImage, in float2, float) IGraphics.DrawImage(in GcImage, in GcRect) IGraphics.DrawLine() IGraphics.DrawLine(in GcLine) IGraphics.DrawRect() IGraphics.DrawRect(in GcRect) IGraphics.DrawRoundedRect() IGraphics.DrawRoundedRect(in GcRect) IGraphics.DrawRoundedRect(in GcRect, float) IGraphics.DrawString(in string) IGraphics.DrawString(in string, in float2, float) IGraphics.DrawString(in string, in GcRect) IGraphics.DrawTexture(in Texture) IGraphics.DrawTexture(in Texture, in float2, float) IGraphics.DrawTexture(in Texture, in GcRect) IGraphics.DrawTexture(in Texture, in float2x3) IGraphics.FillCircle() IGraphics.FillCircle(in GcCircle) IGraphics.FillRect() IGraphics.FillRect(in GcRect) IGraphics.FillRoundedRect() IGraphics.FillRoundedRect(in GcRect) IGraphics.FillRoundedRect(in GcRect, float) IGraphics.PopCoordinate() IGraphics.PopStyle() IGraphics.PushCoordinate() IGraphics.PushStyle() IGraphics.RebuildFontTexture() IGraphics.RotateCoordinate(in float) IGraphics.RotateCoordinate(in float, in float2) IGraphics.ScaleCoordinate(in float2) IGraphics.ScreenToCanvasPoint(in float2, out float2) IGraphics.ScreenToCanvasPoint(in float2, out int2) IGraphics.TranslateCoordinate(in float2) ISoundEx.GetSoundVolume(GcSoundTrack) ISoundEx.PlaySE(in GcSound) ISoundEx.PlaySE(in AudioClip) ISoundEx.SetSoundVolume(in float, GcSoundTrack) ISound.ClearSound() ISound.GetSoundLevel(GcSoundTrack) ISound.IsPlayingSound(GcSoundTrack) ISound.PauseSound(GcSoundTrack) ISound.PlaySound(in GcSound, GcSoundTrack, bool) ISound.PlaySound(in AudioClip, GcSoundTrack, bool) ISound.SetSoundLevel(in float, GcSoundTrack) ISound.StopSound(GcSoundTrack) ISound.UnpauseSound(GcSoundTrack) INetworkEx.DrawOnlineImage(in string) INetworkEx.DrawOnlineImage(in string, in float2, float) INetworkEx.DrawOnlineImage(in string, in float, in float, float) INetworkEx.DrawOnlineImage(in string, in GcRect) INetworkEx.DrawOnlineImage(in string, in float, in float, in float, in float, float) INetworkEx.GetOnlineImageHeight(in string) INetworkEx.GetOnlineImageWidth(in string) INetwork.ClearDownloadCache(in string) INetwork.ClearDownloadCacheAll() INetwork.TryGetOnlineImage(in string, out GcAvailability, out Texture2D) INetwork.TryGetOnlineImageSize(in string, out int2) INetwork.TryGetOnlineSound(in string, out GcAvailability, out AudioClip) INetwork.TryGetOnlineSound(in string, in AudioType, out GcAvailability, out AudioClip) INetwork.TryGetOnlineText(in string, out GcAvailability, out string) ISceneManagementEx.ChangeScene<T>(object) ISceneManagementEx.GetActor() ISceneManagementEx.GetActor<T>() ISceneManagementEx.GetActorList<T>() ISceneManagementEx.RegisterScene<T>() ISceneManagementEx.RegisterScene(in GcScene) ISceneManagementEx.UnregisterScene<T>() ISceneManagementEx.UnregisterScene(in GcScene) ISceneManagement.AddActor(in GcActor) ISceneManagement.CreateActor<T>() ISceneManagement.GetActorCount() ISceneManagement.GetActorCount<T>() ISceneManagement.RemoveActorAll() ISceneManagement.TryGetActor(in int, out GcActor) ISceneManagement.TryGetActor<T>(in int, out T) ISceneManagement.TryGetActorAll<T>(out ReadOnlySpan<T>) ISceneManagement.TryRemoveActor(in GcActor) ITimeEx.CurrentTimeDay ITimeEx.CurrentTimeDayOfWeek ITimeEx.CurrentTimeHour ITimeEx.CurrentTimeMillisecond ITimeEx.CurrentTimeMinute ITimeEx.CurrentTimeMonth ITimeEx.CurrentTimeSecond ITimeEx.CurrentTimeYear ITime.CurrentFrame ITime.CurrentTime ITime.CurrentTimestamp ITime.NowTime ITime.TargetFrameInterval ITime.TargetFrameRate ITime.TimeSincePrevFrame ITime.TimeSinceStartup ITime.VSyncEnabled ITime.SetFrameInterval(in double, bool) ITime.SetFrameRate(in int, bool) IPhysics.CrossTest(in GcLine, in GcLine) IPhysics.CrossTest(in GcLine, in GcLine, out float2) IPhysics.HitTest(in GcAABB, in GcAABB) IPhysics.HitTest(in GcAABB, in float2) IPhysics.HitTest(in GcCircle, in GcCircle) IPhysics.HitTest(in GcCircle, in float2) IPhysics.SweepTest(in GcAABB, in float2, in float2, out GcSweepResult) IPhysics.SweepTest(in GcAABB, in GcAABB, in float2, out GcSweepResult) IStorage.EraseSavedDataAll() IStorage.Save(in string, float?) IStorage.Save(in string, int?) IStorage.Save(in string, string) IStorage.SaveScreenshotAsync(Action<string>) IStorage.TryLoad(in string, out float) IStorage.TryLoad(in string, out int) IStorage.TryLoad(in string, out string) IMathEx.Atan2(in float, in float) IMath.Abs(in float) IMath.Abs(in int) IMath.AlmostSame(in float, in float) IMath.AlmostZero(in float) IMath.Atan2(in float2) IMath.Clamp(in float, in float, in float) IMath.Cos(in float) IMath.Cross(in float2, in float2) IMath.Dot(in float2, in float2) IMath.Max(in float, in float) IMath.Min(in float, in float) IMath.Random() IMath.Random(in float, in float) IMath.Random(in int, in int) IMath.Repeat(in float, in float) IMath.RotateVector(in float2, in float) IMath.Round(in float) IMath.Round(in double) IMath.GetRandomState() IMath.SetRandomSeed(in uint) IMath.SetRandomSeedByIndex(in uint) IMath.Sin(in float) IMath.Sqrt(in float) IInputPointerEx.LastPointerFrame IInputPointerEx.LastPointerPoint IInputPointerEx.LastPointerTime IInputPointerEx.LastPointerX IInputPointerEx.LastPointerY IInputPointerEx.IsTapped() IInputPointerEx.IsTapped(out float2) IInputPointerEx.IsTapped(out float, out float) IInputPointerEx.IsTapped(in GcAABB, out float2) IInputPointerEx.IsTapped(in float, in float, in float, in float, out float, out float) IInputPointerEx.IsTouchBegan() IInputPointerEx.IsTouchBegan(out float2) IInputPointerEx.IsTouchBegan(out GcPointerEvent) IInputPointerEx.IsTouchBegan(out float, out float) IInputPointerEx.IsTouchBegan(in GcAABB, out float2) IInputPointerEx.IsTouchBegan(in float, in float, in float, in float, out float, out float) IInputPointerEx.IsTouched() IInputPointerEx.IsTouched(out float2) IInputPointerEx.IsTouched(out GcPointerEvent) IInputPointerEx.IsTouched(out GcPointerTrace) IInputPointerEx.IsTouched(out float, out float) IInputPointerEx.IsTouched(in GcAABB, out float2) IInputPointerEx.IsTouched(in float, in float, in float, in float, out float, out float) IInputPointerEx.IsTouchEnded() IInputPointerEx.IsTouchEnded(out float2) IInputPointerEx.IsTouchEnded(out GcPointerEvent) IInputPointerEx.IsTouchEnded(out GcPointerTrace) IInputPointerEx.IsTouchEnded(out float, out float) IInputPointerEx.IsTouchEnded(in GcAABB, out float2) IInputPointerEx.IsTouchEnded(in float, in float, in float, in float, out float, out float) IInputPointer.IsTouchPressureSupported IInputPointer.IsTouchSupported IInputPointer.LastPointerEvent IInputPointer.PointerBeginCount IInputPointer.PointerCount IInputPointer.PointerEndCount IInputPointer.PointerTapCount IInputPointer.TapSettings IInputPointer.TryGetPointerEvent(in int, out GcPointerEvent) IInputPointer.TryGetPointerEvent(in GcPointerEventPhase, in int, out GcPointerEvent) IInputPointer.TryGetPointerEventAll(out ReadOnlySpan<GcPointerEvent>) IInputPointer.TryGetPointerEventAll(in GcPointerEventPhase, out ReadOnlySpan<GcPointerEvent>) IInputPointer.TryGetPointerTapPoint(in int, out float2) IInputPointer.TryGetPointerTapPointAll(out ReadOnlySpan<float2>) IInputPointer.TryGetPointerTrace(in int, out GcPointerTrace) IInputPointer.TryGetPointerTrace(in GcPointerEventPhase, in int, out GcPointerTrace) IInputPointer.TryGetPointerTraceAll(out ReadOnlySpan<GcPointerTrace>) IInputPointer.TryGetPointerTraceAll(in GcPointerEventPhase, out ReadOnlySpan<GcPointerTrace>) IInputKeyEx.IsAnyKey IInputKeyEx.IsAnyKeyDown IInputKeyEx.IsAnyKeyHold IInputKeyEx.IsAnyKeyPress IInputKeyEx.IsAnyKeyUp IInputKeyEx.KeyEscape IInputKeyEx.KeyPressCount IInputKeyEx.GetKeyPressDuration(in Key) IInputKeyEx.GetKeyPressFrameCount(in Key) IInputKeyEx.IsKeyHold(in Key, out GcKeyTrace) IInputKeyEx.IsKeyUp(in Key, out GcKeyTrace) IInputKey.IsScreenKeyboardSupported IInputKey.IsScreenKeyboardVisible IInputKey.KeyDownCount IInputKey.KeyHoldCount IInputKey.KeyUpCount IInputKey.HideScreenKeyboard() IInputKey.IsKeyDown(in Key) IInputKey.IsKeyHold(in Key) IInputKey.IsKeyPress(in Key) IInputKey.IsKeyUp(in Key) IInputKey.ShowScreenKeyboard() IInputKey.TryGetKeyEvent(in Key, out GcKeyEvent) IInputKey.TryGetKeyEventAll(out ReadOnlySpan<GcKeyEvent>) IInputKey.TryGetKeyEventAll(in GcKeyEventPhase, out ReadOnlySpan<GcKeyEvent>) IInputKey.TryGetKeyTrace(in Key, out GcKeyTrace) IInputKey.TryGetKeyTraceAll(out ReadOnlySpan<GcKeyTrace>) IInputKey.TryGetKeyTraceAll(in GcKeyEventPhase, out ReadOnlySpan<GcKeyTrace>) IInputKey.TryGetScreenKeyboardArea(out GcAABB) IInputAcceleration.AccelerationEventCount IInputAcceleration.AccelerationEvents IInputAcceleration.AccelerometerSamplingRate IInputAcceleration.DidUpdateAccelerationThisFrame IInputAcceleration.IsAccelerometerEnabled IInputAcceleration.IsAccelerometerSupported IInputAcceleration.LastAccelerationEvent IInputAcceleration.TryGetAccelerationEvent(int, out GcAccelerationEvent) IInputAcceleration.TryGetAccelerationEventAll(out ReadOnlySpan<GcAccelerationEvent>) IInputGeolocationEx.IsGeolocationRunning IInputGeolocation.DidUpdateGeolocationThisFrame IInputGeolocation.GeolocationStatus IInputGeolocation.HasUserAuthorizedPermissionGeolocation IInputGeolocation.LastGeolocationEvent IInputGeolocation.RequestUserAuthorizedPermissionGeolocationAsync(in Action<bool>) IInputGeolocation.StartGeolocationService(float, float) IInputGeolocation.StopGeolocationService() IInputGeolocation.TryGetGeolocationEvent(out GcGeolocationEvent) IInputCameraEx.DrawCameraImage(in GcCameraDevice, bool) IInputCameraEx.DrawCameraImage(in GcCameraDevice, in float2, float, bool) IInputCameraEx.DrawCameraImage(in GcCameraDevice, in float, in float, float, bool) IInputCameraEx.DrawCameraImage(in GcCameraDevice, in GcRect, bool) IInputCameraEx.DrawCameraImage(in GcCameraDevice, in float, in float, in float, in float, float, bool) IInputCameraEx.GetPrimaryCameraResolution(in GcCameraDevice) IInputCameraEx.PlayCameraImage(in GcCameraDevice) IInputCameraEx.PlayCameraImage(in GcCameraDevice, out int2) IInputCamera.CameraDeviceCount IInputCamera.CameraDevices IInputCamera.HasUserAuthorizedPermissionCamera IInputCamera.DidUpdateCameraImageThisFrame(in GcCameraDevice) IInputCamera.FocusCameraImage(in GcCameraDevice, in float2?) IInputCamera.GetOrCreateCameraTexture(in GcCameraDevice, in GcResolution) IInputCamera.IsFlippedCameraImage(in GcCameraDevice) IInputCamera.IsPlayingCameraImage(in GcCameraDevice) IInputCamera.PauseCameraImage(in GcCameraDevice) IInputCamera.PlayCameraImage(in GcCameraDevice, in GcResolution, out int2) IInputCamera.RequestUserAuthorizedPermissionCameraAsync(in Action<bool>) IInputCamera.StopCameraImage(in GcCameraDevice) IInputCamera.TryChangeCameraImageResolution(in GcCameraDevice, in GcResolution) IInputCamera.TryGetCameraImage(out GcCameraDevice) IInputCamera.TryGetCameraImage(in string, out GcCameraDevice) IInputCamera.TryGetCameraImageAll(out ReadOnlySpan<GcCameraDevice>) IInputCamera.TryGetCameraImageRotation(in GcCameraDevice, out float) IInputCamera.TryGetCameraImageSize(in GcCameraDevice, out int2) IInputCamera.UpdateCameraDevice()"
  },
  "api/GameCanvas.IGraphics.html": {
    "href": "api/GameCanvas.IGraphics.html",
    "title": "Interface IGraphics | GameCanvas",
    "keywords": "Interface IGraphics Namespace GameCanvas Assembly GameCanvas.dll public interface IGraphics Properties BackgroundColor 背景色 Color BackgroundColor { get; set; } Property Value Color BorderColor キャンバス外に表示される帯の色 Color BorderColor { get; } Property Value Color Remarks ChangeBorderColor(in Color) を呼び出すことで変更できます CanvasSize キャンバス解像度 int2 CanvasSize { get; } Property Value int2 Remarks ChangeCanvasSize(in int2) を呼び出すことで変更できます CircleResolution 円の解像度 int CircleResolution { get; set; } Property Value int Color 描画色 Color Color { get; set; } Property Value Color CoordinateScope PushCoordinate() と PopCoordinate() が自動的に呼び出されるスコープ CoordianteScope CoordinateScope { get; } Property Value CoordianteScope CornerRadius 角丸の半径 float CornerRadius { get; set; } Property Value float CurrentCoordinate 現在の座標系（変換行列） float2x3 CurrentCoordinate { get; set; } Property Value float2x3 CurrentStyle 現在のスタイル GcStyle CurrentStyle { get; set; } Property Value GcStyle DeviceScreenSize 端末スクリーン解像度 int2 DeviceScreenSize { get; } Property Value int2 Font フォント種別 GcFont Font { get; set; } Property Value GcFont FontSize フォントサイズ int FontSize { get; set; } Property Value int LineCap 描線の端点の形状 GcLineCap LineCap { get; set; } Property Value GcLineCap LineWidth 描線の太さ float LineWidth { get; set; } Property Value float RectAnchor 矩形のアンカー位置 GcAnchor RectAnchor { get; set; } Property Value GcAnchor StringAnchor 文字列のアンカー位置 GcAnchor StringAnchor { get; set; } Property Value GcAnchor StyleScope PushStyle() と PopStyle() が自動的に呼び出されるスコープ StyleScope StyleScope { get; } Property Value StyleScope Methods CalcStringHeight(in string) 文字列の縦幅を計算します float CalcStringHeight(in string str) Parameters str string 文字列 Returns float 縦幅 CalcStringSize(in string) 文字列のサイズを計算します float2 CalcStringSize(in string str) Parameters str string 文字列 Returns float2 サイズ CalcStringWidth(in string) 文字列の横幅を計算します float CalcStringWidth(in string str) Parameters str string 文字列 Returns float 横幅 CanvasToScreenPoint(in float2, out float2) キャンバス座標を端末スクリーン座標に変換します void CanvasToScreenPoint(in float2 canvas, out float2 screen) Parameters canvas float2 変換元 キャンバス座標 screen float2 変換後 端末スクリーン座標 CanvasToScreenPoint(in float2, out int2) キャンバス座標を端末スクリーン座標に変換します void CanvasToScreenPoint(in float2 canvas, out int2 screen) Parameters canvas float2 変換元 キャンバス座標 screen int2 変換後 端末スクリーン座標 ChangeBorderColor(in Color) キャンバス外の帯の色を変更します void ChangeBorderColor(in Color color) Parameters color Color 新しい帯の色 Remarks 既存キャンバスの描画内容は全て破棄されます ChangeCanvasSize(in int2) キャンバス解像度を変更します void ChangeCanvasSize(in int2 size) Parameters size int2 新しいキャンバス解像度 Remarks 初期値は 720x1280 です ディスプレイ解像度と縦横比が異なる場合は、上下もしくは左右に帯がつきます 既存キャンバスの描画内容は全て破棄されます ClearCoordinate() CurrentCoordinate をリセットします void ClearCoordinate() ClearScreen() キャンバスを BackgroundColor で塗りつぶします void ClearScreen() ClearStyle() CurrentStyle をリセットします void ClearStyle() DrawCircle() 中抜きの円を描画します void DrawCircle() DrawCircle(in GcCircle) 中抜きの円を描画します void DrawCircle(in GcCircle circle) Parameters circle GcCircle 円 DrawImage(in GcImage) 画像を描画します void DrawImage(in GcImage image) Parameters image GcImage 描画する画像 DrawImage(in GcImage, in GcRect) 画像を拡縮して描画します void DrawImage(in GcImage image, in GcRect rect) Parameters image GcImage 描画する画像 rect GcRect 画像をフィッティングする矩形領域 DrawImage(in GcImage, in float2, float) 画像を描画します void DrawImage(in GcImage image, in float2 position, float degree = 0) Parameters image GcImage 描画する画像 position float2 位置 degree float 回転（度数法） DrawLine() 線を描画します void DrawLine() DrawLine(in GcLine) 線を描画します void DrawLine(in GcLine line) Parameters line GcLine 線 DrawRect() 矩形を線で描画します void DrawRect() DrawRect(in GcRect) 矩形を線で描画します void DrawRect(in GcRect rect) Parameters rect GcRect 矩形 DrawRoundedRect() 角丸矩形を線で描画します void DrawRoundedRect() DrawRoundedRect(in GcRect) 角丸矩形を線で描画します void DrawRoundedRect(in GcRect rect) Parameters rect GcRect 二等辺三角形が収まる矩形 DrawRoundedRect(in GcRect, float) 角丸矩形を線で描画します void DrawRoundedRect(in GcRect rect, float cornerRadius) Parameters rect GcRect 二等辺三角形が収まる矩形 cornerRadius float 角丸の半径 DrawString(in string) 文字列を描画します void DrawString(in string str) Parameters str string 描画する文字列 DrawString(in string, in GcRect) 文字列を拡縮して描画します void DrawString(in string str, in GcRect rect) Parameters str string 描画する文字列 rect GcRect 文字列をフィッティングする矩形領域 DrawString(in string, in float2, float) 文字列を描画します void DrawString(in string str, in float2 position, float degree = 0) Parameters str string 描画する文字列 position float2 位置 degree float 回転（度数法） DrawTexture(in Texture) テクスチャーを描画します void DrawTexture(in Texture texture) Parameters texture Texture 描画するテクスチャー DrawTexture(in Texture, in GcRect) テクスチャーを拡縮して描画します void DrawTexture(in Texture texture, in GcRect rect) Parameters texture Texture 描画するテクスチャー rect GcRect テクスチャーをフィッティングする矩形領域 DrawTexture(in Texture, in float2, float) テクスチャーを描画します void DrawTexture(in Texture texture, in float2 position, float degree = 0) Parameters texture Texture 描画するテクスチャー position float2 位置 degree float 回転（度数法） DrawTexture(in Texture, in float2x3) テクスチャーを変形して描画します void DrawTexture(in Texture texture, in float2x3 matrix) Parameters texture Texture 描画するテクスチャー matrix float2x3 アフィン変換行列 FillCircle() 円を塗りで描画します void FillCircle() FillCircle(in GcCircle) 円を塗りで描画します void FillCircle(in GcCircle circle) Parameters circle GcCircle 円 FillRect() 矩形を塗りで描画します void FillRect() FillRect(in GcRect) 矩形を塗りで描画します void FillRect(in GcRect rect) Parameters rect GcRect 矩形 FillRoundedRect() 角丸矩形を塗りで描画します void FillRoundedRect() FillRoundedRect(in GcRect) 角丸矩形を塗りで描画します void FillRoundedRect(in GcRect rect) Parameters rect GcRect 二等辺三角形が収まる矩形 FillRoundedRect(in GcRect, float) 角丸矩形を塗りで描画します void FillRoundedRect(in GcRect rect, float cornerRadius) Parameters rect GcRect 二等辺三角形が収まる矩形 cornerRadius float 角丸の半径 PopCoordinate() スタックから座標系（変換行列）を取り出し CurrentCoordinate に上書きします void PopCoordinate() PopStyle() スタックから描画スタイルを取り出し CurrentStyle に上書きします void PopStyle() PushCoordinate() CurrentCoordinate をスタックに保存します void PushCoordinate() PushStyle() CurrentStyle をスタックに保存します void PushStyle() RebuildFontTexture() フォントテクスチャ―を再生成します void RebuildFontTexture() Remarks テキスト描画が乱れた場合にのみ呼び出すことを想定しています 実際に再生成が行われるのは、この関数を呼び出した次のフレームの冒頭です RotateCoordinate(in float) 座標系（変換行列）を回転させます void RotateCoordinate(in float degree) Parameters degree float 回転量（度数法） RotateCoordinate(in float, in float2) 座標系（変換行列）を指定した座標を中心に回転させます void RotateCoordinate(in float degree, in float2 origin) Parameters degree float 回転量（度数法） origin float2 回転中心 ScaleCoordinate(in float2) 座標系（変換行列）を拡縮させます void ScaleCoordinate(in float2 scaling) Parameters scaling float2 拡縮率 ScreenToCanvasPoint(in float2, out float2) 端末スクリーン座標をキャンバス座標に変換します void ScreenToCanvasPoint(in float2 screen, out float2 canvas) Parameters screen float2 変換元 端末スクリーン座標 canvas float2 変換後 キャンバス座標 ScreenToCanvasPoint(in float2, out int2) 端末スクリーン座標をキャンバス座標に変換します void ScreenToCanvasPoint(in float2 screen, out int2 canvas) Parameters screen float2 変換元 端末スクリーン座標 canvas int2 変換後 キャンバス座標 TranslateCoordinate(in float2) 座標系（変換行列）を平行移動させます void TranslateCoordinate(in float2 translation) Parameters translation float2 移動量"
  },
  "api/GameCanvas.IGraphicsEx.html": {
    "href": "api/GameCanvas.IGraphicsEx.html",
    "title": "Interface IGraphicsEx | GameCanvas",
    "keywords": "Interface IGraphicsEx Namespace GameCanvas Assembly GameCanvas.dll public interface IGraphicsEx : IGraphics Inherited Members IGraphics.BackgroundColor IGraphics.BorderColor IGraphics.CanvasSize IGraphics.CircleResolution IGraphics.Color IGraphics.CoordinateScope IGraphics.CornerRadius IGraphics.CurrentCoordinate IGraphics.CurrentStyle IGraphics.DeviceScreenSize IGraphics.Font IGraphics.FontSize IGraphics.LineCap IGraphics.LineWidth IGraphics.RectAnchor IGraphics.StringAnchor IGraphics.StyleScope IGraphics.CalcStringHeight(in string) IGraphics.CalcStringSize(in string) IGraphics.CalcStringWidth(in string) IGraphics.CanvasToScreenPoint(in float2, out float2) IGraphics.CanvasToScreenPoint(in float2, out int2) IGraphics.ChangeBorderColor(in Color) IGraphics.ChangeCanvasSize(in int2) IGraphics.ClearCoordinate() IGraphics.ClearScreen() IGraphics.ClearStyle() IGraphics.DrawCircle() IGraphics.DrawCircle(in GcCircle) IGraphics.DrawImage(in GcImage) IGraphics.DrawImage(in GcImage, in float2, float) IGraphics.DrawImage(in GcImage, in GcRect) IGraphics.DrawLine() IGraphics.DrawLine(in GcLine) IGraphics.DrawRect() IGraphics.DrawRect(in GcRect) IGraphics.DrawRoundedRect() IGraphics.DrawRoundedRect(in GcRect) IGraphics.DrawRoundedRect(in GcRect, float) IGraphics.DrawString(in string) IGraphics.DrawString(in string, in float2, float) IGraphics.DrawString(in string, in GcRect) IGraphics.DrawTexture(in Texture) IGraphics.DrawTexture(in Texture, in float2, float) IGraphics.DrawTexture(in Texture, in GcRect) IGraphics.DrawTexture(in Texture, in float2x3) IGraphics.FillCircle() IGraphics.FillCircle(in GcCircle) IGraphics.FillRect() IGraphics.FillRect(in GcRect) IGraphics.FillRoundedRect() IGraphics.FillRoundedRect(in GcRect) IGraphics.FillRoundedRect(in GcRect, float) IGraphics.PopCoordinate() IGraphics.PopStyle() IGraphics.PushCoordinate() IGraphics.PushStyle() IGraphics.RebuildFontTexture() IGraphics.RotateCoordinate(in float) IGraphics.RotateCoordinate(in float, in float2) IGraphics.ScaleCoordinate(in float2) IGraphics.ScreenToCanvasPoint(in float2, out float2) IGraphics.ScreenToCanvasPoint(in float2, out int2) IGraphics.TranslateCoordinate(in float2) Properties CanvasAABB キャンバスのAABB GcAABB CanvasAABB { get; } Property Value GcAABB CanvasCenter キャンバスの中心座標 float2 CanvasCenter { get; } Property Value float2 CanvasHeight キャンバスの縦幅 int CanvasHeight { get; } Property Value int CanvasResolution キャンバスの解像度とリフレッシュレート GcResolution CanvasResolution { get; } Property Value GcResolution CanvasWidth キャンバスの横幅 int CanvasWidth { get; } Property Value int ColorAqua 水色 Color ColorAqua { get; } Property Value Color ColorBlack 黒色 Color ColorBlack { get; } Property Value Color ColorBlue 青色 Color ColorBlue { get; } Property Value Color ColorCyan シアン Color ColorCyan { get; } Property Value Color ColorGray 灰色 Color ColorGray { get; } Property Value Color ColorGreen 緑色 Color ColorGreen { get; } Property Value Color ColorPurple 紫色 Color ColorPurple { get; } Property Value Color ColorRed 赤色 Color ColorRed { get; } Property Value Color ColorWhite 白色 Color ColorWhite { get; } Property Value Color ColorYellow 黄色 Color ColorYellow { get; } Property Value Color DeviceScreenHeight 端末スクリーンの縦幅 int DeviceScreenHeight { get; } Property Value int DeviceScreenWidth 端末スクリーンの横幅 int DeviceScreenWidth { get; } Property Value int Methods ChangeBorderColor(in float, in float, in float) 帯の色を変更します void ChangeBorderColor(in float r, in float g, in float b) Parameters r float 帯の色の赤成分 g float 帯の色の緑成分 b float 帯の色の青成分 ChangeCanvasSize(in int, in int) キャンバス解像度を指定します void ChangeCanvasSize(in int width, in int height) Parameters width int 横幅 height int 縦幅 Remarks 初期値は 720x1280 です ディスプレイ解像度と縦横比が異なる場合は、上下もしくは左右に帯がつきます DrawCircle(in float, in float, in float) 円を線で描画します void DrawCircle(in float x, in float y, in float radius) Parameters x float 中心のX座標 y float 中心のY座標 radius float 半径 DrawCircle(in float2, in float) 円を線で描画します void DrawCircle(in float2 position, in float radius) Parameters position float2 中心の座標 radius float 半径 DrawImage(in GcImage, in float, in float, float) 画像を描画します void DrawImage(in GcImage image, in float x, in float y, float degree = 0) Parameters image GcImage 描画する画像 x float X座標 y float Y座標 degree float 回転（度数法） DrawImage(in GcImage, in float, in float, in float, in float, float) 画像を拡縮して描画します void DrawImage(in GcImage image, in float x, in float y, in float width, in float height, float degree = 0) Parameters image GcImage 描画する画像 x float X座標 y float Y座標 width float 横幅。画像の横幅がこれになるように拡縮される height float 縦幅。画像の縦幅がこれになるように拡縮される degree float 回転（度数法） DrawLine(in float, in float, in float, in float) 線を描画します void DrawLine(in float x0, in float y0, in float x1, in float y1) Parameters x0 float 始点のX座標 y0 float 始点のY座標 x1 float 終点のX座標 y1 float 終点のY座標 DrawLine(in float2, in float2) 線を描画します void DrawLine(in float2 begin, in float2 end) Parameters begin float2 始点 end float2 終点 DrawRect(in float, in float, in float, in float, float) 矩形を線で描画します void DrawRect(in float x, in float y, in float width, in float height, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 degree float 回転（度数法） DrawRect(in float2, in float2, float) 矩形を線で描画します void DrawRect(in float2 position, in float2 size, float degree = 0) Parameters position float2 位置 size float2 大きさ degree float 回転（度数法） DrawRoundedRect(in float, in float, in float, in float, float) 角丸矩形を線で描画します void DrawRoundedRect(in float x, in float y, in float width, in float height, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 degree float 回転（度数法） DrawRoundedRect(in float, in float, in float, in float, float, float) 角丸矩形を線で描画します void DrawRoundedRect(in float x, in float y, in float width, in float height, float cornerRadius, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 cornerRadius float 角丸の半径 degree float 回転（度数法） DrawRoundedRect(in float2, in float2, float) 角丸矩形を線で描画します void DrawRoundedRect(in float2 position, in float2 size, float degree = 0) Parameters position float2 位置 size float2 大きさ degree float 回転（度数法） DrawRoundedRect(in float2, in float2, float, float) 角丸矩形を線で描画します void DrawRoundedRect(in float2 position, in float2 size, float cornerRadius, float degree = 0) Parameters position float2 位置 size float2 大きさ cornerRadius float 角丸の半径 degree float 回転（度数法） DrawString(in string, in float, in float, float) 文字列を描画します void DrawString(in string str, in float x, in float y, float degree = 0) Parameters str string 描画する文字列 x float X座標 y float Y座標 degree float 回転（度数法） DrawString(in string, in float, in float, in float, in float, float) 文字列を拡縮して描画します void DrawString(in string str, in float x, in float y, in float width, in float height, float degree = 0) Parameters str string 描画する文字列 x float X座標 y float Y座標 width float 横幅。文字列の横幅がこれになるように拡縮される height float 縦幅。文字列の縦幅がこれになるように拡縮される degree float 回転（度数法） DrawTexture(in Texture, in float, in float, in float, in float, float) テクスチャーを拡縮して描画します void DrawTexture(in Texture texture, in float x, in float y, in float width, in float height, float degree = 0) Parameters texture Texture 描画するテクスチャー x float X座標 y float Y座標 width float 横幅。画像の横幅がこれになるように拡縮される height float 縦幅。画像の縦幅がこれになるように拡縮される degree float 回転（度数法） FillCircle(in float, in float, in float) 円を塗りで描画します void FillCircle(in float x, in float y, in float radius) Parameters x float 中心のX座標 y float 中心のY座標 radius float 半径 FillCircle(in float2, in float) 円を塗りで描画します void FillCircle(in float2 position, in float radius) Parameters position float2 中心の座標 radius float 半径 FillRect(in float, in float, in float, in float, float) 矩形を塗りで描画します void FillRect(in float x, in float y, in float width, in float height, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 degree float 回転（度数法） FillRect(in float2, in float2, float) 矩形を塗りで描画します void FillRect(in float2 position, in float2 size, float degree = 0) Parameters position float2 位置 size float2 大きさ degree float 回転（度数法） FillRoundedRect(in float, in float, in float, in float, float) 角丸矩形を塗りで描画します void FillRoundedRect(in float x, in float y, in float width, in float height, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 degree float 回転（度数法） FillRoundedRect(in float, in float, in float, in float, float, float) 角丸矩形を塗りで描画します void FillRoundedRect(in float x, in float y, in float width, in float height, float cornerRadius, float degree = 0) Parameters x float X座標 y float Y座標 width float 横幅 height float 縦幅 cornerRadius float 角丸の半径 degree float 回転（度数法） FillRoundedRect(in float2, in float2, float) 角丸矩形を塗りで描画します void FillRoundedRect(in float2 position, in float2 size, float degree = 0) Parameters position float2 位置 size float2 大きさ degree float 回転（度数法） FillRoundedRect(in float2, in float2, float, float) 角丸矩形を塗りで描画します void FillRoundedRect(in float2 position, in float2 size, float cornerRadius, float degree = 0) Parameters position float2 位置 size float2 大きさ cornerRadius float 角丸の半径 degree float 回転（度数法） GetImageHeight(in GcImage) 画像の縦幅を取得します int GetImageHeight(in GcImage image) Parameters image GcImage 画像 Returns int 縦幅 GetImageSize(in GcImage) 画像のサイズを取得します int2 GetImageSize(in GcImage image) Parameters image GcImage 画像 Returns int2 サイズ GetImageWidth(in GcImage) 画像の横幅を取得します int GetImageWidth(in GcImage image) Parameters image GcImage 画像 Returns int 横幅 RotateCoordinate(in float, in float, in float) 座標系（変換行列）を回転させます void RotateCoordinate(in float degree, in float originX, in float originY) Parameters degree float 回転量（度数法） originX float 回転中心のX座標 originY float 回転中心のY座標 ScaleCoordinate(in float, in float) 座標系（変換行列）を拡縮させます void ScaleCoordinate(in float sx, in float sy) Parameters sx float X軸方向の拡縮率 sy float Y軸方向の拡縮率 SetBackgroundColor(in float, in float, in float) 背景色を指定します void SetBackgroundColor(in float r, in float g, in float b) Parameters r float 背景色の赤成分 g float 背景色の緑成分 b float 背景色の青成分 SetBackgroundColor(in Color) 背景色を指定します void SetBackgroundColor(in Color color) Parameters color Color 背景色 SetColor(in byte, in byte, in byte, byte) 描画色を指定します void SetColor(in byte r, in byte g, in byte b, byte a = 255) Parameters r byte 描画色の赤成分 g byte 描画色の緑成分 b byte 描画色の青成分 a byte 描画色の不透明度 SetColor(in float, in float, in float, float) 描画色を指定します void SetColor(in float r, in float g, in float b, float a = 1) Parameters r float 描画色の赤成分 g float 描画色の緑成分 b float 描画色の青成分 a float 描画色の不透明度 SetColor(in Color) 描画色を指定します void SetColor(in Color color) Parameters color Color 描画色 SetColor(in Color, in float) 描画色を指定します void SetColor(in Color color, in float alpha) Parameters color Color 描画色 alpha float 描画色の不透明度 SetCoordinate(in float2x3) 座標系（変換行列）を指定します void SetCoordinate(in float2x3 matrix) Parameters matrix float2x3 座標系（変換行列） SetFont(in GcFont) フォントを指定します void SetFont(in GcFont font) Parameters font GcFont フォント SetFontSize(in int) フォントサイズを指定します void SetFontSize(in int fontSize) Parameters fontSize int フォントサイズ SetLineCap(in GcLineCap) 描線の端点の形状を指定します void SetLineCap(in GcLineCap lineCap) Parameters lineCap GcLineCap 描線の端点の形状 SetLineWidth(in float) 描線の太さを指定します void SetLineWidth(in float lineWidth) Parameters lineWidth float 描線の太さ SetRectAnchor(in GcAnchor) 矩形や画像のアンカー位置を指定します void SetRectAnchor(in GcAnchor anchor) Parameters anchor GcAnchor アンカー位置 SetStringAnchor(in GcAnchor) 文字列のアンカー位置を指定します void SetStringAnchor(in GcAnchor anchor) Parameters anchor GcAnchor アンカー位置 SetStyle(in GcStyle) スタイルを指定します void SetStyle(in GcStyle style) Parameters style GcStyle TranslateCoordinate(in float, in float) 座標系（変換行列）を平行移動させます void TranslateCoordinate(in float tx, in float ty) Parameters tx float X軸方向の移動量 ty float Y軸方向の移動量"
  },
  "api/GameCanvas.IInputAcceleration.html": {
    "href": "api/GameCanvas.IInputAcceleration.html",
    "title": "Interface IInputAcceleration | GameCanvas",
    "keywords": "Interface IInputAcceleration Namespace GameCanvas Assembly GameCanvas.dll public interface IInputAcceleration Properties AccelerationEventCount 前回のフレーム処理以降に検出した 加速度イベントの数 int AccelerationEventCount { get; } Property Value int AccelerationEvents 前回のフレーム処理以降に検出した 加速度イベントの列挙子 ReadOnlySpan<GcAccelerationEvent> AccelerationEvents { get; } Property Value ReadOnlySpan<GcAccelerationEvent> AccelerometerSamplingRate 加速度計の動作周波数 float AccelerometerSamplingRate { get; set; } Property Value float DidUpdateAccelerationThisFrame 前回のフレーム処理以降に 加速度イベントの更新があったかどうか bool DidUpdateAccelerationThisFrame { get; } Property Value bool IsAccelerometerEnabled 加速度計が現在有効かどうか bool IsAccelerometerEnabled { get; set; } Property Value bool IsAccelerometerSupported 端末が加速度計を搭載しているかどうか bool IsAccelerometerSupported { get; } Property Value bool LastAccelerationEvent 最後に検出した加速度イベント GcAccelerationEvent LastAccelerationEvent { get; } Property Value GcAccelerationEvent Methods TryGetAccelerationEvent(int, out GcAccelerationEvent) 前回のフレーム処理以降に検出した 加速度イベントの取得を試みます bool TryGetAccelerationEvent(int i, out GcAccelerationEvent e) Parameters i int イベントインデックス（0 から AccelerationEventCount-1 までの連番） e GcAccelerationEvent イベント Returns bool ポインターイベントを取得できたかどうか TryGetAccelerationEventAll(out ReadOnlySpan<GcAccelerationEvent>) 前回のフレーム処理以降に検出した 加速度イベントの取得を試みます bool TryGetAccelerationEventAll(out ReadOnlySpan<GcAccelerationEvent> events) Parameters events ReadOnlySpan<GcAccelerationEvent> イベント配列 Returns bool 1つ以上の加速度イベントがあったかどうか"
  },
  "api/GameCanvas.IInputAccelerationEx.html": {
    "href": "api/GameCanvas.IInputAccelerationEx.html",
    "title": "Interface IInputAccelerationEx | GameCanvas",
    "keywords": "Interface IInputAccelerationEx Namespace GameCanvas Assembly GameCanvas.dll public interface IInputAccelerationEx : IInputAcceleration Inherited Members IInputAcceleration.AccelerationEventCount IInputAcceleration.AccelerationEvents IInputAcceleration.AccelerometerSamplingRate IInputAcceleration.DidUpdateAccelerationThisFrame IInputAcceleration.IsAccelerometerEnabled IInputAcceleration.IsAccelerometerSupported IInputAcceleration.LastAccelerationEvent IInputAcceleration.TryGetAccelerationEvent(int, out GcAccelerationEvent) IInputAcceleration.TryGetAccelerationEventAll(out ReadOnlySpan<GcAccelerationEvent>)"
  },
  "api/GameCanvas.IInputCamera.html": {
    "href": "api/GameCanvas.IInputCamera.html",
    "title": "Interface IInputCamera | GameCanvas",
    "keywords": "Interface IInputCamera Namespace GameCanvas Assembly GameCanvas.dll public interface IInputCamera Properties CameraDeviceCount 認識可能なカメラ（外部入力映像）の数 int CameraDeviceCount { get; } Property Value int CameraDevices 全ての認識可能なカメラ（外部入力映像）の一覧 ReadOnlySpan<GcCameraDevice> CameraDevices { get; } Property Value ReadOnlySpan<GcCameraDevice> HasUserAuthorizedPermissionCamera カメラデバイスへのアクセス権限を取得済みかどうか bool HasUserAuthorizedPermissionCamera { get; } Property Value bool Methods DidUpdateCameraImageThisFrame(in GcCameraDevice) 前回のフレーム処理以降に 指定されたカメラ（外部入力映像）テクスチャーに更新があったかどうか bool DidUpdateCameraImageThisFrame(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool テクスチャーに更新があったかどうか FocusCameraImage(in GcCameraDevice, in float2?) カメラ（外部入力映像）の任意の点に焦点をあわせるように要求します void FocusCameraImage(in GcCameraDevice camera, in float2? uv) Parameters camera GcCameraDevice カメラ（外部入力映像） uv float2? 焦点をあわせる位置（左下を原点とする 0.0～1.0 のUV座標系） Remarks このAPIは、対応するカメラデバイスに対して、実機上での実行したときのみ動作します uv引数は、キャンバス座標系ではなく、左下を原点とする 0.0～1.0 のUV座標系を指定します 焦点あわせを解除するには、uv引数に null を渡します GetOrCreateCameraTexture(in GcCameraDevice, in GcResolution) 指定されたカメラ（外部入力映像）のテクスチャーを生成もしくは取得します WebCamTexture? GetOrCreateCameraTexture(in GcCameraDevice camera, in GcResolution request) Parameters camera GcCameraDevice カメラ（外部入力映像） request GcResolution テクスチャーが未生成だった場合に、希望する解像度とリフレッシュレート Returns WebCamTexture テクスチャー Remarks 既にテクスチャーが生成済みの場合は、request引数の値は無視されます 生成後に解像度を変更する場合は TryChangeCameraImageResolution(in GcCameraDevice, in GcResolution) 関数を呼び出してください IsFlippedCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）は上下が反転しているかどうか bool IsFlippedCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 上下が反転しているかどうか IsPlayingCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）の更新が行われているかどうか bool IsPlayingCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 更新が行われているかどうか PauseCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）の更新処理を一時停止します bool PauseCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 停止したかどうか（元から停止していた場合を含まない） PlayCameraImage(in GcCameraDevice, in GcResolution, out int2) 指定されたカメラ（外部入力映像）の更新処理を開始します bool PlayCameraImage(in GcCameraDevice camera, in GcResolution request, out int2 resolution) Parameters camera GcCameraDevice カメラ（外部入力映像） request GcResolution テクスチャーが未生成だった場合に、希望する解像度とリフレッシュレート resolution int2 カメラ（外部入力映像）の解像度 Returns bool 開始したかどうか（元から更新していた場合を含まない） Remarks カメラごとにこのAPIを呼び出すことで、それらを同時に更新することが可能です ただし、同じ名称のカメラは、同時に更新することができません 既にテクスチャーが生成済みの場合は、request引数の値は無視されます 生成後に解像度を変更する場合は TryChangeCameraImageResolution(in GcCameraDevice, in GcResolution) 関数を呼び出してください RequestUserAuthorizedPermissionCameraAsync(in Action<bool>) カメラデバイスへのアクセス権限を要求します void RequestUserAuthorizedPermissionCameraAsync(in Action<bool> callback) Parameters callback Action<bool> 結果を通知するコールバック StopCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）の更新処理を完全に停止します void StopCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） TryChangeCameraImageResolution(in GcCameraDevice, in GcResolution) 指定されたカメラ（外部入力映像）の解像度変更を試みます int2 TryChangeCameraImageResolution(in GcCameraDevice camera, in GcResolution request) Parameters camera GcCameraDevice カメラ（外部入力映像） request GcResolution 希望する解像度とリフレッシュレート Returns int2 実際に設定された解像度 TryGetCameraImage(out GcCameraDevice?) カメラ（外部入力映像）の取得を試みます bool TryGetCameraImage(out GcCameraDevice? camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 取得できたかどうか TryGetCameraImage(in string, out GcCameraDevice?) デバイス名を指定して、カメラ（外部入力映像）の取得を試みます bool TryGetCameraImage(in string deviceName, out GcCameraDevice? camera) Parameters deviceName string デバイス名 camera GcCameraDevice カメラ（外部入力映像） Returns bool 取得できたかどうか TryGetCameraImageAll(out ReadOnlySpan<GcCameraDevice>) 全ての認識可能なカメラ（外部入力映像）の取得を試みます bool TryGetCameraImageAll(out ReadOnlySpan<GcCameraDevice> devices) Parameters devices ReadOnlySpan<GcCameraDevice> カメラ（外部入力映像）の一覧 Returns bool 1つ以上 取得できたかどうか TryGetCameraImageRotation(in GcCameraDevice, out float) 指定されたカメラ（外部入力映像）の回転角度取得を試みます bool TryGetCameraImageRotation(in GcCameraDevice camera, out float degree) Parameters camera GcCameraDevice カメラ（外部入力映像） degree float 回転角度 Returns bool 取得できたかどうか TryGetCameraImageSize(in GcCameraDevice, out int2) 指定されたカメラ（外部入力映像）の解像度取得を試みます bool TryGetCameraImageSize(in GcCameraDevice camera, out int2 resolution) Parameters camera GcCameraDevice カメラ（外部入力映像） resolution int2 カメラ（外部入力映像）の解像度 Returns bool 取得できたかどうか Remarks テクスチャーが未生成の場合は、取得に失敗します テクスチャーを生成するには、PlayCameraImage(in GcCameraDevice, in GcResolution, out int2) もしくは GetOrCreateCameraTexture(in GcCameraDevice, in GcResolution) 関数を呼び出してください UpdateCameraDevice() カメラ（外部入力映像）の一覧を更新します int UpdateCameraDevice() Returns int 更新後の 認識可能なカメラ（外部入力映像）の数"
  },
  "api/GameCanvas.IInputCameraEx.html": {
    "href": "api/GameCanvas.IInputCameraEx.html",
    "title": "Interface IInputCameraEx | GameCanvas",
    "keywords": "Interface IInputCameraEx Namespace GameCanvas Assembly GameCanvas.dll public interface IInputCameraEx : IInputCamera Inherited Members IInputCamera.CameraDeviceCount IInputCamera.CameraDevices IInputCamera.HasUserAuthorizedPermissionCamera IInputCamera.DidUpdateCameraImageThisFrame(in GcCameraDevice) IInputCamera.FocusCameraImage(in GcCameraDevice, in float2?) IInputCamera.GetOrCreateCameraTexture(in GcCameraDevice, in GcResolution) IInputCamera.IsFlippedCameraImage(in GcCameraDevice) IInputCamera.IsPlayingCameraImage(in GcCameraDevice) IInputCamera.PauseCameraImage(in GcCameraDevice) IInputCamera.PlayCameraImage(in GcCameraDevice, in GcResolution, out int2) IInputCamera.RequestUserAuthorizedPermissionCameraAsync(in Action<bool>) IInputCamera.StopCameraImage(in GcCameraDevice) IInputCamera.TryChangeCameraImageResolution(in GcCameraDevice, in GcResolution) IInputCamera.TryGetCameraImage(out GcCameraDevice) IInputCamera.TryGetCameraImage(in string, out GcCameraDevice) IInputCamera.TryGetCameraImageAll(out ReadOnlySpan<GcCameraDevice>) IInputCamera.TryGetCameraImageRotation(in GcCameraDevice, out float) IInputCamera.TryGetCameraImageSize(in GcCameraDevice, out int2) IInputCamera.UpdateCameraDevice() Methods DrawCameraImage(in GcCameraDevice, in GcRect, bool) カメラ（外部入力映像）を拡縮して描画します void DrawCameraImage(in GcCameraDevice camera, in GcRect rect, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） rect GcRect 映像をフィッティングする矩形領域 autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCameraImage(in GcCameraDevice, bool) カメラ（外部入力映像）を描画します void DrawCameraImage(in GcCameraDevice camera, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCameraImage(in GcCameraDevice, in float, in float, float, bool) カメラ（外部入力映像）を描画します void DrawCameraImage(in GcCameraDevice camera, in float x, in float y, float degree = 0, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） x float X座標 y float Y座標 degree float 回転（度数法） autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCameraImage(in GcCameraDevice, in float, in float, in float, in float, float, bool) カメラ（外部入力映像）を拡縮して描画します void DrawCameraImage(in GcCameraDevice camera, in float x, in float y, in float width, in float height, float degree = 0, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） x float X座標 y float Y座標 width float 横幅。映像の横幅がこれになるように拡縮される height float 縦幅。映像の縦幅がこれになるように拡縮される degree float 回転（度数法） autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか DrawCameraImage(in GcCameraDevice, in float2, float, bool) カメラ（外部入力映像）を描画します void DrawCameraImage(in GcCameraDevice camera, in float2 position, float degree = 0, bool autoPlay = true) Parameters camera GcCameraDevice カメラ（外部入力映像） position float2 位置 degree float 回転（度数法） autoPlay bool カメラ（外部入力映像）が停止していた場合、内部でPlayCameraImage(in GcCameraDevice)を呼び出すかどうか GetPrimaryCameraResolution(in GcCameraDevice) 指定されたカメラ（外部入力映像）の推奨解像度を取得します GcResolution GetPrimaryCameraResolution(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns GcResolution 解像度とリフレッシュレート Remarks 推奨解像度を取得できない場合、現在のキャンバス解像度とフレームレートに基づいた適当な値を返します エディタでは常に推奨解像度を取得できません PlayCameraImage(in GcCameraDevice) 指定されたカメラ（外部入力映像）の更新処理を開始します bool PlayCameraImage(in GcCameraDevice camera) Parameters camera GcCameraDevice カメラ（外部入力映像） Returns bool 開始したかどうか（元から更新していた場合を含まない） Remarks カメラごとにこのAPIを呼び出すことで、それらを同時に更新することが可能です ただし、同じ名称のカメラは、同時に更新することができません PlayCameraImage(in GcCameraDevice, out int2) 指定されたカメラ（外部入力映像）の更新処理を開始します bool PlayCameraImage(in GcCameraDevice camera, out int2 resolution) Parameters camera GcCameraDevice カメラ（外部入力映像） resolution int2 カメラ（外部入力映像）の解像度 Returns bool 開始したかどうか（元から更新していた場合を含まない） Remarks カメラごとにこのAPIを呼び出すことで、それらを同時に更新することが可能です ただし、同じ名称のカメラは、同時に更新することができません テクスチャーが未生成だった場合は、内部で勝手に適当な解像度で生成します"
  },
  "api/GameCanvas.IInputGeolocation.html": {
    "href": "api/GameCanvas.IInputGeolocation.html",
    "title": "Interface IInputGeolocation | GameCanvas",
    "keywords": "Interface IInputGeolocation Namespace GameCanvas Assembly GameCanvas.dll public interface IInputGeolocation Properties DidUpdateGeolocationThisFrame 前回のフレーム処理以降に 位置情報イベントの更新があったかどうか bool DidUpdateGeolocationThisFrame { get; } Property Value bool GeolocationStatus 位置情報サービスの状態 LocationServiceStatus GeolocationStatus { get; } Property Value LocationServiceStatus HasUserAuthorizedPermissionGeolocation 位置情報へのアクセス権限を取得済みかどうか bool HasUserAuthorizedPermissionGeolocation { get; } Property Value bool LastGeolocationEvent 最後に取得した位置情報イベント GcGeolocationEvent LastGeolocationEvent { get; } Property Value GcGeolocationEvent Methods RequestUserAuthorizedPermissionGeolocationAsync(in Action<bool>) 位置情報へのアクセス権限を要求します void RequestUserAuthorizedPermissionGeolocationAsync(in Action<bool> callback) Parameters callback Action<bool> 結果を通知するコールバック StartGeolocationService(float, float) 位置情報サービスを起動します void StartGeolocationService(float desiredAccuracy = 10, float updateDistance = 10) Parameters desiredAccuracy float 望ましいサービス精度（メートル単位） updateDistance float 位置情報の更新に必要な最小移動距離（メートル単位） Remarks 位置情報へのアクセス権限がない場合、この処理は失敗します StopGeolocationService() 位置情報サービスを停止します void StopGeolocationService() TryGetGeolocationEvent(out GcGeolocationEvent) 前回のフレーム処理以降にあった 位置情報イベントの取得を試みます bool TryGetGeolocationEvent(out GcGeolocationEvent e) Parameters e GcGeolocationEvent 位置情報イベント Returns bool 前回のフレーム処理以降に 位置情報イベントがあったかどうか"
  },
  "api/GameCanvas.IInputGeolocationEx.html": {
    "href": "api/GameCanvas.IInputGeolocationEx.html",
    "title": "Interface IInputGeolocationEx | GameCanvas",
    "keywords": "Interface IInputGeolocationEx Namespace GameCanvas Assembly GameCanvas.dll public interface IInputGeolocationEx : IInputGeolocation Inherited Members IInputGeolocation.DidUpdateGeolocationThisFrame IInputGeolocation.GeolocationStatus IInputGeolocation.HasUserAuthorizedPermissionGeolocation IInputGeolocation.LastGeolocationEvent IInputGeolocation.RequestUserAuthorizedPermissionGeolocationAsync(in Action<bool>) IInputGeolocation.StartGeolocationService(float, float) IInputGeolocation.StopGeolocationService() IInputGeolocation.TryGetGeolocationEvent(out GcGeolocationEvent) Properties IsGeolocationRunning 位置情報サービスが起動しているかどうか（起動中を含む） bool IsGeolocationRunning { get; } Property Value bool"
  },
  "api/GameCanvas.IInputKey.html": {
    "href": "api/GameCanvas.IInputKey.html",
    "title": "Interface IInputKey | GameCanvas",
    "keywords": "Interface IInputKey Namespace GameCanvas Assembly GameCanvas.dll public interface IInputKey Properties IsScreenKeyboardSupported スクリーンキーボードがサポートされているかどうか bool IsScreenKeyboardSupported { get; } Property Value bool IsScreenKeyboardVisible スクリーンキーボードが表示されているかどうか bool IsScreenKeyboardVisible { get; } Property Value bool KeyDownCount 前回のフレーム処理以降に 押されたキーの数 int KeyDownCount { get; } Property Value int KeyHoldCount 前回のフレームに引き続き 押されているキーの数（押された瞬間を除く） int KeyHoldCount { get; } Property Value int KeyUpCount 前回のフレーム処理以降に 離されたキーの数 int KeyUpCount { get; } Property Value int Methods HideScreenKeyboard() スクリーンキーボードを閉じます void HideScreenKeyboard() IsKeyDown(in Key) 指定されたキーが押されたかどうか bool IsKeyDown(in Key key) Parameters key Key キー Returns bool 押されたかどうか IsKeyHold(in Key) 指定されたキーが押されているかどうか（押された瞬間を除く） bool IsKeyHold(in Key key) Parameters key Key キー Returns bool 押されているかどうか（押された瞬間を除く） IsKeyPress(in Key) 指定されたキーが押されているかどうか（押された瞬間を含む） bool IsKeyPress(in Key key) Parameters key Key キー Returns bool 押されているかどうか（押された瞬間を含む） IsKeyUp(in Key) 指定されたキーが離されたかどうか bool IsKeyUp(in Key key) Parameters key Key キー Returns bool 離されたかどうか ShowScreenKeyboard() スクリーンキーボードを表示します bool ShowScreenKeyboard() Returns bool 表示できたかどうか TryGetKeyEvent(in Key, out GcKeyEvent) 指定されたキーのキーイベントがあれば取得します bool TryGetKeyEvent(in Key key, out GcKeyEvent e) Parameters key Key キー e GcKeyEvent キーイベント Returns bool 取得できたかどうか TryGetKeyEventAll(in GcKeyEventPhase, out ReadOnlySpan<GcKeyEvent>) 前回のフレーム処理以降に更新された 指定された状態のキーイベント全てを取得します bool TryGetKeyEventAll(in GcKeyEventPhase phase, out ReadOnlySpan<GcKeyEvent> events) Parameters phase GcKeyEventPhase キーイベント状態 events ReadOnlySpan<GcKeyEvent> キーイベントの一覧 Returns bool 要素数が1以上かどうか TryGetKeyEventAll(out ReadOnlySpan<GcKeyEvent>) 前回のフレーム処理以降に更新された キーイベント全てを取得します bool TryGetKeyEventAll(out ReadOnlySpan<GcKeyEvent> events) Parameters events ReadOnlySpan<GcKeyEvent> キーイベントの一覧 Returns bool 要素数が1以上かどうか TryGetKeyTrace(in Key, out GcKeyTrace) 指定されたキーの軌跡があれば取得します bool TryGetKeyTrace(in Key key, out GcKeyTrace trace) Parameters key Key キー trace GcKeyTrace キーの軌跡 Returns bool 取得できたかどうか TryGetKeyTraceAll(in GcKeyEventPhase, out ReadOnlySpan<GcKeyTrace>) 前回のフレーム処理以降に更新された キーの軌跡全てを取得します bool TryGetKeyTraceAll(in GcKeyEventPhase phase, out ReadOnlySpan<GcKeyTrace> traces) Parameters phase GcKeyEventPhase キーイベント状態 traces ReadOnlySpan<GcKeyTrace> キーの軌跡の一覧 Returns bool 要素数が1以上かどうか TryGetKeyTraceAll(out ReadOnlySpan<GcKeyTrace>) 前回のフレーム処理以降に更新された キーの軌跡全てを取得します bool TryGetKeyTraceAll(out ReadOnlySpan<GcKeyTrace> traces) Parameters traces ReadOnlySpan<GcKeyTrace> キーの軌跡の一覧 Returns bool 要素数が1以上かどうか TryGetScreenKeyboardArea(out GcAABB) スクリーンキーボードの表示位置を取得します bool TryGetScreenKeyboardArea(out GcAABB area) Parameters area GcAABB 表示位置（キャンバス座標系） Returns bool 取得できたかどうか Remarks 表示中のみ取得できます 表示直後のアニメーション中は取得できません Android OSでは取得できません"
  },
  "api/GameCanvas.IInputKeyEx.html": {
    "href": "api/GameCanvas.IInputKeyEx.html",
    "title": "Interface IInputKeyEx | GameCanvas",
    "keywords": "Interface IInputKeyEx Namespace GameCanvas Assembly GameCanvas.dll public interface IInputKeyEx : IInputKey Inherited Members IInputKey.IsScreenKeyboardSupported IInputKey.IsScreenKeyboardVisible IInputKey.KeyDownCount IInputKey.KeyHoldCount IInputKey.KeyUpCount IInputKey.HideScreenKeyboard() IInputKey.IsKeyDown(in Key) IInputKey.IsKeyHold(in Key) IInputKey.IsKeyPress(in Key) IInputKey.IsKeyUp(in Key) IInputKey.ShowScreenKeyboard() IInputKey.TryGetKeyEvent(in Key, out GcKeyEvent) IInputKey.TryGetKeyEventAll(out ReadOnlySpan<GcKeyEvent>) IInputKey.TryGetKeyEventAll(in GcKeyEventPhase, out ReadOnlySpan<GcKeyEvent>) IInputKey.TryGetKeyTrace(in Key, out GcKeyTrace) IInputKey.TryGetKeyTraceAll(out ReadOnlySpan<GcKeyTrace>) IInputKey.TryGetKeyTraceAll(in GcKeyEventPhase, out ReadOnlySpan<GcKeyTrace>) IInputKey.TryGetScreenKeyboardArea(out GcAABB) Properties IsAnyKey なんらかのキーイベントがあるかどうか bool IsAnyKey { get; } Property Value bool IsAnyKeyDown いずれかのキーが押されたかどうか bool IsAnyKeyDown { get; } Property Value bool IsAnyKeyHold いずれかのキーが押されているかどうか（押された瞬間を除く） bool IsAnyKeyHold { get; } Property Value bool IsAnyKeyPress いずれかのキーが押されているかどうか（押された瞬間を含む） bool IsAnyKeyPress { get; } Property Value bool IsAnyKeyUp いずれかのキーが離されたかどうか bool IsAnyKeyUp { get; } Property Value bool KeyEscape 戻るボタン（Androidのみ） Key KeyEscape { get; } Property Value Key KeyPressCount 前回のフレームに引き続き 押されているキーの数（押された瞬間を含む） int KeyPressCount { get; } Property Value int Methods GetKeyPressDuration(in Key) 指定されたキーが押されている時間（秒） float GetKeyPressDuration(in Key key) Parameters key Key キー Returns float 時間（秒） GetKeyPressFrameCount(in Key) 指定されたキーが押されているフレーム数 int GetKeyPressFrameCount(in Key key) Parameters key Key キー Returns int フレーム数 IsKeyHold(in Key, out GcKeyTrace) 指定されたキーが押されているかどうか（押された瞬間を除く） bool IsKeyHold(in Key key, out GcKeyTrace trace) Parameters key Key キー trace GcKeyTrace キーの軌跡 Returns bool 押されているかどうか（押された瞬間を除く） IsKeyUp(in Key, out GcKeyTrace) 指定されたキーが離されたかどうか bool IsKeyUp(in Key key, out GcKeyTrace trace) Parameters key Key キー trace GcKeyTrace キーの軌跡 Returns bool 離されたかどうか"
  },
  "api/GameCanvas.IInputPointer.html": {
    "href": "api/GameCanvas.IInputPointer.html",
    "title": "Interface IInputPointer | GameCanvas",
    "keywords": "Interface IInputPointer Namespace GameCanvas Assembly GameCanvas.dll public interface IInputPointer Properties IsTouchPressureSupported 実行端末でタッチ圧力がサポートされているかどうか bool IsTouchPressureSupported { get; } Property Value bool IsTouchSupported 実行端末でタッチ操作がサポートされているかどうか bool IsTouchSupported { get; } Property Value bool Remarks Windowsエディタ環境では、タッチ対応デバイスであっても常に偽を返します LastPointerEvent 最後に検出したポインターイベント。過去のフレームも含める GcPointerEvent LastPointerEvent { get; } Property Value GcPointerEvent PointerBeginCount 前回のフレーム処理以降に検出した ポインター開始イベントの数 int PointerBeginCount { get; } Property Value int PointerCount 前回のフレーム処理以降に検出した ポインターイベントの数 int PointerCount { get; } Property Value int PointerEndCount 前回のフレーム処理以降に検出した ポインター終了イベントの数 int PointerEndCount { get; } Property Value int PointerTapCount 前回のフレーム処理以降に検出した タップポイントの数 int PointerTapCount { get; } Property Value int TapSettings タップ感度の設定 GcTapSettings TapSettings { get; set; } Property Value GcTapSettings Methods TryGetPointerEvent(in GcPointerEventPhase, in int, out GcPointerEvent) 前回のフレーム処理以降に検出した ポインターイベントのうち、1つを取得します bool TryGetPointerEvent(in GcPointerEventPhase phase, in int i, out GcPointerEvent e) Parameters phase GcPointerEventPhase イベント状態 i int イベントインデックス（イベントIDではない） e GcPointerEvent イベント Returns bool 取得できたかどうか TryGetPointerEvent(in int, out GcPointerEvent) 前回のフレーム処理以降に検出した ポインターイベントのうち、1つを取得します bool TryGetPointerEvent(in int i, out GcPointerEvent e) Parameters i int イベントインデックス（0 から PointerCount-1 までの連番。イベントIDではない） e GcPointerEvent イベント Returns bool 取得できたかどうか TryGetPointerEventAll(in GcPointerEventPhase, out ReadOnlySpan<GcPointerEvent>) 前回のフレーム処理以降に検出した 指定された状態のポインターイベント全てを取得します bool TryGetPointerEventAll(in GcPointerEventPhase phase, out ReadOnlySpan<GcPointerEvent> events) Parameters phase GcPointerEventPhase イベント状態 events ReadOnlySpan<GcPointerEvent> イベントの一覧 Returns bool 1つ以上 取得できたかどうか TryGetPointerEventAll(out ReadOnlySpan<GcPointerEvent>) 前回のフレーム処理以降に検出した ポインターイベント全てを取得します bool TryGetPointerEventAll(out ReadOnlySpan<GcPointerEvent> events) Parameters events ReadOnlySpan<GcPointerEvent> イベントの一覧 Returns bool 1つ以上 取得できたかどうか TryGetPointerTapPoint(in int, out float2) 前回のフレーム処理以降に検出した タップポイントのうち、1つを取得します bool TryGetPointerTapPoint(in int i, out float2 point) Parameters i int タップインデックス point float2 タップポイント Returns bool 取得できたかどうか TryGetPointerTapPointAll(out ReadOnlySpan<float2>) 前回のフレーム処理以降に検出した タップポイント全てを取得します bool TryGetPointerTapPointAll(out ReadOnlySpan<float2> points) Parameters points ReadOnlySpan<float2> タップポイントの一覧 Returns bool 1つ以上 取得できたかどうか TryGetPointerTrace(in GcPointerEventPhase, in int, out GcPointerTrace) 現在有効なポインターのうち、1つの軌跡を取得します bool TryGetPointerTrace(in GcPointerEventPhase phase, in int i, out GcPointerTrace trace) Parameters phase GcPointerEventPhase イベント状態 i int イベントインデックス（イベントIDではない） trace GcPointerTrace 軌跡 Returns bool 取得できたかどうか Remarks phase に指定できる値は Hold または End のみです TryGetPointerTrace(in int, out GcPointerTrace) 現在有効なポインターのうち、1つの軌跡を取得します bool TryGetPointerTrace(in int i, out GcPointerTrace trace) Parameters i int イベントインデックス（0 から PointerCount-1 までの連番。イベントIDではない） trace GcPointerTrace 軌跡 Returns bool 取得できたかどうか TryGetPointerTraceAll(in GcPointerEventPhase, out ReadOnlySpan<GcPointerTrace>) 前回のフレーム処理以降に検出した 指定された状態のポインターの軌跡全てを取得します bool TryGetPointerTraceAll(in GcPointerEventPhase phase, out ReadOnlySpan<GcPointerTrace> traces) Parameters phase GcPointerEventPhase traces ReadOnlySpan<GcPointerTrace> 軌跡の一覧 Returns bool 1つ以上 取得できたかどうか Remarks phase に指定できる値は Hold または End のみです TryGetPointerTraceAll(out ReadOnlySpan<GcPointerTrace>) 前回のフレーム処理以降に検出した ポインターの軌跡全てを取得します bool TryGetPointerTraceAll(out ReadOnlySpan<GcPointerTrace> traces) Parameters traces ReadOnlySpan<GcPointerTrace> 軌跡の一覧 Returns bool 1つ以上 取得できたかどうか"
  },
  "api/GameCanvas.IInputPointerEx.html": {
    "href": "api/GameCanvas.IInputPointerEx.html",
    "title": "Interface IInputPointerEx | GameCanvas",
    "keywords": "Interface IInputPointerEx Namespace GameCanvas Assembly GameCanvas.dll public interface IInputPointerEx : IInputPointer Inherited Members IInputPointer.IsTouchPressureSupported IInputPointer.IsTouchSupported IInputPointer.LastPointerEvent IInputPointer.PointerBeginCount IInputPointer.PointerCount IInputPointer.PointerEndCount IInputPointer.PointerTapCount IInputPointer.TapSettings IInputPointer.TryGetPointerEvent(in int, out GcPointerEvent) IInputPointer.TryGetPointerEvent(in GcPointerEventPhase, in int, out GcPointerEvent) IInputPointer.TryGetPointerEventAll(out ReadOnlySpan<GcPointerEvent>) IInputPointer.TryGetPointerEventAll(in GcPointerEventPhase, out ReadOnlySpan<GcPointerEvent>) IInputPointer.TryGetPointerTapPoint(in int, out float2) IInputPointer.TryGetPointerTapPointAll(out ReadOnlySpan<float2>) IInputPointer.TryGetPointerTrace(in int, out GcPointerTrace) IInputPointer.TryGetPointerTrace(in GcPointerEventPhase, in int, out GcPointerTrace) IInputPointer.TryGetPointerTraceAll(out ReadOnlySpan<GcPointerTrace>) IInputPointer.TryGetPointerTraceAll(in GcPointerEventPhase, out ReadOnlySpan<GcPointerTrace>) Properties LastPointerFrame 最後に検出したポインターイベントの 検出フレーム番号 int LastPointerFrame { get; } Property Value int LastPointerPoint 最後に検出したポインターイベントの位置 float2 LastPointerPoint { get; } Property Value float2 LastPointerTime 最後に検出したポインターイベントの 検出時間（起動からの経過秒数） float LastPointerTime { get; } Property Value float LastPointerX 最後に検出したポインターイベントの X座標 float LastPointerX { get; } Property Value float LastPointerY 最後に検出したポインターイベントの Y座標 float LastPointerY { get; } Property Value float Methods IsTapped() 前回のフレーム処理以降に タップされたかどうか bool IsTapped() Returns bool タップされたかどうか IsTapped(in GcAABB, out float2) 前回のフレーム処理以降に 指定した領域がタップされたかどうか bool IsTapped(in GcAABB aabb, out float2 point) Parameters aabb GcAABB 領域 point float2 タップ位置 Returns bool 指定した領域がタップされたかどうか IsTapped(out float, out float) 前回のフレーム処理以降に タップされたかどうか bool IsTapped(out float x, out float y) Parameters x float タップ位置 X座標 y float タップ位置 Y座標 Returns bool タップされたかどうか IsTapped(in float, in float, in float, in float, out float, out float) 前回のフレーム処理以降に 指定した領域がタップされたかどうか bool IsTapped(in float x, in float y, in float width, in float height, out float px, out float py) Parameters x float 領域 左上X座標 y float 領域 左上Y座標 width float 領域 横幅 height float 領域 縦幅 px float タップ位置 X座標 py float タップ位置 Y座標 Returns bool 指定した領域がタップされたかどうか IsTapped(out float2) 前回のフレーム処理以降に タップされたかどうか bool IsTapped(out float2 point) Parameters point float2 タップ位置 Returns bool タップされたかどうか IsTouchBegan() 前回のフレーム処理以降に タッチされ始めたかどうか bool IsTouchBegan() Returns bool タッチされ始めたかどうか IsTouchBegan(in GcAABB, out float2) 前回のフレーム処理以降に 指定した領域がタッチされ始めたかどうか bool IsTouchBegan(in GcAABB aabb, out float2 point) Parameters aabb GcAABB 領域 point float2 タッチ位置 Returns bool 指定した領域がタッチされ始めたかどうか IsTouchBegan(out GcPointerEvent) 前回のフレーム処理以降に タッチされ始めたかどうか bool IsTouchBegan(out GcPointerEvent pointer) Parameters pointer GcPointerEvent ポインターイベント Returns bool タッチされ始めたかどうか IsTouchBegan(out float, out float) 前回のフレーム処理以降に タッチされ始めたかどうか bool IsTouchBegan(out float x, out float y) Parameters x float タッチ位置 X座標 y float タッチ位置 Y座標 Returns bool タッチされ始めたかどうか IsTouchBegan(in float, in float, in float, in float, out float, out float) 前回のフレーム処理以降に 指定した領域がタッチされ始めたかどうか bool IsTouchBegan(in float x, in float y, in float width, in float height, out float px, out float py) Parameters x float 領域 左上X座標 y float 領域 左上Y座標 width float 領域 横幅 height float 領域 縦幅 px float タッチ位置 X座標 py float タッチ位置 Y座標 Returns bool 指定した領域がタッチされ始めたかどうか IsTouchBegan(out float2) 前回のフレーム処理以降に タッチされ始めたかどうか bool IsTouchBegan(out float2 point) Parameters point float2 タッチ位置 Returns bool タッチされ始めたかどうか IsTouchEnded() 前回のフレーム処理以降 タッチされ終えたかどうか bool IsTouchEnded() Returns bool タッチされ終えたかどうか IsTouchEnded(in GcAABB, out float2) 前回のフレーム処理以降 指定した領域がタッチされ終えたかどうか bool IsTouchEnded(in GcAABB aabb, out float2 point) Parameters aabb GcAABB 領域 point float2 タッチ位置 Returns bool 指定した領域がタッチされ終えたかどうか IsTouchEnded(out GcPointerEvent) 前回のフレーム処理以降 タッチされ終えたかどうか bool IsTouchEnded(out GcPointerEvent e) Parameters e GcPointerEvent Returns bool タッチされ終えたかどうか IsTouchEnded(out GcPointerTrace) 前回のフレーム処理以降 タッチされ終えたかどうか bool IsTouchEnded(out GcPointerTrace trace) Parameters trace GcPointerTrace Returns bool タッチされ終えたかどうか IsTouchEnded(out float, out float) 前回のフレーム処理以降 タッチされ終えたかどうか bool IsTouchEnded(out float x, out float y) Parameters x float タッチ位置 X座標 y float タッチ位置 Y座標 Returns bool タッチされ終えたかどうか IsTouchEnded(in float, in float, in float, in float, out float, out float) 前回のフレーム処理以降 指定した領域がタッチされ終えたかどうか bool IsTouchEnded(in float x, in float y, in float width, in float height, out float px, out float py) Parameters x float 領域 左上X座標 y float 領域 左上Y座標 width float 領域 横幅 height float 領域 縦幅 px float タッチ位置 X座標 py float タッチ位置 Y座標 Returns bool 指定した領域がタッチされ終えたかどうか IsTouchEnded(out float2) 前回のフレーム処理以降 タッチされ終えたかどうか bool IsTouchEnded(out float2 point) Parameters point float2 タッチ位置 Returns bool タッチされ終えたかどうか IsTouched() 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） bool IsTouched() Returns bool タッチされていたか（開始と終了を含む） IsTouched(in GcAABB, out float2) 前回のフレーム処理以降 指定した領域がタッチされていたか（開始と終了を含む） bool IsTouched(in GcAABB aabb, out float2 point) Parameters aabb GcAABB 領域 point float2 タッチ位置 Returns bool 指定した領域がタッチされていたか（開始と終了を含む） IsTouched(out GcPointerEvent) 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） bool IsTouched(out GcPointerEvent e) Parameters e GcPointerEvent ポインターイベント Returns bool タッチされていたか（開始と終了を含む） IsTouched(out GcPointerTrace) 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） bool IsTouched(out GcPointerTrace trace) Parameters trace GcPointerTrace タッチの軌跡 Returns bool タッチされていたか（開始と終了を含む） IsTouched(out float, out float) 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） bool IsTouched(out float x, out float y) Parameters x float タッチ位置 X座標 y float タッチ位置 Y座標 Returns bool タッチされていたか（開始と終了を含む） IsTouched(in float, in float, in float, in float, out float, out float) 前回のフレーム処理以降 指定した領域がタッチされていたか（開始と終了を含む） bool IsTouched(in float x, in float y, in float width, in float height, out float px, out float py) Parameters x float 領域 左上X座標 y float 領域 左上Y座標 width float 領域 横幅 height float 領域 縦幅 px float タッチ位置 X座標 py float タッチ位置 Y座標 Returns bool 指定した領域がタッチされていたか（開始と終了を含む） IsTouched(out float2) 前回のフレーム処理以降 タッチされていたか（開始と終了を含む） bool IsTouched(out float2 point) Parameters point float2 タッチ位置 Returns bool タッチされていたか（開始と終了を含む）"
  },
  "api/GameCanvas.IMath.html": {
    "href": "api/GameCanvas.IMath.html",
    "title": "Interface IMath | GameCanvas",
    "keywords": "Interface IMath Namespace GameCanvas Assembly GameCanvas.dll public interface IMath Methods Abs(in int) 絶対値を計算します int Abs(in int value) Parameters value int 入力値 Returns int 絶対値 Abs(in float) 絶対値を計算します float Abs(in float value) Parameters value float 入力値 Returns float 絶対値 AlmostSame(in float, in float) 計算誤差を考慮して同値かどうか判定します bool AlmostSame(in float a, in float b) Parameters a float b float Returns bool 同値かどうか AlmostZero(in float) 計算誤差を考慮してゼロかどうか判定します bool AlmostZero(in float value) Parameters value float 入力値 Returns bool ゼロかどうか Atan2(in float2) ベクトルとX+軸平面のなす角度を計算します float Atan2(in float2 v) Parameters v float2 ベクトル Returns float 角度（度数法） Clamp(in float, in float, in float) 値を丸めます float Clamp(in float value, in float min, in float max) Parameters value float 入力値 min float 最小値 max float 最大値 Returns float Cos(in float) コサインを計算します float Cos(in float degree) Parameters degree float 角度（度数法） Returns float コサイン Cross(in float2, in float2) ベクトルの外積を計算します float Cross(in float2 a, in float2 b) Parameters a float2 b float2 Returns float 外積 Dot(in float2, in float2) ベクトルの内積を計算します float Dot(in float2 a, in float2 b) Parameters a float2 b float2 Returns float 内積 GetRandomState() 乱数計算の現在の状態（≒シード値）を取得します uint GetRandomState() Returns uint シード値 Max(in float, in float) 2つの値を比較して、より大きい方を返します float Max(in float a, in float b) Parameters a float b float Returns float 大きい方の値 Min(in float, in float) 2つの値を比較して、より小さい方を返します float Min(in float a, in float b) Parameters a float b float Returns float 小さい方の値 Random() 0以上1未満のランダムな値を算出します float Random() Returns float ランダムな値 Random(in int, in int) min以上max以下のランダムな値を算出します int Random(in int min, in int max) Parameters min int 最小値 max int 最大値 Returns int ランダムな値 Random(in float, in float) min以上max未満のランダムな値を算出します float Random(in float min, in float max) Parameters min float 最小値 max float 最大値 Returns float ランダムな値 Repeat(in float, in float) 値を 0 から max までの範囲を繰り返すよう値を丸めます float Repeat(in float value, in float max) Parameters value float 入力値 max float 最大値 Returns float RotateVector(in float2, in float) ベクトルを回転します float2 RotateVector(in float2 vector, in float degree) Parameters vector float2 ベクトル degree float 回転量（度数法） Returns float2 回転後のベクトル Round(in double) 値を四捨五入します int Round(in double value) Parameters value double 入力値 Returns int 四捨五入された値 Round(in float) 値を四捨五入します int Round(in float value) Parameters value float 入力値 Returns int 四捨五入された値 SetRandomSeed(in uint) 乱数計算のシード値を設定します void SetRandomSeed(in uint seed) Parameters seed uint シード値 SetRandomSeedByIndex(in uint) 乱数計算のシード値をインデックスから設定します void SetRandomSeedByIndex(in uint index) Parameters index uint インデックス Sin(in float) サインを計算します float Sin(in float degree) Parameters degree float 角度（度数法） Returns float サイン Sqrt(in float) 平方根を計算します float Sqrt(in float value) Parameters value float 入力値 Returns float 平方根"
  },
  "api/GameCanvas.IMathEx.html": {
    "href": "api/GameCanvas.IMathEx.html",
    "title": "Interface IMathEx | GameCanvas",
    "keywords": "Interface IMathEx Namespace GameCanvas Assembly GameCanvas.dll public interface IMathEx : IMath Inherited Members IMath.Abs(in float) IMath.Abs(in int) IMath.AlmostSame(in float, in float) IMath.AlmostZero(in float) IMath.Atan2(in float2) IMath.Clamp(in float, in float, in float) IMath.Cos(in float) IMath.Cross(in float2, in float2) IMath.Dot(in float2, in float2) IMath.Max(in float, in float) IMath.Min(in float, in float) IMath.Random() IMath.Random(in float, in float) IMath.Random(in int, in int) IMath.Repeat(in float, in float) IMath.RotateVector(in float2, in float) IMath.Round(in float) IMath.Round(in double) IMath.GetRandomState() IMath.SetRandomSeed(in uint) IMath.SetRandomSeedByIndex(in uint) IMath.Sin(in float) IMath.Sqrt(in float) Methods Atan2(in float, in float) ベクトルとX+軸平面のなす角度を計算します float Atan2(in float x, in float y) Parameters x float ベクトルのX軸の大きさ y float ベクトルのY軸の大きさ Returns float 角度（度数法）"
  },
  "api/GameCanvas.INetwork.html": {
    "href": "api/GameCanvas.INetwork.html",
    "title": "Interface INetwork | GameCanvas",
    "keywords": "Interface INetwork Namespace GameCanvas Assembly GameCanvas.dll public interface INetwork Methods ClearDownloadCache(in string) 指定されたオンラインリソースのダウンロードキャッシュを削除します void ClearDownloadCache(in string url) Parameters url string リソースURL ClearDownloadCacheAll() 全てのオンラインリソースのダウンロードキャッシュを削除します void ClearDownloadCacheAll() TryGetOnlineImage(in string, out GcAvailability, out Texture2D?) オンライン画像リソースの取得を試みます bool TryGetOnlineImage(in string url, out GcAvailability availability, out Texture2D? texture) Parameters url string リソースURL availability GcAvailability texture Texture2D 画像リソース。戻り値がReady以外だとNull Returns bool オンラインリソースの可用性 TryGetOnlineImageSize(in string, out int2) オンライン画像リソースの寸法を取得します bool TryGetOnlineImageSize(in string url, out int2 size) Parameters url string リソースURL size int2 オンライン画像リソースの寸法 Returns bool オンラインリソースを取得できたかどうか TryGetOnlineSound(in string, out GcAvailability, out AudioClip?) オンライン音声リソースの取得を試みます bool TryGetOnlineSound(in string url, out GcAvailability availability, out AudioClip? clip) Parameters url string リソースURL availability GcAvailability clip AudioClip 音声リソース。戻り値がReady以外だとNull Returns bool オンラインリソースの可用性 TryGetOnlineSound(in string, in AudioType, out GcAvailability, out AudioClip?) オンライン音声リソースの取得を試みます bool TryGetOnlineSound(in string url, in AudioType type, out GcAvailability availability, out AudioClip? clip) Parameters url string リソースURL type AudioType 音声リソースの形式 availability GcAvailability clip AudioClip 音声リソース。戻り値がReady以外だとNull Returns bool オンラインリソースの可用性 TryGetOnlineText(in string, out GcAvailability, out string?) オンラインテキストの取得を試みます bool TryGetOnlineText(in string url, out GcAvailability availability, out string? str) Parameters url string リソースURL availability GcAvailability str string Returns bool オンラインリソースの可用性"
  },
  "api/GameCanvas.INetworkEx.html": {
    "href": "api/GameCanvas.INetworkEx.html",
    "title": "Interface INetworkEx | GameCanvas",
    "keywords": "Interface INetworkEx Namespace GameCanvas Assembly GameCanvas.dll public interface INetworkEx : INetwork Inherited Members INetwork.ClearDownloadCache(in string) INetwork.ClearDownloadCacheAll() INetwork.TryGetOnlineImage(in string, out GcAvailability, out Texture2D) INetwork.TryGetOnlineImageSize(in string, out int2) INetwork.TryGetOnlineSound(in string, out GcAvailability, out AudioClip) INetwork.TryGetOnlineSound(in string, in AudioType, out GcAvailability, out AudioClip) INetwork.TryGetOnlineText(in string, out GcAvailability, out string) Methods DrawOnlineImage(in string) オンライン画像リソースを描画します GcAvailability DrawOnlineImage(in string url) Parameters url string リソースURL Returns GcAvailability オンラインリソースの可用性 DrawOnlineImage(in string, in GcRect) オンライン画像リソースを拡縮して描画します GcAvailability DrawOnlineImage(in string url, in GcRect rect) Parameters url string リソースURL rect GcRect 画像をフィッティングする矩形領域 Returns GcAvailability DrawOnlineImage(in string, in float, in float, float) オンライン画像リソースを描画します GcAvailability DrawOnlineImage(in string url, in float x, in float y, float degree = 0) Parameters url string リソースURL x float X座標 y float Y座標 degree float 回転（度数法） Returns GcAvailability オンラインリソースの可用性 DrawOnlineImage(in string, in float, in float, in float, in float, float) オンライン画像リソースを拡縮して描画します GcAvailability DrawOnlineImage(in string url, in float x, in float y, in float width, in float height, float degree = 0) Parameters url string リソースURL x float X座標 y float Y座標 width float 横幅。画像の横幅がこれになるように拡縮される height float 縦幅。画像の縦幅がこれになるように拡縮される degree float 回転（度数法） Returns GcAvailability DrawOnlineImage(in string, in float2, float) オンライン画像リソースを描画します GcAvailability DrawOnlineImage(in string url, in float2 position, float degree = 0) Parameters url string リソースURL position float2 位置 degree float 回転（度数法） Returns GcAvailability オンラインリソースの可用性 GetOnlineImageHeight(in string) オンライン画像リソースの縦幅を取得します int GetOnlineImageHeight(in string url) Parameters url string リソースURL Returns int オンライン画像リソースの縦幅。取得できなかった場合は0を返します GetOnlineImageWidth(in string) オンライン画像リソースの横幅を取得します int GetOnlineImageWidth(in string url) Parameters url string リソースURL Returns int オンライン画像リソースの横幅。取得できなかった場合は0を返します"
  },
  "api/GameCanvas.IPhysics.html": {
    "href": "api/GameCanvas.IPhysics.html",
    "title": "Interface IPhysics | GameCanvas",
    "keywords": "Interface IPhysics Namespace GameCanvas Assembly GameCanvas.dll public interface IPhysics Methods CrossTest(in GcLine, in GcLine) GcLine と GcLine の交差判定 bool CrossTest(in GcLine a, in GcLine b) Parameters a GcLine b GcLine Returns bool CrossTest(in GcLine, in GcLine, out float2) GcLine と GcLine の交差判定 bool CrossTest(in GcLine a, in GcLine b, out float2 intersection) Parameters a GcLine b GcLine intersection float2 Returns bool HitTest(in GcAABB, in GcAABB) GcAABB と GcAABB の接触判定 bool HitTest(in GcAABB a, in GcAABB b) Parameters a GcAABB b GcAABB Returns bool HitTest(in GcAABB, in float2) GcAABB と 点の接触判定 bool HitTest(in GcAABB aabb, in float2 point) Parameters aabb GcAABB point float2 Returns bool HitTest(in GcCircle, in GcCircle) GcCircle と GcCircle の接触判定 bool HitTest(in GcCircle circle1, in GcCircle circle2) Parameters circle1 GcCircle circle2 GcCircle Returns bool HitTest(in GcCircle, in float2) GcCircle と 点の接触判定 bool HitTest(in GcCircle circle, in float2 point) Parameters circle GcCircle point float2 Returns bool SweepTest(in GcAABB, in GcAABB, in float2, out GcSweepResult) 移動する矩形と静的な矩形の連続衝突検出 bool SweepTest(in GcAABB @static, in GcAABB dynamic, in float2 delta, out GcSweepResult hit) Parameters static GcAABB dynamic GcAABB delta float2 hit GcSweepResult Returns bool SweepTest(in GcAABB, in float2, in float2, out GcSweepResult) 移動する点と静的な矩形の連続衝突検出 bool SweepTest(in GcAABB @static, in float2 dynamic, in float2 delta, out GcSweepResult hit) Parameters static GcAABB dynamic float2 delta float2 hit GcSweepResult Returns bool"
  },
  "api/GameCanvas.IPhysicsEx.html": {
    "href": "api/GameCanvas.IPhysicsEx.html",
    "title": "Interface IPhysicsEx | GameCanvas",
    "keywords": "Interface IPhysicsEx Namespace GameCanvas Assembly GameCanvas.dll public interface IPhysicsEx : IPhysics Inherited Members IPhysics.CrossTest(in GcLine, in GcLine) IPhysics.CrossTest(in GcLine, in GcLine, out float2) IPhysics.HitTest(in GcAABB, in GcAABB) IPhysics.HitTest(in GcAABB, in float2) IPhysics.HitTest(in GcCircle, in GcCircle) IPhysics.HitTest(in GcCircle, in float2) IPhysics.SweepTest(in GcAABB, in float2, in float2, out GcSweepResult) IPhysics.SweepTest(in GcAABB, in GcAABB, in float2, out GcSweepResult)"
  },
  "api/GameCanvas.IPrimitive-1.html": {
    "href": "api/GameCanvas.IPrimitive-1.html",
    "title": "Interface IPrimitive<T> | GameCanvas",
    "keywords": "Interface IPrimitive<T> Namespace GameCanvas Assembly GameCanvas.dll public interface IPrimitive<T> : IEquatable<T> where T : struct, IPrimitive<T>, IEquatable<T> Type Parameters T Inherited Members IEquatable<T>.Equals(T)"
  },
  "api/GameCanvas.IScene.html": {
    "href": "api/GameCanvas.IScene.html",
    "title": "Interface IScene | GameCanvas",
    "keywords": "Interface IScene Namespace GameCanvas Assembly GameCanvas.dll public interface IScene Methods DrawScene() シーンの描画処理 void DrawScene() Remarks 毎フレーム（計算より後に）GameCanvasにより自動的に呼び出されます EnterScene(object) シーンの開始処理 void EnterScene(object state) Parameters state object ChangeScene<T>(object?)を通じて渡される任意の値。未設定の場合はnull Remarks シーン遷移時にGameCanvasにより自動的に呼び出されます LeaveScene() シーンの終了処理 void LeaveScene() Remarks シーン遷移時にGameCanvasにより自動的に呼び出されます PauseScene() シーンの中断処理 void PauseScene() Remarks アプリが一時停止する直前にGameCanvasにより自動的に呼び出されます ResumeScene() シーンの再開処理 void ResumeScene() Remarks アプリが再開する直前にGameCanvasにより自動的に呼び出されます UpdateScene() シーンの計算処理 void UpdateScene() Remarks 毎フレーム（描画より前に）GameCanvasにより自動的に呼び出されます"
  },
  "api/GameCanvas.ISceneManagement.html": {
    "href": "api/GameCanvas.ISceneManagement.html",
    "title": "Interface ISceneManagement | GameCanvas",
    "keywords": "Interface ISceneManagement Namespace GameCanvas Assembly GameCanvas.dll public interface ISceneManagement Methods AddActor(in GcActor) 指定したアクターをシーンに登録します void AddActor(in GcActor actor) Parameters actor GcActor 登録するアクター CreateActor<T>() 指定したアクターを生成し、シーンに登録します T CreateActor<T>() where T : GcActor, new() Returns T 登録したアクター Type Parameters T 生成・登録するアクターの型 GetActorCount() シーンに登録されているアクターの総数を取得します int GetActorCount() Returns int アクターの数 GetActorCount<T>() シーンに登録されているアクターのうち、指定した型のものが幾つあるか取得します int GetActorCount<T>() where T : GcActor Returns int アクターの数 Type Parameters T 取得するアクターの型 RemoveActorAll() シーンに登録されているすべてのアクターを登録解除します void RemoveActorAll() TryGetActor(in int, out GcActor?) シーンに登録されているアクターを 1つだけ取得します bool TryGetActor(in int i, out GcActor? actor) Parameters i int 取得するアクターのインデックス（0以上GetActorCount()未満） actor GcActor 取得できたアクター Returns bool 取得できたかどうか TryGetActorAll<T>(out ReadOnlySpan<T>) シーンに登録されているアクターのうち、指定した型のものを取得します bool TryGetActorAll<T>(out ReadOnlySpan<T> actors) where T : GcActor Parameters actors ReadOnlySpan<T> 取得したアクターの一覧 Returns bool 1つ以上 取得できたかどうか Type Parameters T 取得するアクターの型 TryGetActor<T>(in int, out T?) シーンに登録されているアクターを 1つだけ取得します bool TryGetActor<T>(in int i, out T? actor) where T : GcActor Parameters i int 取得するアクターのインデックス（0以上GetActorCount<T>()未満） actor T 取得できたアクター Returns bool 取得できたかどうか Type Parameters T 取得するアクターの型 TryRemoveActor(in GcActor) 指定したアクターをシーンから登録解除します bool TryRemoveActor(in GcActor actor) Parameters actor GcActor 登録解除するアクター Returns bool 登録解除できたかどうか"
  },
  "api/GameCanvas.ISceneManagementEx.html": {
    "href": "api/GameCanvas.ISceneManagementEx.html",
    "title": "Interface ISceneManagementEx | GameCanvas",
    "keywords": "Interface ISceneManagementEx Namespace GameCanvas Assembly GameCanvas.dll public interface ISceneManagementEx : ISceneManagement Inherited Members ISceneManagement.AddActor(in GcActor) ISceneManagement.CreateActor<T>() ISceneManagement.GetActorCount() ISceneManagement.GetActorCount<T>() ISceneManagement.RemoveActorAll() ISceneManagement.TryGetActor(in int, out GcActor) ISceneManagement.TryGetActor<T>(in int, out T) ISceneManagement.TryGetActorAll<T>(out ReadOnlySpan<T>) ISceneManagement.TryRemoveActor(in GcActor) Methods ChangeScene<T>(object?) シーンを切り替えます void ChangeScene<T>(object? state = null) where T : GcScene Parameters state object シーンの開始処理 (EnterScene(object)) に引数として渡す任意の値 Type Parameters T 開始するシーンの型 Remarks これまで有効だったシーンは、現在のフレームの最後に終了処理が実行されます これから有効になるシーンは、次のフレームの最初に開始処理が実行されます GetActor() シーンに登録されているアクターのうち、1つだけ取得します GcActor? GetActor() Returns GcActor 取得できたアクター GetActorList<T>() シーンに登録されているアクターのうち、指定した型のものを取得します ReadOnlyActorList<T> GetActorList<T>() where T : GcActor Returns ReadOnlyActorList<T> 取得したアクターのリスト Type Parameters T 取得するアクターの型 GetActor<T>() シーンに登録されているアクターのうち、指定した型のものを1つだけ取得します T? GetActor<T>() where T : GcActor Returns T 取得できたアクター Type Parameters T 取得するアクターの型 RegisterScene(in GcScene) 新たなシーンを登録します void RegisterScene(in GcScene scene) Parameters scene GcScene 登録するシーン Remarks 登録したシーンは ChangeScene<T>(object?) を呼び出すことで有効になります RegisterScene<T>() 新たなシーンを登録します void RegisterScene<T>() where T : GcScene, new() Type Parameters T 登録するシーンの型 Remarks 登録したシーンは ChangeScene<T>(object?) を呼び出すことで有効になります UnregisterScene(in GcScene) 指定したシーンをシーン一覧から削除します void UnregisterScene(in GcScene scene) Parameters scene GcScene 削除するシーン Remarks もし指定したシーンが現在有効なシーンだった場合、フレームの最後にシーンの離脱処理が走ります UnregisterScene<T>() 指定したシーンをシーン一覧から削除します void UnregisterScene<T>() where T : GcScene Type Parameters T 削除するシーンの型 Remarks もし指定したシーンが現在有効なシーンだった場合、フレームの最後にシーンの離脱処理が走ります"
  },
  "api/GameCanvas.ISound.html": {
    "href": "api/GameCanvas.ISound.html",
    "title": "Interface ISound | GameCanvas",
    "keywords": "Interface ISound Namespace GameCanvas Assembly GameCanvas.dll public interface ISound Methods ClearSound() すべてのサウンド再生を停止し、トラック音量を初期値に戻します void ClearSound() GetSoundLevel(GcSoundTrack) トラック音量を取得します float GetSoundLevel(GcSoundTrack track = GcSoundTrack.Master) Parameters track GcSoundTrack 対象の音声トラック Returns float 音量（-96db～20db） IsPlayingSound(GcSoundTrack) 指定された音声トラックが再生中かどうか bool IsPlayingSound(GcSoundTrack track = GcSoundTrack.BGM1) Parameters track GcSoundTrack 対象の音声トラック Returns bool 再生中かどうか PauseSound(GcSoundTrack) 指定された音声トラックのサウンドを一時停止します void PauseSound(GcSoundTrack track = GcSoundTrack.BGM1) Parameters track GcSoundTrack 対象の音声トラック Remarks BGMトラック以外では常に無視されます PlaySound(in GcSound, GcSoundTrack, bool) サウンドを再生します void PlaySound(in GcSound sound, GcSoundTrack track = GcSoundTrack.BGM1, bool loop = false) Parameters sound GcSound track GcSoundTrack 対象の音声トラック loop bool ループ再生するかどうか（SEトラック以外） PlaySound(in AudioClip, GcSoundTrack, bool) サウンドを再生します void PlaySound(in AudioClip clip, GcSoundTrack track = GcSoundTrack.BGM1, bool loop = false) Parameters clip AudioClip サウンド track GcSoundTrack 対象の音声トラック loop bool ループ再生するかどうか（SEトラック以外） SetSoundLevel(in float, GcSoundTrack) トラック音量を変更します void SetSoundLevel(in float decibel, GcSoundTrack track = GcSoundTrack.Master) Parameters decibel float 音量（-96db～20db） track GcSoundTrack 対象の音声トラック StopSound(GcSoundTrack) 指定された音声トラックのサウンドを停止します void StopSound(GcSoundTrack track = GcSoundTrack.BGM1) Parameters track GcSoundTrack 対象の音声トラック Remarks BGMトラック以外では常に無視されます UnpauseSound(GcSoundTrack) 指定された音声トラックのサウンドを一時停止していた場合、再生を再開します void UnpauseSound(GcSoundTrack track = GcSoundTrack.BGM1) Parameters track GcSoundTrack 対象の音声トラック Remarks BGMトラック以外では常に無視されます"
  },
  "api/GameCanvas.ISoundEx.html": {
    "href": "api/GameCanvas.ISoundEx.html",
    "title": "Interface ISoundEx | GameCanvas",
    "keywords": "Interface ISoundEx Namespace GameCanvas Assembly GameCanvas.dll public interface ISoundEx : ISound Inherited Members ISound.ClearSound() ISound.GetSoundLevel(GcSoundTrack) ISound.IsPlayingSound(GcSoundTrack) ISound.PauseSound(GcSoundTrack) ISound.PlaySound(in GcSound, GcSoundTrack, bool) ISound.PlaySound(in AudioClip, GcSoundTrack, bool) ISound.SetSoundLevel(in float, GcSoundTrack) ISound.StopSound(GcSoundTrack) ISound.UnpauseSound(GcSoundTrack) Methods GetSoundVolume(GcSoundTrack) トラック音量を取得します float GetSoundVolume(GcSoundTrack track = GcSoundTrack.Master) Parameters track GcSoundTrack 対象の音声トラック Returns float 音量（0f～1f） PlaySE(in GcSound) サウンドを1回再生します void PlaySE(in GcSound sound) Parameters sound GcSound サウンド PlaySE(in AudioClip) サウンドを1回再生します void PlaySE(in AudioClip clip) Parameters clip AudioClip サウンド SetSoundVolume(in float, GcSoundTrack) トラック音量を変更します void SetSoundVolume(in float volume, GcSoundTrack track = GcSoundTrack.Master) Parameters volume float 音量（0f～1f） track GcSoundTrack 対象の音声トラック"
  },
  "api/GameCanvas.IStorage.html": {
    "href": "api/GameCanvas.IStorage.html",
    "title": "Interface IStorage | GameCanvas",
    "keywords": "Interface IStorage Namespace GameCanvas Assembly GameCanvas.dll public interface IStorage Methods EraseSavedDataAll() ローカルストレージに保存された全ての値を削除します void EraseSavedDataAll() Save(in string, int?) ローカルストレージに値を保存します void Save(in string key, int? value) Parameters key string キー value int? 保存する値 Remarks value に null を渡した場合、キーに紐づくデータを削除します Save(in string, float?) ローカルストレージに値を保存します void Save(in string key, float? value) Parameters key string キー value float? 保存する値 Remarks value に null を渡した場合、キーに紐づくデータを削除します Save(in string, string?) ローカルストレージに値を保存します void Save(in string key, string? value) Parameters key string キー value string 保存する値 Remarks value に null を渡した場合、キーに紐づくデータを削除します SaveScreenshotAsync(Action<string?>?) 現在の画面を 画像として保存します void SaveScreenshotAsync(Action<string?>? onComplete = null) Parameters onComplete Action<string> 保存完了後に呼び出されるコールバック Remarks 保存に成功した場合、onComplete の引数には、画像保存先のパスが渡されます 保存に失敗した場合、onComplete の引数には null が渡されます TryLoad(in string, out int) ローカルストレージに保存された値を取り出します bool TryLoad(in string key, out int value) Parameters key string キー value int 取り出した値 Returns bool 取り出せたかどうか TryLoad(in string, out float) ローカルストレージに保存された値を取り出します bool TryLoad(in string key, out float value) Parameters key string キー value float 取り出した値 Returns bool 取り出せたかどうか TryLoad(in string, out string?) ローカルストレージに保存された値を取り出します bool TryLoad(in string key, out string? value) Parameters key string キー value string 取り出した値 Returns bool 取り出せたかどうか"
  },
  "api/GameCanvas.IStorageEx.html": {
    "href": "api/GameCanvas.IStorageEx.html",
    "title": "Interface IStorageEx | GameCanvas",
    "keywords": "Interface IStorageEx Namespace GameCanvas Assembly GameCanvas.dll public interface IStorageEx : IStorage Inherited Members IStorage.EraseSavedDataAll() IStorage.Save(in string, float?) IStorage.Save(in string, int?) IStorage.Save(in string, string) IStorage.SaveScreenshotAsync(Action<string>) IStorage.TryLoad(in string, out float) IStorage.TryLoad(in string, out int) IStorage.TryLoad(in string, out string)"
  },
  "api/GameCanvas.ITime.html": {
    "href": "api/GameCanvas.ITime.html",
    "title": "Interface ITime | GameCanvas",
    "keywords": "Interface ITime Namespace GameCanvas Assembly GameCanvas.dll public interface ITime Properties CurrentFrame アプリ起動からの累計フレーム数 int CurrentFrame { get; } Property Value int CurrentTime 現在フレームの日時 DateTimeOffset CurrentTime { get; } Property Value DateTimeOffset CurrentTimestamp 現在フレームのUnixタイムスタンプ long CurrentTimestamp { get; } Property Value long NowTime 現在（関数呼び出し時点）の日時 DateTimeOffset NowTime { get; } Property Value DateTimeOffset TargetFrameInterval フレーム更新間隔の目標値（秒） double TargetFrameInterval { get; } Property Value double TargetFrameRate フレームレート（1秒あたりのフレーム数）の目標値 int TargetFrameRate { get; } Property Value int TimeSincePrevFrame ひとつ前のフレームからの経過時間（秒） float TimeSincePrevFrame { get; } Property Value float TimeSinceStartup 現在フレームのアプリ起動からの経過時間（秒） float TimeSinceStartup { get; } Property Value float VSyncEnabled 垂直同期の有無 bool VSyncEnabled { get; } Property Value bool Remarks この設定は、SetFrameInterval(in double, bool) や SetFrameRate(in int, bool) の第二引数から変更できます。 Methods SetFrameInterval(in double, bool) UpdateGame や DrawGame が呼び出される時間間隔を設定します。 void SetFrameInterval(in double targetDeltaTime, bool vSyncEnabled = true) Parameters targetDeltaTime double フレーム更新間隔の目標値（秒） vSyncEnabled bool 垂直同期の有無 Remarks 垂直同期を無効にした場合、間隔の揺らぎは減少しますが、ディスプレイのリフレッシュレートを常に無視して描画するため、画面のちらつきが発生する場合があります。 SetFrameRate(in int, bool) フレームレートの目標値を設定します。 小数点以下を指定したい場合は、この関数の代わりに SetFrameInterval(in double, bool) を使用してください。 void SetFrameRate(in int targetFrameRate, bool vSyncEnabled = true) Parameters targetFrameRate int フレームレート（1秒あたりのフレーム数）の目標値 vSyncEnabled bool 垂直同期の有無 Remarks 垂直同期を無効にした場合、間隔の揺らぎは減少しますが、ディスプレイのリフレッシュレートを常に無視して描画するため、画面のちらつきが発生する場合があります。"
  },
  "api/GameCanvas.ITimeEx.html": {
    "href": "api/GameCanvas.ITimeEx.html",
    "title": "Interface ITimeEx | GameCanvas",
    "keywords": "Interface ITimeEx Namespace GameCanvas Assembly GameCanvas.dll public interface ITimeEx : ITime Inherited Members ITime.CurrentFrame ITime.CurrentTime ITime.CurrentTimestamp ITime.NowTime ITime.TargetFrameInterval ITime.TargetFrameRate ITime.TimeSincePrevFrame ITime.TimeSinceStartup ITime.VSyncEnabled ITime.SetFrameInterval(in double, bool) ITime.SetFrameRate(in int, bool) Properties CurrentTimeDay 現在フレームの日付（1～31） int CurrentTimeDay { get; } Property Value int CurrentTimeDayOfWeek 現在フレームの曜日（0～6） DayOfWeek CurrentTimeDayOfWeek { get; } Property Value DayOfWeek CurrentTimeHour 現在フレームの時刻の時間部分（0～23） int CurrentTimeHour { get; } Property Value int CurrentTimeMillisecond 現在フレームの時刻のミリ秒部分（0～999） int CurrentTimeMillisecond { get; } Property Value int CurrentTimeMinute 現在フレームの時刻の分部分（0～59） int CurrentTimeMinute { get; } Property Value int CurrentTimeMonth 現在フレームの日付の月部分（1～12） int CurrentTimeMonth { get; } Property Value int CurrentTimeSecond 現在フレームの時刻の秒部分（0～59） int CurrentTimeSecond { get; } Property Value int CurrentTimeYear 現在フレームの日付の西暦部分 int CurrentTimeYear { get; } Property Value int"
  },
  "api/GameCanvas.ObjectPool-1.html": {
    "href": "api/GameCanvas.ObjectPool-1.html",
    "title": "Class ObjectPool<T> | GameCanvas",
    "keywords": "Class ObjectPool<T> Namespace GameCanvas Assembly GameCanvas.dll public sealed class ObjectPool<T> where T : class, new() Type Parameters T Inheritance object ObjectPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ObjectPool(int, int) public ObjectPool(int capacity = 8, int initialSize = 0) Parameters capacity int initialSize int Methods Get() public T? Get() Returns T GetOrCreate() public T GetOrCreate() Returns T ReleaseAll() public void ReleaseAll()"
  },
  "api/GameCanvas.ReadOnlyActorList-1.Enumerator.html": {
    "href": "api/GameCanvas.ReadOnlyActorList-1.Enumerator.html",
    "title": "Struct ReadOnlyActorList<T>.Enumerator | GameCanvas",
    "keywords": "Struct ReadOnlyActorList<T>.Enumerator Namespace GameCanvas Assembly GameCanvas.dll public struct ReadOnlyActorList<T>.Enumerator : IEnumerator<T>, IEnumerator, IDisposable Implements IEnumerator<T> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Current public readonly T Current { get; } Property Value T Methods Dispose() public readonly void Dispose() MoveNext() public bool MoveNext() Returns bool Reset() public void Reset()"
  },
  "api/GameCanvas.ReadOnlyActorList-1.html": {
    "href": "api/GameCanvas.ReadOnlyActorList-1.html",
    "title": "Struct ReadOnlyActorList<T> | GameCanvas",
    "keywords": "Struct ReadOnlyActorList<T> Namespace GameCanvas Assembly GameCanvas.dll public readonly struct ReadOnlyActorList<T> : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : GcActor Type Parameters T Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Count public int Count { get; } Property Value int IsReadOnly public bool IsReadOnly { get; } Property Value bool this[int] public T this[int index] { get; set; } Parameters index int Property Value T Methods Add(T) public void Add(T item) Parameters item T Clear() public void Clear() Contains(T) public bool Contains(T item) Parameters item T Returns bool CopyTo(T[], int) public void CopyTo(T[] array, int arrayIndex) Parameters array T[] arrayIndex int GetEnumerator() public ReadOnlyActorList<T>.Enumerator GetEnumerator() Returns ReadOnlyActorList<T>.Enumerator IndexOf(T) public int IndexOf(T item) Parameters item T Returns int Insert(int, T) public void Insert(int index, T item) Parameters index int item T Remove(T) public bool Remove(T item) Parameters item T Returns bool RemoveAt(int) public void RemoveAt(int index) Parameters index int"
  },
  "api/GameCanvas.SpanExtensions.html": {
    "href": "api/GameCanvas.SpanExtensions.html",
    "title": "Class SpanExtensions | GameCanvas",
    "keywords": "Class SpanExtensions Namespace GameCanvas Assembly GameCanvas.dll public static class SpanExtensions Inheritance object SpanExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsReadOnlySpan<T>(in NativeArray<T>) public static ReadOnlySpan<T> AsReadOnlySpan<T>(this in NativeArray<T> self) where T : unmanaged Parameters self NativeArray<T> Returns ReadOnlySpan<T> Type Parameters T AsReadOnlySpan<T>(in NativeList<T>) public static ReadOnlySpan<T> AsReadOnlySpan<T>(this in NativeList<T> self) where T : unmanaged Parameters self NativeList<T> Returns ReadOnlySpan<T> Type Parameters T AsSpan<T>(in NativeArray<T>) public static Span<T> AsSpan<T>(this in NativeArray<T> self) where T : unmanaged Parameters self NativeArray<T> Returns Span<T> Type Parameters T AsSpan<T>(in NativeList<T>) public static Span<T> AsSpan<T>(this in NativeList<T> self) where T : unmanaged Parameters self NativeList<T> Returns Span<T> Type Parameters T"
  },
  "api/GameCanvas.StyleScope.html": {
    "href": "api/GameCanvas.StyleScope.html",
    "title": "Struct StyleScope | GameCanvas",
    "keywords": "Struct StyleScope Namespace GameCanvas Assembly GameCanvas.dll public readonly struct StyleScope : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Dispose() public void Dispose()"
  },
  "api/GameCanvas.UnityKeyCodeExtensions.html": {
    "href": "api/GameCanvas.UnityKeyCodeExtensions.html",
    "title": "Class UnityKeyCodeExtensions | GameCanvas",
    "keywords": "Class UnityKeyCodeExtensions Namespace GameCanvas Assembly GameCanvas.dll UnityEngine.InputSystem.Key と char (UTF-16) の相互変換 public static class UnityKeyCodeExtensions Inheritance object UnityKeyCodeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToKey(KeyCode) public static Key ToKey(this KeyCode code) Parameters code KeyCode Returns Key TryGetChar(Key, out char) public static bool TryGetChar(this Key key, out char c) Parameters key Key c char Returns bool TryGetChar(KeyCode, out char) public static bool TryGetChar(this KeyCode key, out char c) Parameters key KeyCode c char Returns bool TryGetKey(in char, out Key) public static bool TryGetKey(this in char c, out Key key) Parameters c char key Key Returns bool TryGetKeyCode(in char, out KeyCode) public static bool TryGetKeyCode(this in char c, out KeyCode key) Parameters c char key KeyCode Returns bool"
  },
  "api/GameCanvas.html": {
    "href": "api/GameCanvas.html",
    "title": "Namespace GameCanvas | GameCanvas",
    "keywords": "Namespace GameCanvas Classes DictWithLife<TKey, TValue> 期限付き辞書 GameBase GcAABBExtensions GcAABB 拡張クラス GcActor アクター基底 GcAffine 2次元アフィン変換 GcAssert GcAssert.AssertionException GcCameraDevice カメラ（外部入力映像）デバイス GcCollisionExtensions GcLineExtensions GcLine 拡張クラス GcMath GcProxy ユーザー定義クラスからGameCanvasの機能を呼び出すためのクラス GcRectExtensions GcRect 拡張クラス GcScene シーン基底 GcUtil ObjectPool<T> SpanExtensions UnityKeyCodeExtensions UnityEngine.InputSystem.Key と char (UTF-16) の相互変換 Structs CoordianteScope GcAABB 軸に平行な矩形 (Axis Aligned Bounding Box) GcAccelerationEvent 加速度イベント GcCircle 円 GcFont GcGeolocationEvent GNSSによる測位データ GcHitResult 衝突点情報 GcImage GcKeyEvent キーイベント GcKeyTrace キー入力の軌跡 GcLine 直線もしくは線分 GcPointerEvent ポインターイベント GcPointerTrace ポインターの軌跡 GcRect GcResolution 解像度とリフレッシュレート GcSound GcStyle スタイル（スタック可能な描画設定群） GcSweepResult 衝突情報 GcTapSettings タップ感度の設定 GcText ReadOnlyActorList<T> ReadOnlyActorList<T>.Enumerator StyleScope Interfaces IActor IEngine IGameCanvas IGraphics IGraphicsEx IInputAcceleration IInputAccelerationEx IInputCamera IInputCameraEx IInputGeolocation IInputGeolocationEx IInputKey IInputKeyEx IInputPointer IInputPointerEx IMath IMathEx INetwork INetworkEx IPhysics IPhysicsEx IPrimitive<T> IScene ISceneManagement ISceneManagementEx ISound ISoundEx IStorage IStorageEx ITime ITimeEx Enums GcAnchor アンカー位置 GcAvailability 可用性（ダウンロード状態） GcKeyEventPhase GcKeyEvent 段階 GcLineCap 描線の端点の形状 GcPointerEventPhase GcPointerEvent 段階 GcPointerType ポインター種別 GcRuntimePlatform 実行時プラットフォーム GcSoundTrack 音声トラック"
  },
  "index.html": {
    "href": "index.html",
    "title": "GameCanvas for Unity | GameCanvas",
    "keywords": "GameCanvas for Unity GameCanvas for Unity は、慶應義塾大学『スマートデバイスプログラミング』にて 教材として使われている 2Dゲームフレームワーク です。 プログラミング初心者でも、スマートデバイス向けアプリケーションを 楽しく開発できる環境を目指して開発されました。 APIドキュメント IGameCanvas IGraphics ISound INetwork ISceneManagement ITime IPhysics IStorage IMath IInputPointer IInputKey IInputAcceleration IInputGeolocation IInputCamera リンク GitHubリポジトリ スマートデバイスプログラミング講義ページ"
  },
  "note/compatibility.html": {
    "href": "note/compatibility.html",
    "title": "新旧API対応表 | GameCanvas",
    "keywords": "新旧API対応表 v1.2 → v2.0 v1.2 以前に存在し v2.0 で変更・廃止されたAPIの一覧と対応表です v1.2 v2.0 備考 acceX @GameCanvas.Proxy.AccelerationLastX* 関数名の変更 acceY @GameCanvas.Proxy.AccelerationLastY* 関数名の変更 acceZ @GameCanvas.Proxy.AccelerationLastZ* 関数名の変更 cameraImageHeight @GameCanvas.Proxy.CurrentCameraHeight 関数名の変更 cameraImageWidth @GameCanvas.Proxy.CurrentCameraWidth 関数名の変更 ChangeBGMVolume @GameCanvas.Proxy.SetSoundVolume* 関数名と型の変更 ChangeSEVolume Obsolete CheckHitCircle @GameCanvas.Proxy.CheckHitCircle* 引数の型の変更 CheckHitImage @GameCanvas.Proxy.CheckHitImage* 引数の型の変更 CheckHitRect @GameCanvas.Proxy.CheckHitRect* 引数の型の変更 ClearDownloadCache Obsolete CloseWS Obsolete compass Obsolete ConvertFromJson Obsolete ConvertToJson Obsolete Deg2Rad Obsolete DeleteData Obsolete DeleteDataAll Obsolete deltaTime @GameCanvas.Proxy.TimeSincePrevFrame* 関数名の変更 DrawCameraImage @GameCanvas.Proxy.DrawCameraImage* 引数の型の変更 DrawCameraImageSRT Obsolete 代替: @GameCanvas.Proxy.DrawScaledRotateCameraImage* DrawCircle @GameCanvas.Proxy.DrawCircle* 引数の型の変更 DrawClippedCameraImage @GameCanvas.Proxy.DrawClipCameraImage* 関数名と型の変更、仕様変更 DrawClippedImage Obsolete 代替: @GameCanvas.Proxy.DrawClipImage* DrawClippedImageUVWH @GameCanvas.Proxy.DrawClipImage* 関数名と型の変更、仕様変更 DrawClippedOnlineImage Obsolete DrawImage @GameCanvas.Proxy.DrawImage* 引数の型の変更 DrawImageSRT @GameCanvas.Proxy.DrawScaledRotateImage* 関数名と型の変更 DrawLine @GameCanvas.Proxy.DrawLine* 引数の型の変更 DrawMultiLineString Obsolete 代替: @GameCanvas.Proxy.DrawString* DrawOnlineImage 引数の型の変更 DrawOnlineImageSRT Obsolete DrawRect @GameCanvas.Proxy.DrawRect* 引数の型の変更 DrawRotatedCameraImage Obsolete 代替: @GameCanvas.Proxy.DrawScaledRotateCameraImage* DrawRotatedImage Obsolete 代替: @GameCanvas.Proxy.DrawScaledRotateImage* DrawRotatedOnlineImage Obsolete DrawRotatedRect TODO DrawScaledCameraImage Obsolete 代替: @GameCanvas.Proxy.DrawScaledRotateCameraImage* DrawScaledImage Obsolete 代替: @GameCanvas.Proxy.DrawScaledRotateImage* DrawScaledOnlineImage Obsolete DrawString @GameCanvas.Proxy.DrawString* 引数順と型の変更、ダイナミックフォント対応 FillCircle @GameCanvas.Proxy.FillCircle* 引数の型の変更 FillRect @GameCanvas.Proxy.FillRect* 引数の型の変更 FillRotatedRect TODO frameRate @GameCanvas.Proxy.ConfigFps* 関数名の変更 GetColorOfCameraImage Obsolete GetColorsOfCameraImage Obsolete GetDay @GameCanvas.Proxy.CurrentDay* 関数名の変更 GetDayOfWeek @GameCanvas.Proxy.CurrentDayOfWeek* 関数名と型の変更 GetDayOfWeekKanji Obsolete 代替: @GameCanvas.Proxy.CurrentDayOfWeek* GetHour @GameCanvas.Proxy.CurrentHour* 関数名の変更 GetIsKeyPress @GameCanvas.Proxy.GetIsKeyPress* 引数の型の変更 GetIsKeyPushed @GameCanvas.Proxy.GetIsKeyBegan* 引数の型の変更 GetIsKeyReleased @GameCanvas.Proxy.GetIsKeyEnded* 引数の型の変更 GetMilliSecond @GameCanvas.Proxy.CurrentMillisecond* 関数名の変更 GetMinute @GameCanvas.Proxy.CurrentMinute* 関数名の変更 GetMonth @GameCanvas.Proxy.CurrentMonth* 関数名の変更 GetSecond @GameCanvas.Proxy.CurrentSecond* 関数名の変更 GetTextFromNet Obsolete GetTextFromNetAsync Obsolete 代替: @GameCanvas.Proxy.GetOnlineTextAsync* GetTouchPoint Obsolete 代替: @GameCanvas.Proxy.GetPointerX* @GameCanvas.Proxy.GetPointerY* GetYear @GameCanvas.Proxy.CurrentYear* 関数名の変更 gyroX TODO gyroY TODO gyroZ TODO isBackKeyPushed Obsolete 代替: @GameCanvas.Proxy.IsPressBackButton isCompassEnabled Obsolete isDevelop Obsolete isDownloadedImage Obsolete isFlick Obsolete isFullScreen Obsolete isGyroEnabled Obsolete isHold Obsolete 代替: @GameCanvas.Proxy.GetPointerDuration* isLoaded Obsolete isLocationEnabled @GameCanvas.Proxy.HasGeolocationPermission* 関数名の変更 isOpenWS Obsolete isPinchIn Obsolete isPinchInOut Obsolete isPinchOut Obsolete isPortrait Obsolete isRunningLocaltionService @GameCanvas.Proxy.IsGeolocationRunning* 関数名の変更、仕様変更 isScreenAutoRotation Obsolete isTap Obsolete 代替: @GameCanvas.Proxy.GetPointerDuration* isTouch Obsolete 代替: @GameCanvas.Proxy.HasPointerEvent* @GameCanvas.Proxy.PointerCount* isTouchBegan Obsolete 代替: @GameCanvas.Proxy.GetIsPointerBegan* isTouchEnded Obsolete 代替: @GameCanvas.Proxy.GetIsPointerEnded* lastLocationLatitude @GameCanvas.Proxy.GeolocationLastLatitude* 関数名の変更 lastLocationLongitude @GameCanvas.Proxy.GeolocationLastLongitude* 関数名の変更 lastLocationTime @GameCanvas.Proxy.GeolocationLastTime* 関数名と型の変更 Load TODO LoadAsInt @GameCanvas.Proxy.Load* 関数名と型の変更 LoadAsNumber TODO maxPinchInScale Obsolete maxTapDistance Obsolete maxTapTimeLength Obsolete minFlickDistance Obsolete minHoldTimeLength Obsolete minPinchOutScale Obsolete OpenWS Obsolete PauseBGM @GameCanvas.Proxy.PauseSound* 関数名の変更 pinchRatio Obsolete pinchRatioInstant Obsolete PlayBGM @GameCanvas.Proxy.PlaySound* 関数名の変更 PlaySE Obsolete Rad2Deg Obsolete ReadDataByStorage Obsolete Save TODO SaveAsInt @GameCanvas.Proxy.Save* 関数名と型の変更 SaveAsNumber TODO screenHeight @GameCanvas.Proxy.CanvasHeight* 関数名の変更 screenWidth @GameCanvas.Proxy.CanvasWidth* 関数名の変更 SendWS Obsolete SetFontSize @GameCanvas.Proxy.SetFontSize* 引数の型の変更 SetTextHorizontalRatio Obsolete SetTextLineHeight Obsolete SetTextTracking Obsolete StartCameraService @GameCanvas.Proxy.StartCameraService* 引数の型の変更 StartLocationService @GameCanvas.Proxy.StartGeolocationService* 関数名の変更 StopBGM @GameCanvas.Proxy.StopSound* 関数名の変更 StopLocationService @GameCanvas.Proxy.StopGeolocationService* 関数名の変更 time @GameCanvas.Proxy.TimeSinceStartup* 関数名の変更 touchCount @GameCanvas.Proxy.PointerCount* 関数名の変更 touchPoint Obsolete touchTimeLength Obsolete 代替: @GameCanvas.Proxy.GetPointerDuration* touchX Obsolete 代替: @GameCanvas.Proxy.GetPointerX* touchY Obsolete 代替: @GameCanvas.Proxy.GetPointerY* Trace TODO WriteDataToStorage Obsolete Java → Unity 旧Java版に存在し Unity v2.0 までに変更・廃止されたAPIの一覧と対応表です （関数名がパスカル形式に変更されただけのものは除外しています） Java Unity 備考 atan2 @GameCanvas.Proxy.Atan2* 引数の型の変更 changeBGMVolume @GameCanvas.Proxy.SetSoundVolume* 関数名の変更 changeSEVolume Obsolete cos @GameCanvas.Proxy.Cos* 引数の型の変更 getKeyPressLength Obsolete 代替: @GameCanvas.Proxy.GetKeyPressFrameCount* getMouseClickLength Obsolete 代替: @GameCanvas.Proxy.GetPointerFrameCount* getMouseX Obsolete 代替: @GameCanvas.Proxy.GetPointerX* getMouseY Obsolete 代替: @GameCanvas.Proxy.GetPointerY* HEIGHT @GameCanvas.Proxy.CanvasHeight* 関数名の変更 isKeyPress @GameCanvas.Proxy.GetIsKeyPress* 関数名の変更 isKeyPushed @GameCanvas.Proxy.GetIsKeyBegan* 関数名の変更 isKeyReleased @GameCanvas.Proxy.GetIsKeyEnded* 関数名の変更 isMousePress Obsolete 代替: @GameCanvas.Proxy.HasPointerEvent* @GameCanvas.Proxy.PointerCount* isMousePushed Obsolete 代替: @GameCanvas.Proxy.GetIsPointerBegan* isMouseReleased Obsolete 代替: @GameCanvas.Proxy.GetIsPointerEnded* KEY_C Obsolete KEY_DOWN Obsolete KEY_ENTER Obsolete KEY_LEFT Obsolete KEY_RIGHT Obsolete KEY_SPACE Obsolete KEY_UP Obsolete KEY_V Obsolete KEY_X Obsolete KEY_Z Obsolete pauseBGM @GameCanvas.Proxy.PauseSound* 関数名の変更 pauseSE Obsolete playBGM @GameCanvas.Proxy.PlaySound* 関数名の変更 playSE @GameCanvas.Proxy.PlaySE* 引数の変更 rand @GameCanvas.Proxy.Random* 関数名の変更 resetGame Obsolete setFont @GameCanvas.Proxy.SetFont* 引数の型の変更 setWindowTitle Obsolete showInputDialog Obsolete showYesNoDialog Obsolete sin @GameCanvas.Proxy.Sin* 引数の型の変更 sqrt @GameCanvas.Proxy.Sqrt* 引数の型の変更 stopBGM @GameCanvas.Proxy.StopSound* 関数名の変更 stopSE Obsolete WIDTH @GameCanvas.Proxy.CanvasWidth* 関数名の変更 writeScreenImage @GameCanvas.Proxy.WriteScreenImage* 返り値の型の変更"
  }
}